{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Fastberry Fastberry, is built with FastAPI and Strawberry that is why is named Fastberry . The manager is built with Click . Built With: Module Is Used To... Click Manage the server, development process and custom Commands . FastAPI Core Web Framework Strawberry GraphQL Library PyYAML Load the project Settings . Python-Dotenv Load the Environment Variables . Pydantic Format Environment Variables and more FastAPI uses. Uvicorn Run the server in Development mode. Gunicorn Run the server in Staging and Production mode. Install Fastberry python -m pip install fastberry Install Uvicorn + Gunicorn python -m pip install \"uvicorn[standard]\" gunicorn Module Workflow You can create commands or fastapi and strawberry-graphql endpoints. graph LR; A{Click} --> B[Uvicorn]; A --> C[Gunicorn]; A --- D[Load Settings & APIs]; B --> E{FastAPI}; C --> E; E --- F[Load Settings & APIs]; D --- |Strawberry-GraphQL| G{Your Commands}; F --- |Strawberry-GraphQL| H{Your API}; H --> Z{Your Code}; G --> Z; Core Layout root/ --> <Directory> - Project's Root. | |-- apps/ --> <Directory> - Modules (aka: Apps) in HERE. | |-- config/ --> <Directory> - Configurations. | |-- __init__.py --> <File> - Load Settings. | |-- docs.md --> <File> - API's Documentation in HERE. | | | |-- env/ --> <Directory> - Environments. | | |-- development.env --> <File> - Development Settings. | | |-- production.env --> <File> - Production Settings. | | `-- staging.env --> <File> - Staging Settings. | | | `-- mode.json --> <File> - Current Mode. | |-- main.py --> <File> - FastAPI main.py file. |-- manage.py --> <File> - Run (CLI) Command-Line-Interface. |-- settings.yaml --> <File> - Base Settings. `-- etc... Inspired By Django There are several things from Django that inspire this tool. Some of the commands and the installation of modules (aka: INSTALLED_APPS ) inside a Django project. Fastberry comes with a few key commands : startproject Create a new Fastberry project. ./manage.py run Run FastApi Server . ./manage.py schema Build GraphQL (Schema + Operations) . ./manage.py start-app Create a Fastberry App inside your \" apps \" directory. ./manage.py --help For more information . Mode (Options) ./manage.py run Start FastApi Server development staging production ./manage.py run --help For more information .","title":"Introduction"},{"location":"#welcome-to-fastberry","text":"Fastberry, is built with FastAPI and Strawberry that is why is named Fastberry . The manager is built with Click .","title":"Welcome to Fastberry"},{"location":"#built-with","text":"Module Is Used To... Click Manage the server, development process and custom Commands . FastAPI Core Web Framework Strawberry GraphQL Library PyYAML Load the project Settings . Python-Dotenv Load the Environment Variables . Pydantic Format Environment Variables and more FastAPI uses. Uvicorn Run the server in Development mode. Gunicorn Run the server in Staging and Production mode.","title":"Built With:"},{"location":"#install-fastberry","text":"python -m pip install fastberry","title":"Install Fastberry"},{"location":"#install-uvicorn-gunicorn","text":"python -m pip install \"uvicorn[standard]\" gunicorn","title":"Install Uvicorn + Gunicorn"},{"location":"#module-workflow","text":"You can create commands or fastapi and strawberry-graphql endpoints. graph LR; A{Click} --> B[Uvicorn]; A --> C[Gunicorn]; A --- D[Load Settings & APIs]; B --> E{FastAPI}; C --> E; E --- F[Load Settings & APIs]; D --- |Strawberry-GraphQL| G{Your Commands}; F --- |Strawberry-GraphQL| H{Your API}; H --> Z{Your Code}; G --> Z;","title":"Module Workflow"},{"location":"#core-layout","text":"root/ --> <Directory> - Project's Root. | |-- apps/ --> <Directory> - Modules (aka: Apps) in HERE. | |-- config/ --> <Directory> - Configurations. | |-- __init__.py --> <File> - Load Settings. | |-- docs.md --> <File> - API's Documentation in HERE. | | | |-- env/ --> <Directory> - Environments. | | |-- development.env --> <File> - Development Settings. | | |-- production.env --> <File> - Production Settings. | | `-- staging.env --> <File> - Staging Settings. | | | `-- mode.json --> <File> - Current Mode. | |-- main.py --> <File> - FastAPI main.py file. |-- manage.py --> <File> - Run (CLI) Command-Line-Interface. |-- settings.yaml --> <File> - Base Settings. `-- etc...","title":"Core Layout"},{"location":"#inspired-by-django","text":"There are several things from Django that inspire this tool. Some of the commands and the installation of modules (aka: INSTALLED_APPS ) inside a Django project.","title":"Inspired By Django"},{"location":"#fastberry-comes-with-a-few-key-commands","text":"startproject Create a new Fastberry project. ./manage.py run Run FastApi Server . ./manage.py schema Build GraphQL (Schema + Operations) . ./manage.py start-app Create a Fastberry App inside your \" apps \" directory. ./manage.py --help For more information .","title":"Fastberry comes with a few key commands:"},{"location":"#mode-options","text":"./manage.py run Start FastApi Server development staging production ./manage.py run --help For more information .","title":"Mode (Options)"},{"location":"applications/","text":"Introduction The Application definition in Fastberry is basically a python module . The idea is to have \"self-contained\" blocks of code that are reusable . Also, easy to share and use inside other Fastberry projects. Command ./manage.py start-app my_awesome_app Files Layout root/ | |-- apps/ | `-- MY_APPLICATION/ --> <Directory> - Your App in HERE! | |-- operations/ --> <Directory> - GraphQL-Operations in HERE! | |-- __init__.py | |-- commands.py | |-- extension.py | |-- graphql.py | |-- middleware.py | |-- inputs.py | |-- permissions.py | |-- router.py | `-- types.py | `-- etc... Application Diagrams GraphQL Operations Commands Router Application GraphQL graph LR; A[Application] --> |GraphQL| B[Operations]; A --> |Fastberry| C[GraphQL]; A --> |Strawberry| D[Inputs]; A --> |Fastberry & Strawberry| E[Types]; Application Operations graph LR; A[Application] --> |GraphQL| B; B[Client] --> C[Core] B --> D[Desktop] B --> E[Mobile] Application Commands graph LR; A[Application] --> |Click| B[Commands]; Application Router graph LR; A[Application] --> |FastAPI| B[Router];","title":"Introduction"},{"location":"applications/#introduction","text":"The Application definition in Fastberry is basically a python module . The idea is to have \"self-contained\" blocks of code that are reusable . Also, easy to share and use inside other Fastberry projects.","title":"Introduction"},{"location":"applications/#command","text":"./manage.py start-app my_awesome_app","title":"Command"},{"location":"applications/#files-layout","text":"root/ | |-- apps/ | `-- MY_APPLICATION/ --> <Directory> - Your App in HERE! | |-- operations/ --> <Directory> - GraphQL-Operations in HERE! | |-- __init__.py | |-- commands.py | |-- extension.py | |-- graphql.py | |-- middleware.py | |-- inputs.py | |-- permissions.py | |-- router.py | `-- types.py | `-- etc...","title":"Files Layout"},{"location":"applications/#application-diagrams","text":"GraphQL Operations Commands Router","title":"Application Diagrams"},{"location":"applications/#application-graphql","text":"graph LR; A[Application] --> |GraphQL| B[Operations]; A --> |Fastberry| C[GraphQL]; A --> |Strawberry| D[Inputs]; A --> |Fastberry & Strawberry| E[Types];","title":"Application GraphQL"},{"location":"applications/#application-operations","text":"graph LR; A[Application] --> |GraphQL| B; B[Client] --> C[Core] B --> D[Desktop] B --> E[Mobile]","title":"Application Operations"},{"location":"applications/#application-commands","text":"graph LR; A[Application] --> |Click| B[Commands];","title":"Application Commands"},{"location":"applications/#application-router","text":"graph LR; A[Application] --> |FastAPI| B[Router];","title":"Application Router"},{"location":"commands/","text":"Your code needs to be in a file named commands.py or folder named commands inside your Application . Your click.group needs to be named cli . File or Folder Layout File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- commands.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- commands/ --> <Directory> - Your Commands in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc... Python Code File Folder commands.py # -*- coding: utf-8 -*- \"\"\" Custom - Command-Line-Group \"\"\" import click # Init Group @click . group () def cli (): \"\"\"Click (CLI) Group\"\"\" # Create <Commands> here. @cli . command () def hello_world (): \"\"\"Demo CLI Function\"\"\" print ( \"Hello World\" ) __init__.py # -*- coding: utf-8 -*- \"\"\" Custom - Command-Line-Group \"\"\" import click # Import <Commands> Here from .hello_world import hello_world # Init Group @click . group () def cli (): \"\"\"Click (CLI) Group\"\"\" # Register <Commands> Here cli . add_command ( hello_world ) hello_world.py # -*- coding: utf-8 -*- \"\"\" Command - Hello World \"\"\" import click # Create <Commands> here. @click . command () def hello_world (): \"\"\"Demo CLI Function\"\"\" print ( \"Hello World\" )","title":"Commands"},{"location":"commands/#file-or-folder-layout","text":"File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- commands.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- commands/ --> <Directory> - Your Commands in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc...","title":"File or Folder Layout"},{"location":"commands/#python-code","text":"File Folder commands.py # -*- coding: utf-8 -*- \"\"\" Custom - Command-Line-Group \"\"\" import click # Init Group @click . group () def cli (): \"\"\"Click (CLI) Group\"\"\" # Create <Commands> here. @cli . command () def hello_world (): \"\"\"Demo CLI Function\"\"\" print ( \"Hello World\" ) __init__.py # -*- coding: utf-8 -*- \"\"\" Custom - Command-Line-Group \"\"\" import click # Import <Commands> Here from .hello_world import hello_world # Init Group @click . group () def cli (): \"\"\"Click (CLI) Group\"\"\" # Register <Commands> Here cli . add_command ( hello_world ) hello_world.py # -*- coding: utf-8 -*- \"\"\" Command - Hello World \"\"\" import click # Create <Commands> here. @click . command () def hello_world (): \"\"\"Demo CLI Function\"\"\" print ( \"Hello World\" )","title":"Python Code"},{"location":"crud-app/","text":"CRUD-App ( Default Setup) The CRUD application is created when you run the start-app command. With the --crud flag . CRUD All methods inside Query and Mutation classes are by default static -methods @staticmethod Each function is turn into a @staticmethod when it gets loaded after the server starts running. That means you don't use self inside your functions. Command ./manage.py start-app my_app --crud PyLint ( disable ) E0213 : Method should have \" self \" as first argument ( no-self-argument ) Main Five Operations The demo-app comes with 5 core operations . ( Create, Update, Delete, Search & Detail ) GraphQL CRUD Mutation Query Create Search Update Detail Delete Method CRUD GraphQL Description Create Create Mutation Create resource Update Update Mutation Update resource Delete Delete Mutation Delete resource Search Read Query Fetch Multiple resources Detail Read Query Fetch Single resource Variables ( optional ) schema : Requires a (type) < strawberry.type > . prefix : A prefix( str ) to use before the function name. Classes Query : GraphQL \" Query \" functions. Mutation : GraphQL \" Mutation \" functions. Demo Files demo.py __init__.py # -*- coding: utf-8 -*- \"\"\" API - CRUD \"\"\" # Fastberry from fastberry import GQL # Create your API (GraphQL) here. class Demo ( GQL ): \"\"\"Demo Api\"\"\" schema = None prefix = \"demo\" class Query : \"\"\"Query\"\"\" async def search ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Search\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\" async def update ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Update\" async def delete ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Delete\" # -*- coding: utf-8 -*- \"\"\" CRUD - Init \"\"\" from .demo import Demo","title":"CRUD-App"},{"location":"crud-app/#crud-app-default-setup","text":"The CRUD application is created when you run the start-app command. With the --crud flag .","title":"CRUD-App (Default Setup)"},{"location":"crud-app/#crud","text":"All methods inside Query and Mutation classes are by default static -methods @staticmethod Each function is turn into a @staticmethod when it gets loaded after the server starts running. That means you don't use self inside your functions.","title":"CRUD"},{"location":"crud-app/#command","text":"./manage.py start-app my_app --crud","title":"Command"},{"location":"crud-app/#pylint-disable","text":"E0213 : Method should have \" self \" as first argument ( no-self-argument )","title":"PyLint (disable)"},{"location":"crud-app/#main-five-operations","text":"The demo-app comes with 5 core operations . ( Create, Update, Delete, Search & Detail ) GraphQL CRUD Mutation Query Create Search Update Detail Delete Method CRUD GraphQL Description Create Create Mutation Create resource Update Update Mutation Update resource Delete Delete Mutation Delete resource Search Read Query Fetch Multiple resources Detail Read Query Fetch Single resource","title":"Main Five Operations"},{"location":"crud-app/#variables-optional","text":"schema : Requires a (type) < strawberry.type > . prefix : A prefix( str ) to use before the function name.","title":"Variables (optional)"},{"location":"crud-app/#classes","text":"Query : GraphQL \" Query \" functions. Mutation : GraphQL \" Mutation \" functions.","title":"Classes"},{"location":"crud-app/#demo-files","text":"demo.py __init__.py # -*- coding: utf-8 -*- \"\"\" API - CRUD \"\"\" # Fastberry from fastberry import GQL # Create your API (GraphQL) here. class Demo ( GQL ): \"\"\"Demo Api\"\"\" schema = None prefix = \"demo\" class Query : \"\"\"Query\"\"\" async def search ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Search\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\" async def update ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Update\" async def delete ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Delete\" # -*- coding: utf-8 -*- \"\"\" CRUD - Init \"\"\" from .demo import Demo","title":"Demo Files"},{"location":"graphql/","text":"Your code needs to be in a file named graphql.py or folder named graphql inside your Application . File or Folder Layout File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- graphql.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- graphql/ --> <Directory> - Your GraphQL in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc... Python Code File Folder crud.py # -*- coding: utf-8 -*- \"\"\" API - CRUD \"\"\" # Fastberry from fastberry import GQL # Create your API (GraphQL) here. class Demo ( GQL ): \"\"\"Demo Api\"\"\" class Query : \"\"\"Query\"\"\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\" __init__.py # -*- coding: utf-8 -*- \"\"\" CRUD - Init \"\"\" # Import your <cruds> here. from .demo import Demo demo.py # -*- coding: utf-8 -*- \"\"\" API - CRUD \"\"\" # Fastberry from fastberry import GQL # Create your API (GraphQL) here. class Demo ( GQL ): \"\"\"Demo Api\"\"\" class Query : \"\"\"Query\"\"\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\"","title":"GraphQL"},{"location":"graphql/#file-or-folder-layout","text":"File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- graphql.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- graphql/ --> <Directory> - Your GraphQL in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc...","title":"File or Folder Layout"},{"location":"graphql/#python-code","text":"File Folder crud.py # -*- coding: utf-8 -*- \"\"\" API - CRUD \"\"\" # Fastberry from fastberry import GQL # Create your API (GraphQL) here. class Demo ( GQL ): \"\"\"Demo Api\"\"\" class Query : \"\"\"Query\"\"\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\" __init__.py # -*- coding: utf-8 -*- \"\"\" CRUD - Init \"\"\" # Import your <cruds> here. from .demo import Demo demo.py # -*- coding: utf-8 -*- \"\"\" API - CRUD \"\"\" # Fastberry from fastberry import GQL # Create your API (GraphQL) here. class Demo ( GQL ): \"\"\"Demo Api\"\"\" class Query : \"\"\"Query\"\"\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\"","title":"Python Code"},{"location":"operations/","text":"Operations Layout MY_APP/ --> <Directory> - Your App Directory. | |-- operations/ --> <Directory> - Your GraphQL's Operations in HERE. | |-- core/ --> <File> - Use in both (Desktop & Mobile). | |-- desktop/ --> <File> - Use in Desktop. | `-- mobile/ --> <File> - Use in Mobile. | `-- etc... Create your own Files inside these folders and add the File-Extension .graphql OPERATIONS/ | | | |-- core/ | | `-- methods.graphql --> <File> - Client Code for GraphQL. | | | `-- etc... | `-- etc... And when you run the Command : schema ./manage.py schema It will automatically collect all Operations and build 5 Files . Inside a Folder named graphql/ . However, you can rename the folder/ . settings.yaml VERSION : 0.1.0 # ... etc # Rename - Generates (1) GENERATES : graphql Output folder for GraphQL Schema & Operations . # File From Code 1 schema.graphql Python 2 core.graphql GraphQL 3 desktop.graphql GraphQL 4 mobile.graphql GraphQL 5 operations.json Python","title":"Operations"},{"location":"operations/#operations-layout","text":"MY_APP/ --> <Directory> - Your App Directory. | |-- operations/ --> <Directory> - Your GraphQL's Operations in HERE. | |-- core/ --> <File> - Use in both (Desktop & Mobile). | |-- desktop/ --> <File> - Use in Desktop. | `-- mobile/ --> <File> - Use in Mobile. | `-- etc... Create your own Files inside these folders and add the File-Extension .graphql OPERATIONS/ | | | |-- core/ | | `-- methods.graphql --> <File> - Client Code for GraphQL. | | | `-- etc... | `-- etc... And when you run the Command : schema ./manage.py schema It will automatically collect all Operations and build 5 Files . Inside a Folder named graphql/ . However, you can rename the folder/ . settings.yaml VERSION : 0.1.0 # ... etc # Rename - Generates (1) GENERATES : graphql Output folder for GraphQL Schema & Operations . # File From Code 1 schema.graphql Python 2 core.graphql GraphQL 3 desktop.graphql GraphQL 4 mobile.graphql GraphQL 5 operations.json Python","title":"Operations Layout"},{"location":"routers/","text":"Your code needs to be in a file named router.py inside your Application . File Layout root/ | |-- apps/ | `-- MY_APP/ --> <Directory> - Your App in HERE! | `-- router.py --> <File> - Your code in HERE! | `-- etc... Python Code router.py # -*- coding: utf-8 -*- \"\"\" Router-Example \"\"\" from fastapi import APIRouter router = APIRouter ( tags = [ \"Examples\" ], ) # Create <Routers> here. @router . get ( \"/hello_world\" ) async def hello_world (): \"\"\"Return: A `Hello World` Message.\"\"\" return \"Hello World\"","title":"Router"},{"location":"routers/#file-layout","text":"root/ | |-- apps/ | `-- MY_APP/ --> <Directory> - Your App in HERE! | `-- router.py --> <File> - Your code in HERE! | `-- etc...","title":"File Layout"},{"location":"routers/#python-code","text":"router.py # -*- coding: utf-8 -*- \"\"\" Router-Example \"\"\" from fastapi import APIRouter router = APIRouter ( tags = [ \"Examples\" ], ) # Create <Routers> here. @router . get ( \"/hello_world\" ) async def hello_world (): \"\"\"Return: A `Hello World` Message.\"\"\" return \"Hello World\"","title":"Python Code"},{"location":"settings/","text":"Core Settings are in YAML format. Because YAML is easy to read. \"is a human-readable data-serialization language\". \u2014 Wikipedia Environment Variables are in dot.env because are dependent in the current environment mode . Settings Workflow Load settings.yaml Load mode.json Load Environment Variables graph LR; A[settings.yaml] --> D; B[mode.json] --> C; C[mode.env] --> D{Project Settings}; Locations root/ --> <Directory> - Project's Root. | |-- config/ --> <Directory> - Configurations. | |-- etc... | |-- env/ --> <Directory> - Environments. | | |-- development.env --> <File> - Development Settings. | | |-- production.env --> <File> - Production Settings. | | `-- staging.env --> <File> - Staging Settings. | | | `-- mode.json --> <File> - Current Mode. | |-- settings.yaml --> <File> - Base Settings. `-- etc... YAML (CODE) Middleware, Extension and Permissions Settings (YAML) # API Information VERSION : 0.1.0 # (1) APP_NAME : Fastberry # (2) ADMIN_EMAIL : fastberry@example.com # (3) # GraphQL (Output Folder) (4) GENERATES : graphql QUERYING : items_per_page : 50 # (6) max_depth : 4 # (7) # Allowed Hosts (5) ALLOWED_HOSTS : - http://localhost:8080 - http://127.0.0.1:8080 # Applications (8) INSTALLED_APPS : - my_awesome_app # Development (9) DEVELOPMENT_APPS : - some_development_tool # Middleware (10) MIDDLEWARE : - myapp.middleware.SomeMiddleware # Extensions (11) EXTENSIONS : - myapp.extension.SomeExtension # Permissions (12) PERMISSIONS : - myapp.permission.SomePermission # Event-Startup (13) ON_STARTUP : - myapp.events.OnStartup # Event-Shutdown (14) ON_SHUTDOWN : - myapp.events.OnShutdown API \u2014 Current Version . API \u2014 Project Name . API \u2014 Admin Email . Output folder for GraphQL Schema & Operations . List of Allowed Hosts that can connect to the server. Max number of items to grab from the Database . Max number for the depth of GraphQL Queries . List of Installed Apps that are currently used in the project. List of Development Apps that are active when the server is running on development mode . List of BaseMiddleware (s) and uses (Starlette) List of BaseExtension (s) and uses (Strawberry) List of BasePermission (s) and uses (Strawberry) FastAPI Startup event. Everything You want to load before the SERVER starts. FastAPI Shutdown event. Everything You want to stop before the SERVER shutdown. Breakdown of the Settings MIDDLEWARE (Starlette) List of active Middlewares . You can create your own middleware by using the base module . The BaseMiddleware included is just a wrapper/rename for BaseHTTPMiddleware from Starlette EXTENSIONS (Strawberry) List of active Extensions . You can create your own extension by using the base module . The BaseExtension included is just a wrapper/rename for Extension from Strawberry PERMISSIONS (Strawberry) List of active Permissions . You can create your own permissions by using the base module . The BasePermission included is just a wrapper for BasePermission from Strawberry","title":"Settings"},{"location":"settings/#settings-workflow","text":"Load settings.yaml Load mode.json Load Environment Variables graph LR; A[settings.yaml] --> D; B[mode.json] --> C; C[mode.env] --> D{Project Settings};","title":"Settings Workflow"},{"location":"settings/#locations","text":"root/ --> <Directory> - Project's Root. | |-- config/ --> <Directory> - Configurations. | |-- etc... | |-- env/ --> <Directory> - Environments. | | |-- development.env --> <File> - Development Settings. | | |-- production.env --> <File> - Production Settings. | | `-- staging.env --> <File> - Staging Settings. | | | `-- mode.json --> <File> - Current Mode. | |-- settings.yaml --> <File> - Base Settings. `-- etc... YAML (CODE) Middleware, Extension and Permissions","title":"Locations"},{"location":"settings/#settings-yaml","text":"# API Information VERSION : 0.1.0 # (1) APP_NAME : Fastberry # (2) ADMIN_EMAIL : fastberry@example.com # (3) # GraphQL (Output Folder) (4) GENERATES : graphql QUERYING : items_per_page : 50 # (6) max_depth : 4 # (7) # Allowed Hosts (5) ALLOWED_HOSTS : - http://localhost:8080 - http://127.0.0.1:8080 # Applications (8) INSTALLED_APPS : - my_awesome_app # Development (9) DEVELOPMENT_APPS : - some_development_tool # Middleware (10) MIDDLEWARE : - myapp.middleware.SomeMiddleware # Extensions (11) EXTENSIONS : - myapp.extension.SomeExtension # Permissions (12) PERMISSIONS : - myapp.permission.SomePermission # Event-Startup (13) ON_STARTUP : - myapp.events.OnStartup # Event-Shutdown (14) ON_SHUTDOWN : - myapp.events.OnShutdown API \u2014 Current Version . API \u2014 Project Name . API \u2014 Admin Email . Output folder for GraphQL Schema & Operations . List of Allowed Hosts that can connect to the server. Max number of items to grab from the Database . Max number for the depth of GraphQL Queries . List of Installed Apps that are currently used in the project. List of Development Apps that are active when the server is running on development mode . List of BaseMiddleware (s) and uses (Starlette) List of BaseExtension (s) and uses (Strawberry) List of BasePermission (s) and uses (Strawberry) FastAPI Startup event. Everything You want to load before the SERVER starts. FastAPI Shutdown event. Everything You want to stop before the SERVER shutdown.","title":"Settings (YAML)"},{"location":"settings/#breakdown-of-the-settings","text":"","title":"Breakdown of the Settings"},{"location":"settings/#middleware-starlette","text":"List of active Middlewares . You can create your own middleware by using the base module . The BaseMiddleware included is just a wrapper/rename for BaseHTTPMiddleware from Starlette","title":"MIDDLEWARE (Starlette)"},{"location":"settings/#extensions-strawberry","text":"List of active Extensions . You can create your own extension by using the base module . The BaseExtension included is just a wrapper/rename for Extension from Strawberry","title":"EXTENSIONS (Strawberry)"},{"location":"settings/#permissions-strawberry","text":"List of active Permissions . You can create your own permissions by using the base module . The BasePermission included is just a wrapper for BasePermission from Strawberry","title":"PERMISSIONS (Strawberry)"},{"location":"apis/fastberry/","text":"Fastberry API The API can only be used inside your functions . However, it can be initialized outside your functions . Python Code from fastberry import Fastberry manager = Fastberry () API Usage print ( manager . mode ) Key File Description mode mode.json ( str ) \u2014 API's Current Mode ( development , staging , production ) env mode.env ( object ) \u2014 Environment Variables ( development , staging , production ) base settings.yaml ( object ) \u2014 Project Core Settings base_dir None ( path ) \u2014 Project Core Directory debug None ( bool ) \u2014 Debug Mode secret_key None ( str ) \u2014 Secret Key is used to provide cryptographic signing. API Backend Everything in the section below is automatically placed inside your project's code . Mostly inside your main.py or manage.py Key Description apps All apps get loaded here cli All commands get loaded here docs The documentation gets loaded here extensions All extensions get loaded here middleware All middleware gets loaded here router All routers get loaded here","title":"Fastberry API"},{"location":"apis/fastberry/#fastberry-api","text":"The API can only be used inside your functions . However, it can be initialized outside your functions .","title":"Fastberry API"},{"location":"apis/fastberry/#python-code","text":"from fastberry import Fastberry manager = Fastberry ()","title":"Python Code"},{"location":"apis/fastberry/#api-usage","text":"print ( manager . mode ) Key File Description mode mode.json ( str ) \u2014 API's Current Mode ( development , staging , production ) env mode.env ( object ) \u2014 Environment Variables ( development , staging , production ) base settings.yaml ( object ) \u2014 Project Core Settings base_dir None ( path ) \u2014 Project Core Directory debug None ( bool ) \u2014 Debug Mode secret_key None ( str ) \u2014 Secret Key is used to provide cryptographic signing.","title":"API Usage"},{"location":"apis/fastberry/#api-backend","text":"Everything in the section below is automatically placed inside your project's code . Mostly inside your main.py or manage.py Key Description apps All apps get loaded here cli All commands get loaded here docs The documentation gets loaded here extensions All extensions get loaded here middleware All middleware gets loaded here router All routers get loaded here","title":"API Backend"},{"location":"apis/graphql/","text":"GraphQL API In this section we will learn about all the different available options to create GraphQL methods. Import your Basics from fastberry import Model # (1) from fastberry import Text # (2) from fastberry import JSON # (3) from fastberry import GQL # (4) from fastberry.graphql.inputs import Pagination # (5) from fastberry.graphql.types import ( Edges , Error , ErrorMessage , Mutation , Query , Response , ) # (6) Base to create a SQL , Mongo or Generic { Types } . Field: Database Text and GraphQL String . Field: Database JSON and GraphQL JSON . Base class to create Query and Mutation methods. Pagination method. Uses the manager.base.querying.items_per_page to limit the request. Used for python annotations . Either for pure annotations or also to return a value that is compliant with your GraphQL Methods Descriptions Method Connects With ... Description Model Everything Use Model to create custom GraphQL Type(s) Edges Response Use Edges for annotations Response Edges Use Response to return a list of custom GraphQL Type Error [ErrorMessage] Use Error to return a list of ErrorMessage (s) Mutation Type( CustomType ) Use Mutation for annotations Query Type( CustomType ) Use Query for annotations Usage Example types.py inputs.py graphql.py GraphQL Model(s) is optional and it has 2 Required Fields . _id : (str) Meant to be the original Database unique identifier. id : (str) Meant to be the client's GraphQL unique identifier. types.py # -*- coding: utf-8 -*- \"\"\" API - Strawberry Types \"\"\" import strawberry # Create your <types> here. from fastberry import JSON , Model , Text model = Model () @model . type class Author : name : str @model . type class Product : \"\"\" query MyQuery { demoDetail { name aliases stock isAvailable createdAt sameDayShippingBefore price notes isObject category { name } } } \"\"\" name : str aliases : list [ str ] | None = None stock : int | None = None is_available : bool | None = None available_from : datetime . date | None = None created_at : datetime . datetime | None = None same_day_shipping_before : datetime . time | None = None price : decimal . Decimal | None = None notes : list [ Text ] = dc . field ( default_factory = list ) is_object : JSON = dc . field ( default_factory = dict ) async def category ( self ) -> typing . Optional [ \"Category\" ]: return Category ( name = \"awesome\" ) @model . type class Category : name : str inputs.py # -*- coding: utf-8 -*- \"\"\" API - Complex Inputs \"\"\" import strawberry # Create your <inputs> here. @strawberry . input class SearchAuthor : name : str | None = None graphql.py # -*- coding: utf-8 -*- \"\"\" API - CRUD \"\"\" from fastberry import GQL from fastberry.graphql.inputs import Pagination from fastberry.graphql.types import ( Edges , Error , ErrorMessage , Mutation , Query , Response , ) from . import inputs , types class Demo ( GQL ): \"\"\"Demo Api\"\"\" class Query : \"\"\"Query\"\"\" async def detail () -> Query ( types . Product ): return types . Product ( name = \"Model\" , aliases = [ \"type\" , \"class\" , \"object\" ]) async def single_instance ( search : inputs . SearchAuthor | None ) -> Query ( types . Author ): return types . Author ( _id = 1 , id = 1 , name = \"Ludwig Van Beethoven\" ) async def multiple_instances ( pagination : Pagination | None , ) -> Edges ( types . Author ): pagination = pagination or Pagination () return Response ( edges = [ types . Author ( _id = 1 , id = 1 , name = \"Ludwig Van Beethoven\" ), types . Author ( _id = 2 , id = 2 , name = \"Wolfgang Amadeus Mozart\" ), ], length = 2 , pages = 1 , ) class Mutation : \"\"\"Mutation\"\"\" async def create_good () -> Mutation ( types . Author ): if True : return types . Author ( _id = 2 , id = 2 , name = \"Wolfgang Amadeus Mozart\" ) return None async def create_bad () -> Mutation ( types . Author ): if False : return None return Error ([ ErrorMessage ( type = \"input\" , message = \"invalid input.\" )]) query Item { singleInstance(search: null) { id name } } query List { multipleInstances(pagination: null) { edges { node { id name } } } } mutation createGood { createGood { ... on Author { id name } ... on Error { messages { type message } } } } mutation createBad { createBad { ... on Author { id name } ... on Error { error messages { type message } } } }","title":"GraphQL API"},{"location":"apis/graphql/#graphql-api","text":"In this section we will learn about all the different available options to create GraphQL methods.","title":"GraphQL API"},{"location":"apis/graphql/#import-your-basics","text":"from fastberry import Model # (1) from fastberry import Text # (2) from fastberry import JSON # (3) from fastberry import GQL # (4) from fastberry.graphql.inputs import Pagination # (5) from fastberry.graphql.types import ( Edges , Error , ErrorMessage , Mutation , Query , Response , ) # (6) Base to create a SQL , Mongo or Generic { Types } . Field: Database Text and GraphQL String . Field: Database JSON and GraphQL JSON . Base class to create Query and Mutation methods. Pagination method. Uses the manager.base.querying.items_per_page to limit the request. Used for python annotations . Either for pure annotations or also to return a value that is compliant with your GraphQL","title":"Import your Basics"},{"location":"apis/graphql/#methods-descriptions","text":"Method Connects With ... Description Model Everything Use Model to create custom GraphQL Type(s) Edges Response Use Edges for annotations Response Edges Use Response to return a list of custom GraphQL Type Error [ErrorMessage] Use Error to return a list of ErrorMessage (s) Mutation Type( CustomType ) Use Mutation for annotations Query Type( CustomType ) Use Query for annotations","title":"Methods Descriptions"},{"location":"apis/graphql/#usage-example","text":"types.py inputs.py graphql.py GraphQL Model(s) is optional and it has 2 Required Fields . _id : (str) Meant to be the original Database unique identifier. id : (str) Meant to be the client's GraphQL unique identifier. types.py # -*- coding: utf-8 -*- \"\"\" API - Strawberry Types \"\"\" import strawberry # Create your <types> here. from fastberry import JSON , Model , Text model = Model () @model . type class Author : name : str @model . type class Product : \"\"\" query MyQuery { demoDetail { name aliases stock isAvailable createdAt sameDayShippingBefore price notes isObject category { name } } } \"\"\" name : str aliases : list [ str ] | None = None stock : int | None = None is_available : bool | None = None available_from : datetime . date | None = None created_at : datetime . datetime | None = None same_day_shipping_before : datetime . time | None = None price : decimal . Decimal | None = None notes : list [ Text ] = dc . field ( default_factory = list ) is_object : JSON = dc . field ( default_factory = dict ) async def category ( self ) -> typing . Optional [ \"Category\" ]: return Category ( name = \"awesome\" ) @model . type class Category : name : str inputs.py # -*- coding: utf-8 -*- \"\"\" API - Complex Inputs \"\"\" import strawberry # Create your <inputs> here. @strawberry . input class SearchAuthor : name : str | None = None graphql.py # -*- coding: utf-8 -*- \"\"\" API - CRUD \"\"\" from fastberry import GQL from fastberry.graphql.inputs import Pagination from fastberry.graphql.types import ( Edges , Error , ErrorMessage , Mutation , Query , Response , ) from . import inputs , types class Demo ( GQL ): \"\"\"Demo Api\"\"\" class Query : \"\"\"Query\"\"\" async def detail () -> Query ( types . Product ): return types . Product ( name = \"Model\" , aliases = [ \"type\" , \"class\" , \"object\" ]) async def single_instance ( search : inputs . SearchAuthor | None ) -> Query ( types . Author ): return types . Author ( _id = 1 , id = 1 , name = \"Ludwig Van Beethoven\" ) async def multiple_instances ( pagination : Pagination | None , ) -> Edges ( types . Author ): pagination = pagination or Pagination () return Response ( edges = [ types . Author ( _id = 1 , id = 1 , name = \"Ludwig Van Beethoven\" ), types . Author ( _id = 2 , id = 2 , name = \"Wolfgang Amadeus Mozart\" ), ], length = 2 , pages = 1 , ) class Mutation : \"\"\"Mutation\"\"\" async def create_good () -> Mutation ( types . Author ): if True : return types . Author ( _id = 2 , id = 2 , name = \"Wolfgang Amadeus Mozart\" ) return None async def create_bad () -> Mutation ( types . Author ): if False : return None return Error ([ ErrorMessage ( type = \"input\" , message = \"invalid input.\" )]) query Item { singleInstance(search: null) { id name } } query List { multipleInstances(pagination: null) { edges { node { id name } } } } mutation createGood { createGood { ... on Author { id name } ... on Error { messages { type message } } } } mutation createBad { createBad { ... on Author { id name } ... on Error { error messages { type message } } } }","title":"Usage Example"},{"location":"environments/variables/","text":"Environment(s) Variables Environments Variables Environments Create different environment variables (aka: settings ). For each stage of your API . Development Staging Production The Development environment DEBUG = \"yes\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\" The Staging environment DEBUG = \"yes\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\" The Production environment DEBUG = \"no\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\" mode .json The file mode.json is updated automatically when you run the server in a specific mode . { \"mode\" : \"development\" } Variables The environment variables . DEBUG : yes | no SECRET_KEY : Your-Secret-Api-Key Demo Environment DEBUG = \"yes\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\"","title":"Variables"},{"location":"environments/variables/#environments-variables","text":"Environments Variables","title":"Environment(s) Variables"},{"location":"environments/variables/#environments","text":"Create different environment variables (aka: settings ). For each stage of your API . Development Staging Production","title":"Environments"},{"location":"environments/variables/#the-development-environment","text":"DEBUG = \"yes\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\"","title":"The Development environment"},{"location":"environments/variables/#the-staging-environment","text":"DEBUG = \"yes\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\"","title":"The Staging environment"},{"location":"environments/variables/#the-production-environment","text":"DEBUG = \"no\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\"","title":"The Production environment"},{"location":"environments/variables/#modejson","text":"The file mode.json is updated automatically when you run the server in a specific mode . { \"mode\" : \"development\" }","title":"mode.json"},{"location":"environments/variables/#variables","text":"The environment variables . DEBUG : yes | no SECRET_KEY : Your-Secret-Api-Key","title":"Variables"},{"location":"environments/variables/#demo-environment","text":"DEBUG = \"yes\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\"","title":"Demo Environment"},{"location":"getting-started/installation/","text":"There are two-ways in which you can start using fastberry . Installing and Starting a new Project. Download the template and use pipenv to recreate the environment. Installation Create New Directory mkdir my-project cd my-project/ (PipEnv) Install Fastberry + Uvicorn python -m pipenv --python 3 .10 install fastberry \"uvicorn[standard]\" (PipEnv) Shell python -m pipenv shell Start Project Run (Command) Start-Project Make sure you created a new directory/ . Because the startproject command creates the files in the CURRENT directory/ startproject Start App Run ( command ) Start-App ./manage.py start-app demo --crud Inside settings.yaml settings.yaml INSTALLED_APPS : - demo Run Server Run ( command ) Run-Server ./manage.py run","title":"PyPi with Pipenv"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#create-new-directory","text":"mkdir my-project cd my-project/","title":"Create New Directory"},{"location":"getting-started/installation/#pipenv-install-fastberry-uvicorn","text":"python -m pipenv --python 3 .10 install fastberry \"uvicorn[standard]\"","title":"(PipEnv) Install Fastberry + Uvicorn"},{"location":"getting-started/installation/#pipenv-shell","text":"python -m pipenv shell","title":"(PipEnv) Shell"},{"location":"getting-started/installation/#start-project","text":"","title":"Start Project"},{"location":"getting-started/installation/#run-command-start-project","text":"Make sure you created a new directory/ . Because the startproject command creates the files in the CURRENT directory/ startproject","title":"Run (Command) Start-Project"},{"location":"getting-started/installation/#start-app","text":"","title":"Start App"},{"location":"getting-started/installation/#run-command-start-app","text":"./manage.py start-app demo --crud","title":"Run (command) Start-App"},{"location":"getting-started/installation/#inside-settingsyaml","text":"settings.yaml INSTALLED_APPS : - demo","title":"Inside settings.yaml"},{"location":"getting-started/installation/#run-server","text":"","title":"Run Server"},{"location":"getting-started/installation/#run-command-run-server","text":"./manage.py run","title":"Run (command) Run-Server"},{"location":"getting-started/template/","text":"Fastberry- Template In your shell terminal type the following command git clone https://github.com/hlop3z/fastberry-template OR Go to Fastberry-Template Change Directory cd fastberry-template/ Then . . . Recreate Development Environment python -m pipenv install --dev --skip-lock Go to the Environment's Shell python -m pipenv shell Run the Server ./manage.py run","title":"Template"},{"location":"getting-started/template/#fastberry-template","text":"In your shell terminal type the following command git clone https://github.com/hlop3z/fastberry-template OR Go to Fastberry-Template","title":"Fastberry-Template"},{"location":"getting-started/template/#change-directory","text":"cd fastberry-template/","title":"Change Directory"},{"location":"getting-started/template/#then","text":"","title":"Then . . ."},{"location":"getting-started/template/#recreate-development-environment","text":"python -m pipenv install --dev --skip-lock","title":"Recreate Development Environment"},{"location":"getting-started/template/#go-to-the-environments-shell","text":"python -m pipenv shell","title":"Go to the Environment's Shell"},{"location":"getting-started/template/#run-the-server","text":"./manage.py run","title":"Run the Server"},{"location":"middleware/extension/","text":"Extension Example Inject { User } or { Anonymous-User } to GraphQL Context . EXTENSIONS (Strawberry) You can create your own extension by using the base module . The BaseExtension included is just a wrapper/rename for Extension from Strawberry Tutorial Full-Code Import your Basics # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from pydantic import BaseModel from fastberry import BaseExtension Create the User class with pydantic or dataclasses class User ( BaseModel ): \"\"\"API User\"\"\" id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False Anonymous -User or Authenticated -User? def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user async def get_request_user ( request ): \"\"\"Get User from Request the Header or Cookie\"\"\" print ( request ) return None Create your Strawberry / Fastberry Extension For more information about custom extensions go to strawberry : custom-extensions class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user extension.py # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from pydantic import BaseModel from fastberry import BaseExtension class User ( BaseModel ): \"\"\"API User\"\"\" id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user async def get_request_user ( request ): \"\"\"Get User from Request the Header or Cookie\"\"\" print ( request ) return None class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user","title":"Extension"},{"location":"middleware/extension/#extension-example","text":"Inject { User } or { Anonymous-User } to GraphQL Context .","title":"Extension Example"},{"location":"middleware/extension/#extensions-strawberry","text":"You can create your own extension by using the base module . The BaseExtension included is just a wrapper/rename for Extension from Strawberry Tutorial Full-Code","title":"EXTENSIONS (Strawberry)"},{"location":"middleware/extension/#import-your-basics","text":"# -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from pydantic import BaseModel from fastberry import BaseExtension","title":"Import your Basics"},{"location":"middleware/extension/#create-the-user-class-with-pydantic-or-dataclasses","text":"class User ( BaseModel ): \"\"\"API User\"\"\" id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False","title":"Create the User class with pydantic or dataclasses"},{"location":"middleware/extension/#anonymous-user-or-authenticated-user","text":"def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user async def get_request_user ( request ): \"\"\"Get User from Request the Header or Cookie\"\"\" print ( request ) return None","title":"Anonymous-User or Authenticated-User?"},{"location":"middleware/extension/#create-your-strawberry-fastberry-extension","text":"For more information about custom extensions go to strawberry : custom-extensions class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user extension.py # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from pydantic import BaseModel from fastberry import BaseExtension class User ( BaseModel ): \"\"\"API User\"\"\" id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user async def get_request_user ( request ): \"\"\"Get User from Request the Header or Cookie\"\"\" print ( request ) return None class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user","title":"Create your Strawberry / Fastberry Extension"},{"location":"middleware/middleware/","text":"Middleware Example Get { Authorization } from the { Cookies } and inject it to the { Headers }. MIDDLEWARE (Starlette) You can create your own middleware by using the base module . The BaseMiddleware included is just a wrapper/rename for BaseHTTPMiddleware from Starlette Tutorial Full-Code Import your Basics # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware Create your FastAPI / Starlette / Fastberry Middleware For more information about custom middleware go to starlette : BaseHTTPMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response middleware.py # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response","title":"Middleware"},{"location":"middleware/middleware/#middleware-example","text":"Get { Authorization } from the { Cookies } and inject it to the { Headers }.","title":"Middleware Example"},{"location":"middleware/middleware/#middleware-starlette","text":"You can create your own middleware by using the base module . The BaseMiddleware included is just a wrapper/rename for BaseHTTPMiddleware from Starlette Tutorial Full-Code","title":"MIDDLEWARE (Starlette)"},{"location":"middleware/middleware/#import-your-basics","text":"# -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware","title":"Import your Basics"},{"location":"middleware/middleware/#create-your-fastapi-starlette-fastberry-middleware","text":"For more information about custom middleware go to starlette : BaseHTTPMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response middleware.py # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response","title":"Create your FastAPI / Starlette / Fastberry Middleware"},{"location":"middleware/permissions/","text":"Permission Example Check GraphQL Context for a { User } or { Anonymous-User }. PERMISSIONS (Strawberry) You can create your own permissions by using the base module . The BasePermission included is just a wrapper for BasePermission from Strawberry Tutorial Full-Code Import your Basics # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission Get User Permissions ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms Create your Strawberry / Fastberry Permission For more information about custom permissions go to strawberry : custom-permissions class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False permissions.py # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False","title":"Permission"},{"location":"middleware/permissions/#permission-example","text":"Check GraphQL Context for a { User } or { Anonymous-User }.","title":"Permission Example"},{"location":"middleware/permissions/#permissions-strawberry","text":"You can create your own permissions by using the base module . The BasePermission included is just a wrapper for BasePermission from Strawberry Tutorial Full-Code","title":"PERMISSIONS (Strawberry)"},{"location":"middleware/permissions/#import-your-basics","text":"# -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission","title":"Import your Basics"},{"location":"middleware/permissions/#get-user-permissions","text":"ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms","title":"Get User Permissions"},{"location":"middleware/permissions/#create-your-strawberry-fastberry-permission","text":"For more information about custom permissions go to strawberry : custom-permissions class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False permissions.py # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False","title":"Create your Strawberry / Fastberry Permission"},{"location":"middleware/plugin/","text":"Plugin Example Coming full circle with all Four-Elements (Middleware, Extension, Permissions and Router) Plugin Workflow graph LR; Z[Client] --> A; A[Request] --> B; B{Middleware} --> C; C{Extension} --> D; D{Permissions} --> E; E[Resolver] --> F; F[Response] --> Z; Command ./manage.py start-app my_awesome_plugin --plugin Files Layout root/ | |-- apps/ | `-- MY_PLUGIN/ --> <Directory> - Your App in HERE! | | | |-- extension.py | |-- middleware.py | |-- permission.py | |-- router.py | `-- users.py | `-- etc... Other Requirements python -m pip install \"python-jose[cryptography]\" \"passlib[bcrypt]\" Jose Passlib Demo Credentials Username : johndoe or janedoe Password : secret Python Code users.py router.py extension.py middleware.py permission.py users.py # -*- coding: utf-8 -*- \"\"\" [Users] \"\"\" from datetime import datetime , timedelta from typing import Optional from fastapi import Depends , HTTPException , status from fastapi.security import OAuth2PasswordBearer from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b\" # Security ALGORITHM = \"HS256\" FAKE_USERS_DB = { \"johndoe\" : { \"id\" : 1 , \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , \"is_staff\" : True , \"super_user\" : False , }, \"janedoe\" : { \"id\" : 2 , \"username\" : \"janedoe\" , \"full_name\" : \"Jane Doe\" , \"email\" : \"janedoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , \"is_staff\" : False , \"super_user\" : False , }, } FAKE_ROLES_DB = { 1 : \"admin\" , 2 : \"public\" } class UserLogin ( BaseModel ): username : str password : str class Token ( BaseModel ): access_token : str token_type : str class User ( BaseModel ): id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) async def get_user ( username : str ): db = FAKE_USERS_DB role_db = FAKE_ROLES_DB if username in db : user_dict = db [ username ] role = role_db . get ( user_dict . get ( \"id\" )) user_dict [ \"role\" ] = role return UserInDB ( ** user_dict ) async def get_request_user ( request ): access_token = request . headers . get ( \"Authorization\" ) user = None if access_token : token = access_token . replace ( \"Bearer \" , \"\" ) auth_dict = await decode_token ( token ) if auth_dict : username = auth_dict . get ( \"username\" ) user = await get_user ( username = username ) return user async def authenticate_user ( username : str , password : str ): user = await get_user ( username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def decode_token ( token : str ): try : return_value = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) except JWTError : return_value = {} return return_value async def get_current_user ( token : Optional [ str ] = Depends ( oauth2_scheme ), ): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) payload = await decode_token ( token ) username : str = payload . get ( \"username\" ) if username is None : raise credentials_exception user = await get_user ( username = username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user router.py # -*- coding: utf-8 -*- \"\"\" [Router] \"\"\" from datetime import timedelta from fastapi import APIRouter , Depends , HTTPException , Response , status from fastapi.responses import JSONResponse from fastapi.security import OAuth2PasswordRequestForm from .users import ( Token , User , authenticate_user , create_access_token , get_current_active_user , ) ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 router = APIRouter ( tags = [ \"Users\" ], ) def to_camel_case ( text ): init , * temp = text . split ( \"_\" ) return \"\" . join ([ init . lower (), * map ( str . title , temp )]) @router . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( response : Response , form_data : OAuth2PasswordRequestForm = Depends (), ): user = await authenticate_user ( form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : str ( user . id ), \"username\" : user . username }, expires_delta = access_token_expires , ) response . set_cookie ( key = \"Authorization\" , value = access_token , httponly = True , secure = True ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @router . get ( \"/logout\" ) async def logout_user ( current_user : User = Depends ( get_current_active_user )): response = JSONResponse ({ \"logout\" : True }) response . delete_cookie ( key = \"Authorization\" ) return response @router . get ( \"/user-me\" ) # response_model=User async def read_users_me ( current_user : User = Depends ( get_current_active_user )): user_me = { to_camel_case ( k ): v for k , v in current_user . __dict__ . items ()} del user_me [ \"hashedPassword\" ] return user_me extension.py # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from fastberry import BaseExtension from .users import User , get_request_user def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user middleware.py # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response permission.py # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False","title":"Plugin"},{"location":"middleware/plugin/#plugin-example","text":"Coming full circle with all Four-Elements (Middleware, Extension, Permissions and Router)","title":"Plugin Example"},{"location":"middleware/plugin/#plugin-workflow","text":"graph LR; Z[Client] --> A; A[Request] --> B; B{Middleware} --> C; C{Extension} --> D; D{Permissions} --> E; E[Resolver] --> F; F[Response] --> Z;","title":"Plugin Workflow"},{"location":"middleware/plugin/#command","text":"./manage.py start-app my_awesome_plugin --plugin","title":"Command"},{"location":"middleware/plugin/#files-layout","text":"root/ | |-- apps/ | `-- MY_PLUGIN/ --> <Directory> - Your App in HERE! | | | |-- extension.py | |-- middleware.py | |-- permission.py | |-- router.py | `-- users.py | `-- etc...","title":"Files Layout"},{"location":"middleware/plugin/#other-requirements","text":"python -m pip install \"python-jose[cryptography]\" \"passlib[bcrypt]\" Jose Passlib","title":"Other Requirements"},{"location":"middleware/plugin/#demo-credentials","text":"Username : johndoe or janedoe Password : secret","title":"Demo Credentials"},{"location":"middleware/plugin/#python-code","text":"users.py router.py extension.py middleware.py permission.py users.py # -*- coding: utf-8 -*- \"\"\" [Users] \"\"\" from datetime import datetime , timedelta from typing import Optional from fastapi import Depends , HTTPException , status from fastapi.security import OAuth2PasswordBearer from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b\" # Security ALGORITHM = \"HS256\" FAKE_USERS_DB = { \"johndoe\" : { \"id\" : 1 , \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , \"is_staff\" : True , \"super_user\" : False , }, \"janedoe\" : { \"id\" : 2 , \"username\" : \"janedoe\" , \"full_name\" : \"Jane Doe\" , \"email\" : \"janedoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , \"is_staff\" : False , \"super_user\" : False , }, } FAKE_ROLES_DB = { 1 : \"admin\" , 2 : \"public\" } class UserLogin ( BaseModel ): username : str password : str class Token ( BaseModel ): access_token : str token_type : str class User ( BaseModel ): id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) async def get_user ( username : str ): db = FAKE_USERS_DB role_db = FAKE_ROLES_DB if username in db : user_dict = db [ username ] role = role_db . get ( user_dict . get ( \"id\" )) user_dict [ \"role\" ] = role return UserInDB ( ** user_dict ) async def get_request_user ( request ): access_token = request . headers . get ( \"Authorization\" ) user = None if access_token : token = access_token . replace ( \"Bearer \" , \"\" ) auth_dict = await decode_token ( token ) if auth_dict : username = auth_dict . get ( \"username\" ) user = await get_user ( username = username ) return user async def authenticate_user ( username : str , password : str ): user = await get_user ( username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def decode_token ( token : str ): try : return_value = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) except JWTError : return_value = {} return return_value async def get_current_user ( token : Optional [ str ] = Depends ( oauth2_scheme ), ): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) payload = await decode_token ( token ) username : str = payload . get ( \"username\" ) if username is None : raise credentials_exception user = await get_user ( username = username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user router.py # -*- coding: utf-8 -*- \"\"\" [Router] \"\"\" from datetime import timedelta from fastapi import APIRouter , Depends , HTTPException , Response , status from fastapi.responses import JSONResponse from fastapi.security import OAuth2PasswordRequestForm from .users import ( Token , User , authenticate_user , create_access_token , get_current_active_user , ) ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 router = APIRouter ( tags = [ \"Users\" ], ) def to_camel_case ( text ): init , * temp = text . split ( \"_\" ) return \"\" . join ([ init . lower (), * map ( str . title , temp )]) @router . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( response : Response , form_data : OAuth2PasswordRequestForm = Depends (), ): user = await authenticate_user ( form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : str ( user . id ), \"username\" : user . username }, expires_delta = access_token_expires , ) response . set_cookie ( key = \"Authorization\" , value = access_token , httponly = True , secure = True ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @router . get ( \"/logout\" ) async def logout_user ( current_user : User = Depends ( get_current_active_user )): response = JSONResponse ({ \"logout\" : True }) response . delete_cookie ( key = \"Authorization\" ) return response @router . get ( \"/user-me\" ) # response_model=User async def read_users_me ( current_user : User = Depends ( get_current_active_user )): user_me = { to_camel_case ( k ): v for k , v in current_user . __dict__ . items ()} del user_me [ \"hashedPassword\" ] return user_me extension.py # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from fastberry import BaseExtension from .users import User , get_request_user def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user middleware.py # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response permission.py # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False","title":"Python Code"},{"location":"middleware/workflow/","text":"Middleware + Extension + Permissions Building a plugin with all 3 elements (Middleware, Extension and Permissions). You can also combine them with a Router . For example: to create a User / Authentication API. Plugin Workflow graph LR; Z[Client] --> A; A[Request] --> B; B{Middleware} --> C; C{Extension} --> D; D{Permissions} --> E; E[Resolver] --> F; F[Response] --> Z; Middleware (FastAPI / Starlette) User is Authenticated or Anonymous ? Inject the Authorization Token to the Headers if the is in the Cookies . graph LR; A{My Middleware} --> |Request Headers| B[Authorization Token?]; B --> |Yes| D[Authenticated-User]; B --> |No| C[Authorization Cookie?]; C --> |No| E[Anonymous-User]; C --> |Yes| F[Inject-Header]; F --> |Authorization Token| B; D --> Z[Resolver / Next-Method]; E --> Z; Extension (Strawberry) Convert Authorization-Token or None to a User-Object and inject it to GraphQL 's context. graph LR; A{My Extension} --> |Request:Headers| B; B[Authorization Token?] --> |Yes| C[Authenticated-User]; B --> |No| D[Anonymous-User]; C --> E[User-Object]; D --> E; E --> |Inject User| F[info.context]; F --> Z[Resolver / Next-Method];; Permissions (Strawberry) Get the request's User and check the Role for a list of allowed methods . Then, check if info.field_name (which is the name of the current: Query or Mutation ) is in the list of allowed methods . Alternatively, you can use info.python_name if you prefer to use the python's original name of the function. graph LR; A{My Permission} --> |info.context| B[User]; B --> |is| C[Allowed?] C --> |Yes| F[Resolver / Next-Method] C --> |No| G[Response: Error]","title":"Workflow"},{"location":"middleware/workflow/#middleware-extension-permissions","text":"Building a plugin with all 3 elements (Middleware, Extension and Permissions). You can also combine them with a Router . For example: to create a User / Authentication API.","title":"Middleware + Extension + Permissions"},{"location":"middleware/workflow/#plugin-workflow","text":"graph LR; Z[Client] --> A; A[Request] --> B; B{Middleware} --> C; C{Extension} --> D; D{Permissions} --> E; E[Resolver] --> F; F[Response] --> Z;","title":"Plugin Workflow"},{"location":"middleware/workflow/#middleware-fastapi-starlette","text":"User is Authenticated or Anonymous ? Inject the Authorization Token to the Headers if the is in the Cookies . graph LR; A{My Middleware} --> |Request Headers| B[Authorization Token?]; B --> |Yes| D[Authenticated-User]; B --> |No| C[Authorization Cookie?]; C --> |No| E[Anonymous-User]; C --> |Yes| F[Inject-Header]; F --> |Authorization Token| B; D --> Z[Resolver / Next-Method]; E --> Z;","title":"Middleware (FastAPI / Starlette)"},{"location":"middleware/workflow/#extension-strawberry","text":"Convert Authorization-Token or None to a User-Object and inject it to GraphQL 's context. graph LR; A{My Extension} --> |Request:Headers| B; B[Authorization Token?] --> |Yes| C[Authenticated-User]; B --> |No| D[Anonymous-User]; C --> E[User-Object]; D --> E; E --> |Inject User| F[info.context]; F --> Z[Resolver / Next-Method];;","title":"Extension (Strawberry)"},{"location":"middleware/workflow/#permissions-strawberry","text":"Get the request's User and check the Role for a list of allowed methods . Then, check if info.field_name (which is the name of the current: Query or Mutation ) is in the list of allowed methods . Alternatively, you can use info.python_name if you prefer to use the python's original name of the function. graph LR; A{My Permission} --> |info.context| B[User]; B --> |is| C[Allowed?] C --> |Yes| F[Resolver / Next-Method] C --> |No| G[Response: Error]","title":"Permissions (Strawberry)"}]}