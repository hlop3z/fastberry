{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Fastberry","text":"<p>Fastberry, is built with FastAPI and Strawberry that is why is named Fastberry.</p> <p>The <code>Command-Line-Interface</code> (CLI) is built with Click.</p>"},{"location":"#description","title":"Description","text":"<p>A tool for building <code>GraphQL \u2014 API(s)</code> with <code>Python</code>.</p> <p>You can create . . .</p> <ol> <li><code>GraphQL</code> \u2014 <code>Query</code>(s) and <code>Mutation</code>(s).</li> <li><code>API</code> \u2014 HTTP <code>Operation</code>(s).</li> <li><code>Commands</code> \u2014 To create automated processes and more . . .</li> </ol>"},{"location":"#built-with","title":"Built With","text":"Module Is Used To... Click Manage the server, development process and custom <code>Commands</code>. FastAPI Core Web <code>Framework</code> Strawberry GraphQL <code>Library</code> Uvicorn Run the server in <code>Development</code> mode. Gunicorn Run the server in <code>Staging</code> and <code>Production</code> mode. SPOC FrameWork tool for building this <code>Framework</code>. DBController Database Controller for <code>SQL</code> and <code>Mongo</code>."},{"location":"#install-fastberry-demo","title":"Install Fastberry (Demo)","text":"<pre><code>python -m pip install \"fastberry[testing]\"\n</code></pre>"},{"location":"#install-fastberry-mongo","title":"Install Fastberry Mongo","text":"<pre><code>python -m pip install \"fastberry[mongo]\"\n</code></pre>"},{"location":"#install-fastberry-sql","title":"Install Fastberry SQL","text":"<pre><code>python -m pip install \"fastberry[sql]\" \"databases[sqlite]\"\n</code></pre> <p>SQL Options</p> Database Extra Installation(s) PostgreSQL <code>\"databases[postgresql]\"</code> MySQL <code>\"databases[mysql]\"</code> Sqlite <code>\"databases[sqlite]\"</code>"},{"location":"#install-gunicorn","title":"Install Gunicorn","text":"<pre><code>python -m pip install gunicorn\n</code></pre>"},{"location":"#project-flowchart","title":"Project Flowchart","text":"<p>You can create . . .</p> <p><code>Command(s)</code> | <code>API(s)</code> | <code>GraphQL</code> Components.</p> (API) Application Programming Interface (CLI) Command-Line Interface 1. Load all <code>Settings</code>. 1. Load all <code>Settings</code>. 2. Load <code>Environment Variables</code>. 2. Load <code>Environment Variables</code>. 3. Load all <code>Apps (Modules)</code>. 3. Load all <code>Apps (Modules)</code>. 4. Start the <code>API</code> Server. 4. Start the <code>CLI</code> Manager. <pre><code>flowchart LR;\n    A{Click} --&gt; B[Uvicorn];\n    A --&gt; C[Gunicorn];\n    A &lt;--&gt; D[Load Settings &amp; Modules];\n    B --&gt; E{FastAPI};\n    C --&gt; E;\n    E &lt;--&gt; F[Load Settings &amp; Modules];\n    D &lt;--&gt; |Strawberry-GraphQL| G{Your Commands};\n    F &lt;--&gt; |Strawberry-GraphQL| H{Your API};\n    H &lt;--&gt; Z{Your Code};\n    G &lt;--&gt; Z;</code></pre>"},{"location":"#core-layout","title":"Core Layout","text":"<pre><code>root/                           --&gt; &lt;Directory&gt; - Project's Root.\n|\n|-- apps/                       --&gt; &lt;Directory&gt; - Project's Apps.\n|\n|--  config/                    --&gt; &lt;Directory&gt; - Configurations.\n|    |\n|    |-- .env/                  --&gt; &lt;Directory&gt; - Environments.\n|    |   |-- development.toml   --&gt; &lt;File&gt; - Development    | Settings.\n|    |   |-- production.toml    --&gt; &lt;File&gt; - Production     | Settings.\n|    |   `-- staging.toml       --&gt; &lt;File&gt; - Staging        | Settings.\n|    |\n|    |-- docs.md                --&gt; &lt;File&gt; - API's Documentation in HERE.\n|    |-- settings.py            --&gt; &lt;File&gt; - API (Pythonic) | Settings.\n|    `-- spoc.toml              --&gt; &lt;File&gt; - API (TOML)     | Settings.\n|\n|-- pyproject.toml              --&gt; &lt;File&gt; - Project (TOML) | Settings.\n|\n`-- etc...\n</code></pre>"},{"location":"#inspired-by-django","title":"Inspired By Django","text":"<p>There are several things from Django that inspire this tool.</p> <p>Some of the commands and the installation of modules (aka: INSTALLED_APPS) inside a Django project.</p>"},{"location":"#fastberry-comes-with-a-few-key-commands","title":"Fastberry comes with a few key commands:","text":"Command Is Used To... <code>startproject</code> Create a new Fastberry project. <code>./manage.py run</code> Run FastApi Server. <code>./manage.py schema</code> Build GraphQL (Schema &amp; More). <code>./manage.py start-app</code> Create a Fastberry App inside your \"<code>apps</code>\" directory. <code>./manage.py --help</code> For more information. <p>startproject</p> <p>Careful with the command <code>startproject</code>. Only use it once and make sure you are in a new folder. It will write files and folders.</p>"},{"location":"diagram/","title":"Project Sequence Diagram","text":"<p>Below is a graphic description for the project's workflow.</p>"},{"location":"diagram/#app-controller","title":"App Controller","text":"<pre><code>from fastberry import App\nController = App()\n</code></pre> <p>Controller</p> <pre><code># Commands (1)\nController.cli\n# Router (2)\nController.router\n# GraphQL (3)\nController.graphql\n# Types (4)\nController.types\n</code></pre> <ol> <li>Commands \u2014  Built with Click Commands.</li> <li>Routes \u2014 Built with FastAPI.</li> <li>GraphQL \u2014 <code>Query</code>(s) and <code>Mutation</code>(s) Built with Strawberry.</li> <li>Types \u2014 <code>GraphQL</code> Strawberry Types.</li> </ol> <p>Project's Structure</p> <pre><code>root/\n|\n|--  apps/\n|    |\n|    `--  MY_APPLICATION/       --&gt; &lt;Directory&gt; - Your App in HERE!\n|        |\n|        |-- __init__.py\n|        |-- commands.py\n|        |-- graphql.py\n|        |-- router.py\n|        `-- types.py\n|\n`-- etc...\n</code></pre>"},{"location":"diagram/#app-plugins","title":"App Plugins","text":"<p>Files</p> <p>All Your files get loaded to these namespaces</p> <ol> <li><code>./commands.py</code> gets loaded to <code>cli</code></li> <li><code>./router.py</code> gets loaded to <code>router</code></li> <li><code>./graphql.py</code> gets loaded to <code>graphql</code></li> <li><code>./types.py</code> gets loaded to <code>types</code></li> </ol> <pre><code>sequenceDiagram\nautonumber\n    Your Code --&gt;Fastberry: Create Your Code;\n    Note over Your Code,Fastberry: Project;\n    loop Fastberry\n    Your Code --&gt;Fastberry: Create Components;\n    Note over Your Code,Fastberry: CLI (Commands);\n    Note over Your Code,Fastberry: API (Routes);\n    Note over Your Code,Fastberry: GraphQL (Operations);\n    Note over Your Code,Fastberry: GraphQL (Types);\n    Fastberry --&gt;Your Code: Your Components Are Loaded;\n    Note over Your Code,Fastberry: commands;\n    Note over Your Code,Fastberry: routers;\n    Note over Your Code,Fastberry: graphql;\n    Note over Your Code,Fastberry: types;\n    end\n    Fastberry --&gt;Server: Use Your Code;\n    Note over Fastberry,Server: Controller;\n    loop Controller\n    Fastberry --&gt;Server: (CLI) Command-Line Interface;\n    Note over Fastberry,Server: Commands;\n    Fastberry --&gt;Client: (API) Application Programming Interface;\n    Note over Fastberry,Client: HTTP \u2014 Operation(s);\n    Note over Fastberry,Client: GraphQL \u2014 Query(s) and Mutation(s);\n    end</code></pre>"},{"location":"foct/","title":"F.O.C.T","text":"<p>F.O.C.T Inspired by M.V.C</p> <p>F.O.C.T is Inspired by M.V.C (Model, View, Controller).</p> <ul> <li><code>Form</code> = Client's input for the Operation.</li> <li><code>Operation</code> = GraphQL Operation (Mutation or Query)</li> <li><code>Controller</code> = Handles updates to the database table aka: <code>Type</code></li> <li><code>Type</code> = Database Model aka: <code>Table</code></li> </ul>"},{"location":"foct/#acronym-foct","title":"Acronym \" F.O.C.T \"","text":"<ol> <li>(F)orm \u2014 Client Inputs</li> <li>(O)peration (GraphQL) \u2014 API Methods</li> <li>(C)ontroller (Manager) \u2014 Database Methods</li> <li>(T)ype (Aka: Model) \u2014 Table Schema</li> </ol> <pre><code>flowchart BT;\n    A[Types] --- D;\n    B[Forms] --- D;\n    C[Manager] --- D[Operations];</code></pre> Name API Reference Form <code>fastberry.input</code> AND <code>fastberry.value</code> Operation <code>fastberry.gql</code> Controller <code>fastberry.manager</code> Type <code>fastberry.sql.model</code> OR <code>fastberry.mongo.model</code>"},{"location":"foct/#foct-demo","title":"F.O.C.T Demo","text":"TypeController (Manager)FormOperations (GraphQL) types.py<pre><code>\"\"\"\n    { Types } GraphQL\n        OR\n    { Tables } Database\n\"\"\"\nimport fastberry as fb\n# Mongo Database\n# fb.mongo.model\n@fb.sql.model\nclass Category:\n\"\"\"(Type) Read The Docs\"\"\"\nname: str\n</code></pre> manager.py<pre><code>\"\"\"\n    { Controller } for the Database(s)\n\"\"\"\nimport fastberry as fb\nfrom . import types\nclass Base:\n@classmethod\nasync def all(cls):\nreturn await cls.objects.all()\n@classmethod\nasync def reset(cls):\nreturn await cls.objects.delete(None, all=True)\n@fb.manager\nclass Category(Base):\nmodel = types.Category\n@classmethod\nasync def create(cls, form):\ndata = form.data\nresults = await cls.objects.create(data.__dict__)\nreturn results\n</code></pre> forms.py<pre><code>\"\"\"\n    { Forms } for Operations\n\"\"\"\nimport fastberry as fb\n# Import Once's per project in any App.\n# IF you want the built-in (Forms) to be register in the GraphQL API.\nfrom fastberry import item, pagination\nform = fb.input(\"form\")\n@form\nclass Category:\n\"\"\"(Form) Read The Docs\"\"\"\nname = fb.value(\nstr,\nrequired=True,\n)\n@form(name=\"SearchEngine\")\nclass Search:\n\"\"\"(Form) Read The Docs\"\"\"\nname = fb.value(\nstr,  # Single Typing\ndefault=None,\n)\ncount = fb.value(\nint,\ndefault=None,\n)\ncash = fb.value(\nfloat,\ndefault=None,\n)\namount = fb.value(\nfb.decimal,\ndefault=None,\n)\nstart_date = fb.value(\nfb.date,\ndefault=None,\n)\nend_datetime = fb.value(\nfb.datetime,\ndefault=None,\n)\ntimestamp = fb.value(\nfb.time,\ndefault=None,\nrequired=False,\n)\n</code></pre> graphql.py<pre><code>\"\"\"\n    { Operations } for GraphQL\n\"\"\"\nimport fastberry as fb\nfrom . import forms, manager, types\n@fb.gql\nclass Demo:\n\"\"\"GraphQL Manager\"\"\"\nclass Meta:\n\"\"\"Class Meta-Data\"\"\"\napp = False\nmodel = \"Category\"\nclass Query:\n\"\"\"GraphQL Query\"\"\"\nasync def detail(item: fb.item # (1)\n) -&gt; fb.query(types.Category): # (2)\n\"\"\"(Detail-Operation) Read The Docs\"\"\"\nreturn types.Category(_id=1, id=\"$encoded_id$\", name=\"Cool\")\nasync def search(\nsearch: forms.Search,\npagination: fb.pagination # (3)\n) -&gt; fb.edges(types.Category): # (4)\n\"\"\"(Search-Operation) Read The Docs\"\"\"\n# Do Something if input { IS VALID } ...\nif search.input.is_valid:\nprint(\"\\n# Client's Inputs #\")\nprint(search.input.data)\nprint(pagination.input.data)\n# Get Data from the { Database } ...\nresults = await manager.Category.all()\nprint(\"\\n# Database Response #\")\nprint(results)\n# Return { Page }\nreturn fb.page( # (5)\nedges=[\ntypes.Category(_id=1, id=1, name=\"Computer\"),\ntypes.Category(_id=2, id=2, name=\"Radio\"),\n],\nlength=2,\npages=1,\n)\nclass Mutation:\n\"\"\"GraphQL Mutation\"\"\"\nasync def create(form: forms.Category\n) -&gt; fb.mutation(types.Category): # (6)\n\"\"\"(Create-Operation) Read The Docs\"\"\"\n# Client's Input\nif form.input.is_valid:\nprint(form.input.data)\n# Errors\nerrors_messages = []\n# IF error . . .\nerrors_messages.append(\nfb.error(type=\"input\", text=\"Error for Demo!\") # (7)\n)\nreturn fb.errors(messages=errors_messages) # (8)\n</code></pre> <ol> <li>Use <code>item</code> to <code>annotate</code> that you expect a <code>ID</code> or a list of <code>[IDs]</code></li> <li>Use <code>query</code> to <code>annotate</code> that you will <code>return</code> a specific <code>type</code></li> <li>Use <code>pagination</code> to <code>annotate</code> that you expect a page configuration (Used to limit the rows per request)</li> <li>Use <code>edges</code> to <code>annotate</code> that you will <code>return</code> a page-list of only a specific <code>type</code></li> <li>Use <code>page</code> to return a list of edges</li> <li>Use <code>mutation</code> to return either a <code>type</code> or a list of <code>errors</code></li> <li>Use <code>error</code> to create a single <code>error-message</code></li> <li>Use <code>errors</code> to return a list of <code>error</code>(s).</li> </ol> <p>Tools</p> <ol> <li><code>fastberry.item</code> to <code>annotate</code> that you expect a <code>ID</code> or a list of <code>[IDs]</code></li> <li><code>fastberry.query</code> to <code>annotate</code> that you will <code>return</code> a specific <code>type</code></li> <li><code>fastberry.pagination</code> to <code>annotate</code> that you expect a page configuration (Used to limit the rows per request)</li> <li><code>fastberry.edges</code> to <code>annotate</code> that you will <code>return</code> a page-list of only a specific <code>type</code></li> <li><code>fastberry.page</code> to return a list of edges</li> <li><code>fastberry.mutation</code> to return either a <code>type</code> or a list of <code>errors</code></li> <li><code>fastberry.error</code> to create a single <code>error-message</code></li> <li><code>fastberry.errors</code> to return a list of <code>error</code>(s).</li> </ol>"},{"location":"foct/#inputs-tools","title":"Inputs Tools","text":"<p>For Client-Inpunt in GraphQL Query and Mutation Operations.</p> Method Connects With ... Description <code>pagination</code> <code>[edges]</code> Use pagination for <code>annotations</code> of client's input <code>item</code> <code>types</code> Use item for <code>annotations</code> of client's input"},{"location":"foct/#types-tools","title":"Types Tools","text":"<p>For Annotation in GraphQL Query and Mutation Operations.</p> Method Connects With ... Description <code>editor</code> <code>types</code> Use editor for a custom-mutation <code>annotations</code> <code>mutation</code> <code>types</code> Use mutation for <code>annotations</code> <code>query</code> <code>types</code> Use query for <code>annotations</code> <code>edges</code> <code>page</code> Use edges for <code>annotations</code>"},{"location":"foct/#return-tools","title":"Return Tools","text":"<p>To Return Data Via Query and Mutation Operations.</p> Method Connects With ... Description <code>errors</code> <code>[error]</code> Use errors to <code>return</code> a list of error(s) <code>page</code> <code>[edges]</code> Use page to <code>return</code> a list of <code>edges</code> <code>deleted</code> <code>types</code> Use deleted to <code>return</code> a count of <code>deleted</code> items"},{"location":"settings/","title":"Settings","text":"<p>Core Settings are in <code>TOML</code> format. Because TOML is easy to read for humans and computers.</p> <p>TOML</p> <p>Since <code>TOML</code>  is <code>Python</code>'s new best friend. Feels like a good fit for the core settings of the project.</p>"},{"location":"settings/#settings-workflow","title":"Settings Workflow","text":"<p>Settings</p> <ol> <li>Load <code>pyproject.toml</code></li> <li>Load <code>spoc.toml</code></li> <li>Load <code>settings.py</code></li> <li>Load <code>Environment Variables</code></li> </ol> <pre><code>flowchart TB;\n    A[pyproject.toml] --&gt; E{Project Settings};\n    B[spoc.toml] --&gt; E{Project Settings};\n    C[settings.py] --&gt; E;\n    D[environment.toml] --&gt; E;</code></pre>"},{"location":"settings/#settings-locations","title":"Settings Locations","text":"<pre><code>root/                           --&gt; &lt;Directory&gt; - Project's Root.\n|\n|--  config/                    --&gt; &lt;Directory&gt; - Configurations.\n|    |\n|    |-- .env/                  --&gt; &lt;Directory&gt; - Environments.\n|    |   |-- development.toml   --&gt; &lt;File&gt; - Development Settings.\n|    |   |-- production.toml    --&gt; &lt;File&gt; - Production Settings.\n|    |   `-- staging.toml       --&gt; &lt;File&gt; - Staging Settings.\n|    |\n|    |-- settings.py            --&gt; &lt;File&gt; - Pythonic Settings.\n|    `-- spoc.toml              --&gt; &lt;File&gt; - Spoc Settings.\n|\n|-- pyproject.toml              --&gt; &lt;File&gt; - PyProject Settings.\n`-- etc...\n</code></pre> PyProjectSpocEnvironment VariablesCustom (settings.py)"},{"location":"settings/#pyproject-toml","title":"pyproject (TOML)","text":"pyproject.toml<pre><code>[project]\nname = \"fastberry\" # (1)\nversion = \"0.1.4\" # (2)\ndescription = \"GraphQL Made Easy.\" # (3)\n# etc ... (4)\n</code></pre> <ol> <li>Name \u2014 The name of the project.</li> <li>Version \u2014 The version of the project.</li> <li>Description \u2014 Short description of your project.</li> <li>Other \u2014 Extra configurations of your project.</li> </ol> <p>PyProject</p> <p><code>fastberry.config[\"pyproject\"]</code> is where your PyProject Variables are loaded.</p> example.py<pre><code>import fastberry as fb\nprint(fb.config[\"pyproject\"])\n</code></pre>"},{"location":"settings/#spoc-toml","title":"SPOC (TOML)","text":"config/spoc.toml<pre><code>[spoc] # (1)\nmode = \"custom\" # development, production, staging, custom\ncustom_mode = \"development\" # (16)\ndocs = \"config/docs.md\" # (17)\ngenerates = \"graphql\" # (18)\n[spoc.api] # (2)\ngraphql_path = \"/graphql\" # (10)\nmax_depth = 4 # (11)\nitems_per_page = 50 # (12)\nallowed_hosts = [\"http://localhost\", \"http://localhost:8080\"]\n[spoc.apps] # (3)\nproduction = [\"app_one\", \"app_two\"] # (13)\ndevelopment = [] # (14)\nstaging = [] # (15)\n[spoc.extras] # (4)\nmiddleware = [\"fastberry.extras.middleware \"] # (5)\nextensions = [\"fastberry.extras.extensions\"] # (6)\npermissions = [\"fastberry.extras.permissions\"] # (7)\non_startup = [\"fastberry.extras.on_startup\"] # (8)\non_shutdown = [\"fastberry.extras.on_shutdown\"] # (9)\n</code></pre> <ol> <li>API \u2014 Core Settings.</li> <li>API \u2014 Querying &amp; More Configs.</li> <li>Installed \u2014 Apps.</li> <li>Installed \u2014 Middleware, Extension &amp; Permissions.</li> <li>Middleware \u2014 For adding behavior that is applied across your entire (FastAPI) application.</li> <li>Extensions \u2014 For adding behavior that is applied across your entire (GraphQL) application.</li> <li>Permissions \u2014 For adding Permissions to your (GraphQL) application.</li> <li>On-Startup \u2014 For adding behavior that is applied before the server start.</li> <li>On-Shutdown \u2014 For adding behavior that is applied after the server shutdown.</li> <li>Endpoint \u2014 GraphQL's URL endpoint.</li> <li>Depth \u2014 Search depth in the GraphQL's tree.</li> <li>Pagination \u2014 Number of rows per page.</li> <li>Production \u2014 Production Ready Apps (<code>Production</code>).</li> <li>Development \u2014 Development Only Apps (<code>Production</code> + <code>Development</code>).</li> <li>Staging \u2014 Testing Only Apps (<code>Production</code> + <code>Staging</code>).</li> <li>Custom \u2014 Custom mode will load <code>Apps</code> from the pythonic <code>settings.py</code> plus the current <code>mode</code>.</li> <li>Docs \u2014 Path for the documentation.</li> <li>Generates \u2014 Folder where the schema and frontend related files and folders will be generated.</li> </ol> <p>SPOC</p> <p><code>fastberry.config[\"spoc\"]</code> is where your SPOC Variables are loaded.</p> example.py<pre><code>import fastberry as fb\nprint(fb.config[\"spoc\"])\n</code></pre>"},{"location":"settings/#environment-variables-toml","title":"Environment Variables (TOML)","text":"config/.env/development.toml<pre><code>[env]\nDEBUG       = \"yes\"\nSECRET_KEY  = \"fastapi-insecure-09d25e094faa6ca2556c\"\n</code></pre> <p>Variables</p> <p><code>fastberry.config[\"env\"]</code> is where your Environment Variables are loaded.</p> example.py<pre><code>import fastberry as fb\nprint(fb.config[\"env\"])\n</code></pre>"},{"location":"settings/#custom-python","title":"Custom (Python)","text":"settings.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Settings }\n\"\"\"\nimport pathlib\n# Base Directory\nBASE_DIR = pathlib.Path(__file__).parents[1]\n# Installed Apps\nINSTALLED_APPS = [\"good_app\", \"app_two\"]\n# Database(s)\nDATABASES = {\n\"sql\"  : {\"default\": \"sqlite:///example.db\"},\n\"mongo\": {\"default\": \"mongodb://localhost:27017/example\"},\n}\n</code></pre> <p>PyProject</p> <p><code>fastberry.config[\"pyproject\"]</code> is where your PyProject Variables are loaded.</p> example.py<pre><code>import fastberry as fb\nprint(fb.config[\"pyproject\"])\n</code></pre>"},{"location":"settings/#breakdown-of-the-middlewares-extensions-and-permissions","title":"Breakdown of the Middlewares, Extensions and Permissions","text":""},{"location":"settings/#middleware-starlette","title":"MIDDLEWARE (Starlette)","text":"<p>List of active Middlewares.</p> <p>You can create your own <code>middleware</code> by using the base module.</p> <p>The <code>BaseMiddleware</code> included is just a wrapper/rename for BaseHTTPMiddleware from Starlette</p>"},{"location":"settings/#extensions-strawberry","title":"EXTENSIONS (Strawberry)","text":"<p>List of active Extensions.</p> <p>You can create your own <code>extension</code> by using the base module.</p> <p>The <code>BaseExtension</code> included is just a wrapper/rename for Extension from Strawberry</p>"},{"location":"settings/#permissions-strawberry","title":"PERMISSIONS (Strawberry)","text":"<p>List of active Permissions.</p> <p>You can create your own <code>permissions</code> by using the base module.</p> <p>The <code>BasePermission</code> included is just a wrapper for BasePermission from Strawberry</p>"},{"location":"applications/","title":"Introduction","text":"<p>The definition for \"Application\" in <code>Fastberry</code> is basically a python <code>module</code>.</p> <p>The idea is to have \"self-contained\" <code>blocks of code</code> that are reusable.</p> <p>Also, easy to share and use inside other <code>Fastberry</code> projects.</p>"},{"location":"applications/#command","title":"Command","text":"<pre><code>./manage.py start-app my_awesome_app\n</code></pre>"},{"location":"applications/#files-layout-complex","title":"Files Layout (Complex)","text":"<p>Files (Complex)</p> <p>The example below represents a Complex Application that uses all of the internal tools</p> <ol> <li><code>commands</code> path to create Internal commands</li> <li><code>extension</code> path to create GraphQL's extensions</li> <li><code>permissions</code> path to create GraphQL's permissions</li> <li><code>middleware</code> path to create API's middleware</li> <li><code>on_event</code> (optional) path to create middleware for server Events's</li> </ol> <p>Name &amp; Usage of <code>on_event</code> are optional. You can name the <code>file</code> anyway you want.</p> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APPLICATION/       --&gt; &lt;Directory&gt; - Your App in HERE!\n|        |-- __init__.py\n|        |-- commands.py\n|        |-- extension.py\n|        |-- graphql.py\n|        |-- middleware.py\n|        |-- forms.py\n|        |-- permissions.py\n|        |-- on_event.py        --&gt; &lt;Optional&gt;\n|        |-- router.py\n|        `-- types.py\n|\n`-- etc...\n</code></pre>"},{"location":"applications/#files-layout-simple","title":"Files Layout (Simple)","text":"<p>Files (Simple)</p> <p>The example below represents a Simple Application that uses only the necessary tools to build an API</p> <ol> <li><code>types</code> use to create the equivalent of a database Model</li> <li><code>forms</code> use to create complex input forms</li> <li><code>manager</code> use to create complex database Queries &amp; Mutations</li> <li><code>graphql</code> use to create operations of the GraphQL</li> <li><code>router</code> (optional) used to create endpoints for FastAPI</li> </ol> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APPLICATION/       --&gt; &lt;Directory&gt; - Your App in HERE!\n|        |-- __init__.py\n|        |-- forms.py\n|        |-- graphql.py\n|        |-- manager.py\n|        |-- router.py          --&gt; &lt;Optional&gt;\n|        `-- types.py\n|\n`-- etc...\n</code></pre>"},{"location":"applications/#application-diagram","title":"Application Diagram","text":"<pre><code>flowchart LR;\n    A[Types] --- D;\n    B[Forms] --- D;\n    C[Manager] --- D;\n    D[Operations] --- F;\n    E((Router)) --- F;\n    F{API} --- H{Client};</code></pre> <p>Demo</p> <p>The example above shows the flow of the API but it also shows all the <code>tools</code> you can use to build your projects.</p>"},{"location":"applications/application/","title":"Application (C.R.U.D Default Setup)","text":"<p>Info</p> <p>The CRUD application is created when you run the <code>start-app</code> command.</p>"},{"location":"applications/application/#crud","title":"CRUD","text":"<p>All methods inside <code>Query</code> and <code>Mutation</code> classes are by default static-methods <code>@staticmethod</code></p> <p>Each function is turn into a <code>@staticmethod</code> when it gets loaded after the server starts running.</p> <p>That means you don't use <code>self</code> inside your functions.</p>"},{"location":"applications/application/#command","title":"Command","text":"<pre><code>./manage.py start-app my_app\n</code></pre>"},{"location":"applications/application/#pylint-disable","title":"PyLint (disable)","text":"<p>Warning</p> <p>E0213: Method should have \"<code>self</code>\" as first argument (no-self-argument)</p> <p>Disable the no-self-argument.</p>"},{"location":"applications/application/#five-operations-to-get-you-started","title":"Five Operations to get you started.","text":"<p>The demo-app comes with <code>5</code> core <code>operations</code>. (Create, Update, Delete, Search &amp; Detail)</p> GraphQLCRUD  Mutation  Query <code>Create</code> <code>Search</code> <code>Update</code> <code>Detail</code> <code>Delete</code> Method CRUD GraphQL Description <code>Create</code> Create <code>Mutation</code>     Create resource <code>Update</code> Update <code>Mutation</code>     Update resource <code>Delete</code> Delete <code>Mutation</code>      Delete resource <code>Search</code> Read <code>Query</code>       Fetch Multiple resources <code>Detail</code> Read <code>Query</code>       Fetch Single resource"},{"location":"applications/application/#classes","title":"Classes","text":"<ul> <li><code>Query</code>: GraphQL \"Query\" functions.</li> <li><code>Mutation</code>: GraphQL \"Mutation\" functions.</li> <li><code>Meta</code>: Configurations for the current GraphQL functions.</li> </ul>"},{"location":"applications/application/#meta-variables-optional","title":"Meta Variables (optional)","text":"<ul> <li><code>app</code> (bool) : Prepend the application's name to the operation's name.</li> <li><code>model</code> (str): Prepend model's name to the operation's name.</li> </ul> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- graphql/            --&gt; &lt;Directory&gt; - Your GraphQL in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             |-- demo.py         --&gt; &lt;File&gt; - Demo File.\n|             `-- etc...\n|\n`-- etc...\n</code></pre>"},{"location":"applications/application/#demo-files","title":"Demo Files","text":"demo.py__init__.py <pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    API - GraphQL\n\"\"\"\n# Fastberry\nimport fastberry as fb\n# Create your API (GraphQL) here.\n@fb.gql\nclass Demo:\n\"\"\"Demo Api\"\"\"\nclass Meta:\n\"\"\"GQL-Class Metadata\"\"\"\napp = False\nmodel = None\nclass Query:\n\"\"\"Query\"\"\"\nasync def search(info) -&gt; str:\n\"\"\"Read the Docs\"\"\"\nprint(info)\nreturn \"Search\"\nasync def detail(info) -&gt; str:\n\"\"\"Read the Docs\"\"\"\nprint(info)\nreturn \"Detail\"\nclass Mutation:\n\"\"\"Mutation\"\"\"\nasync def create(info) -&gt; str:\n\"\"\"Read the Docs\"\"\"\nprint(info)\nreturn \"Create\"\nasync def update(info) -&gt; str:\n\"\"\"Read the Docs\"\"\"\nprint(info)\nreturn \"Update\"\nasync def delete(info) -&gt; str:\n\"\"\"Read the Docs\"\"\"\nprint(info)\nreturn \"Delete\"\n</code></pre> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    GraphQL Operations\n\"\"\"\nfrom .demo import Demo\n</code></pre>"},{"location":"applications/commands/","title":"Commands","text":"<p>Your code needs to be in a file named <code>commands.py</code> or folder named <code>commands</code> inside your Application.</p> <p>Your <code>click.group</code> needs to be named <code>cli</code>.</p>"},{"location":"applications/commands/#file-or-folder-layout","title":"File or Folder Layout","text":"File Folder <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- commands.py          --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- commands/           --&gt; &lt;Directory&gt; - Your Commands in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             `-- etc...\n|\n`-- etc...\n</code></pre>"},{"location":"applications/commands/#python-code","title":"Python Code","text":"File Folder commands.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Custom - Command-Line-Group\n\"\"\"\nimport fastberry as fb\nimport click\n# Init Group\n@fb.cli\ndef cli():\n\"\"\"Click (CLI) Group\"\"\"\n# Create &lt;Commands&gt; here.\n@cli.command()\ndef hello_world():\n\"\"\"Demo CLI Function\"\"\"\nclick.echo(\"Hello World\")\n</code></pre> __init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Custom - Command-Line-Group\n\"\"\"\nimport fastberry as fb\n# Import &lt;Commands&gt; Here\nfrom .hello_world import hello_world\n# Init Group\n@fb.cli\ndef cli():\n\"\"\"Click (CLI) Group\"\"\"\n# Register &lt;Commands&gt; Here\ncli.add_command(hello_world)\n</code></pre> hello_world.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Command - Hello World\n\"\"\"\nimport click\n# Create &lt;Commands&gt; here.\n@click.command()\ndef hello_world():\n\"\"\"Demo CLI Function\"\"\"\nprint(\"Hello World\")\n</code></pre>"},{"location":"applications/forms/","title":"Forms","text":"<p>Your code needs to be in a file named <code>forms.py</code> or folder named <code>forms</code> inside your Application.</p>"},{"location":"applications/forms/#file-or-folder-layout","title":"File or Folder Layout","text":"File Folder <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- forms.py            --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- forms/              --&gt; &lt;Directory&gt; - Your Forms in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             `-- etc...\n|\n`-- etc...\n</code></pre> <p>Tools</p> <p>Fastberry <code>input-values</code> can only have a Single Typing. You'll mainly use 3 tools to create the <code>forms</code>.</p> <ol> <li><code>fastberry.input(str)</code></li> <li><code>fastberry.value</code></li> <li><code>fastberry.filters(regex = list(tuple), rules = list(function))</code></li> </ol>"},{"location":"applications/forms/#value-references","title":"Value References","text":"Name API Reference <code>default</code> The default value <code>required</code> Default: <code>False</code>. Does the field requires an input value? <code>regex</code> Regex (validators) <code>key</code> = <code>Regex-Pattern</code> and <code>value</code> = <code>Error-Message</code> <code>rules</code> Custom (validators) returns <code>None</code> or <code>Error-Message(s)</code> <code>filters</code> Transform-Data with <code>Regex</code> &amp; <code>Rules</code>"},{"location":"applications/forms/#python-code","title":"Python Code","text":"<p>Tip</p> <p>Values can only have a Single Type.</p> <p>However, you can wrap it around a <code>list</code> for example: <code>list[int]</code></p>  File Folder forms.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Forms - Complex Inputs\n\"\"\"\nimport fastberry as fb\n# Create Group \"Form\"\nform = fb.input(\"form\")\n# Create your &lt;forms&gt; here.\n@form  # (name=\"CustonInputName\")\nclass Search:\n\"\"\"(Form) Read The Docs\"\"\"\nname = fb.value(\n# Single Typing\nstr,\ndefault=None,\nrequired=True,\n)\ncount = fb.value(\nint,\ndefault=999,\n)\ncash = fb.value(\nfloat,\ndefault=44.4,\n)\namount = fb.value(\nfb.decimal,\ndefault=\"55.5\",\n)\nstart_date = fb.value(\nfb.date,\ndefault=\"2022-11-10\",\n)\nend_datetime = fb.value(\nfb.datetime,\ndefault=\"2022-11-10T16:35:56.216344\",\n)\ntimestamp = fb.value(\nfb.time,\ndefault=\"16:35:04.872130\",\n)\n@form\nclass User:\n\"\"\"(Complex-Form) Read The Docs\"\"\"\nemail = fb.value(\nstr,\ndefault=\"demo@helloworld.com\",\nregex={\nr\"[\\w\\.-]+@[\\w\\.-]+\": \"invalid email address\"\n},\nrules=[\n(lambda v: v.startswith(\"demo\") or \"invalid input\")\n],\nfilters=fb.filters(\nregex=[\n(\"^hello\", \"hola\"),\n(\"com\", \"api\"),\n],  # (\"^hello\"...) [Won't Work]: We used { regex } to check if it startswith \"hello\".\nrules=[\n(lambda v: v.upper())\n],\n),\n)\n</code></pre> __init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Forms - Init\n\"\"\"\n# Import your &lt;cruds&gt; here.\nfrom .demo import Search, User\n</code></pre> demo.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    API - Complex Inputs\n\"\"\"\n# Fastberry\nimport fastberry as fb\n# Create Group \"Form\"\nform = fb.input(\"form\")\n# Create your API (GraphQL) here.\n@form  # (name=\"CustonInputName\")\nclass Search:\n\"\"\"(Form) Read The Docs\"\"\"\nname = fb.value(\nstr,  # Single Typing\ndefault=None,\n)\ncount = fb.value(\nint,\ndefault=None,\n)\ncash = fb.value(\nfloat,\ndefault=None,\n)\namount = fb.value(\nfb.decimal,\ndefault=None,\n)\nstart_date = fb.value(\nfb.date,\ndefault=None,\n)\nend_datetime = fb.value(\nfb.datetime,\ndefault=None,\n)\ntimestamp = fb.value(\nfb.time,\ndefault=None,\nrequired=True,\n)\n@form\nclass User:\n\"\"\"(Complex-Form) Read The Docs\"\"\"\nemail = fb.value(\nstr,\ndefault=\"demo@helloworld.com\",\nregex={r\"[\\w\\.-]+@[\\w\\.-]+\": \"invalid email address\"},\nrules=[(lambda v: v.startswith(\"demo\") or \"invalid input\")],\nfilters=fb.filters(\nregex=[\n(\"^hello\", \"hola\"),\n(\"com\", \"api\"),\n],  # (\"^hello\"...) [Doesn't Work]: We used { regex } to check if it startswith \"hello\".\nrules=[(lambda v: v.upper())],\n),\n)\n</code></pre>"},{"location":"applications/graphql/","title":"GraphQL","text":"<p>Your code needs to be in a file named <code>graphql.py</code> or folder named <code>graphql</code> inside your Application.</p>"},{"location":"applications/graphql/#file-or-folder-layout","title":"File or Folder Layout","text":"File Folder <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- graphql.py            --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- graphql/            --&gt; &lt;Directory&gt; - Your GraphQL in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             `-- etc...\n|\n`-- etc...\n</code></pre>"},{"location":"applications/graphql/#python-code","title":"Python Code","text":"File Folder graphql.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    API - GraphQL\n\"\"\"\n# Fastberry\nimport fastberry as fb\n# Create your API (GraphQL) here.\n@fb.gql\nclass Demo:\n\"\"\"Demo Api\"\"\"\nclass Meta:\n\"\"\"GQL-Class Metadata\"\"\"\napp = False\nmodel = None\nclass Query:\n\"\"\"Query\"\"\"\nasync def detail(info) -&gt; str:\n\"\"\"Read the Docs\"\"\"\nprint(info)\nreturn \"Detail\"\nclass Mutation:\n\"\"\"Mutation\"\"\"\nasync def create(info) -&gt; str:\n\"\"\"Read the Docs\"\"\"\nprint(info)\nreturn \"Create\"\n</code></pre> __init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    GraphQL - Init\n\"\"\"\n# Import your &lt;cruds&gt; here.\nfrom .demo import Demo\n</code></pre> demo.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    API - GraphQL\n\"\"\"\n# Fastberry\nimport fastberry as fb\n# Create your API (GraphQL) here.\n@fb.gql\nclass Demo:\n\"\"\"Demo Api\"\"\"\nclass Meta:\n\"\"\"GQL-Class Metadata\"\"\"\napp = False\nmodel = None\nclass Query:\n\"\"\"Query\"\"\"\nasync def detail(info) -&gt; str:\n\"\"\"Read the Docs\"\"\"\nprint(info)\nreturn \"Detail\"\nclass Mutation:\n\"\"\"Mutation\"\"\"\nasync def create(info) -&gt; str:\n\"\"\"Read the Docs\"\"\"\nprint(info)\nreturn \"Create\"\n</code></pre>"},{"location":"applications/manager/","title":"Manager","text":"<p>Your code needs to be in a file named <code>manager.py</code> or folder named <code>manager</code> inside your Application.</p> <p>Info</p> <p>The purpose of the manager is to handle updates to the database</p>"},{"location":"applications/manager/#file-or-folder-layout","title":"File or Folder Layout","text":"File Folder <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- manager.py            --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- manager/            --&gt; &lt;Directory&gt; - Your Manager(s) in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             `-- etc...\n|\n`-- etc...\n</code></pre> <p>Tool</p> <ul> <li><code>fastberry.manager</code></li> </ul>"},{"location":"applications/manager/#python-code","title":"Python Code","text":"File Folder manager.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Controller } for the Database(s)\n\"\"\"\nimport fastberry as fb\nfrom . import types\nclass Base:\n\"\"\"Reusable Manager\"\"\"\n@classmethod\nasync def all(cls):\nreturn await cls.objects.all()\n@classmethod\nasync def reset_table(cls):\nreturn await cls.objects.delete(None, all=True)\n@fb.manager\nclass Product(Base):\n\"\"\"Product Manager\"\"\"\nmodel = types.Product\n@classmethod\nasync def create(cls, form):\nresults = None\nif form.is_valid:\nresults = await cls.objects.create(form.data.__dict__)\nreturn results\n</code></pre> __init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Manager - Init\n\"\"\"\n# Import your &lt;managers&gt; here.\nfrom .product import Product\n</code></pre> product.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Controller } for the Database(s)\n\"\"\"\nimport fastberry as fb\nfrom . import types\nclass Base:\n\"\"\"Reusable Manager\"\"\"\n@classmethod\nasync def all(cls):\nreturn await cls.objects.all()\n@classmethod\nasync def reset_table(cls):\nreturn await cls.objects.delete(None, all=True)\n@fb.manager\nclass Product(Base):\n\"\"\"Product Manager\"\"\"\nmodel = types.Product\n@classmethod\nasync def create(cls, form):\nresults = None\nif form.is_valid:\nresults = await cls.objects.create(form.data.__dict__)\nreturn results\n</code></pre>"},{"location":"applications/routers/","title":"Router","text":"<p>Your code needs to be in a file named <code>router.py</code> inside your Application.</p>"},{"location":"applications/routers/#file-layout","title":"File Layout","text":"<pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/               --&gt; &lt;Directory&gt; - Your App in HERE!\n|        `-- router.py          --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre>"},{"location":"applications/routers/#python-code","title":"Python Code","text":"router.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Router-Example\n\"\"\"\nfrom fastberry import Router\nrouter = Router(\ntags=[\"Examples\"],\n)\n# Create &lt;Routers&gt; here.\n@router.get(\"/hello_world\")\nasync def hello_world():\n\"\"\"Return: A `Hello World` Message.\"\"\"\nreturn \"Hello World\"\n</code></pre>"},{"location":"applications/types/","title":"Types","text":"<p>Your <code>GraphQL-Types</code> need to be in a file named <code>types.py</code> inside your Application.</p> <pre><code>graph LR;\n    A{DataBase} --&gt; B;\n    A --&gt; C;\n    B[SQL] --&gt; D;\n    C[Mongo] --&gt; D{GraphQL Type};</code></pre> <p>Tip</p> <p>Go to DBController and learn more how to create and use the <code>Models</code> and <code>Fields</code>.</p>"},{"location":"applications/types/#file-layout","title":"File Layout","text":"Types (Models) Settings <pre><code>root/\n|--  apps/\n|    `--  MY_APP/\n|         `-- types.py          --&gt; &lt;File&gt; - Your code in HERE!\n`-- etc...\n</code></pre> <pre><code>root/\n|--  config/                    --&gt; &lt;Directory&gt; - Configurations.\n|    `-- settings.py            --&gt; &lt;File&gt; - API (Pythonic) | Settings.\n`-- etc...\n</code></pre> <p>Both <code>Mongo</code> and <code>SQLAlchemy</code> are optional. But I do recommend using at least one. Otherwise, there is no point in using this section and instead you should just declare your <code>Types</code> by using Strawberry</p> <p>Tools</p> <p>You'll mainly use 3 tools to create the <code>types</code>.</p> <ol> <li><code>fb.sql.model</code></li> <li><code>fb.mongo.model</code></li> <li><code>fb.field</code></li> </ol>"},{"location":"applications/types/#python-code","title":"Python Code","text":"<pre><code>graph LR;\n    A{SQL} --&gt; C;\n    B{Mongo} --&gt; C[Databases Controller];\n    C --&gt; D{Types};</code></pre> TypesDatabases (settings.py) types.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Types } for GraphQL\n\"\"\"\nfrom typing import Optional\nimport fastberry as fb\nimport datetime\n# DateTime Functions\nclass Date:\ndatetime = lambda: datetime.datetime.now()\ndate = lambda: datetime.date.today()\ntime = lambda: datetime.datetime.now().time()\n# Create your &lt;types&gt; here.\n@fb.sql.model(description=\"(Type) Read The Docs\")\nclass Product:\n# Other { Type | Model }\ncategory: Optional[\"Category\"] = None\n# Core { Python }\nname: str | None = None\naliases: list[str] | None = None\nstock: int | None = None\nis_available: bool | None = None\n# Custom Scalars { GraphQL }\ncreated_on: fb.datetime = fb.field(Date.datetime)\navailable_from: fb.date = fb.field(Date.date)\nsame_day_shipping_before: fb.time = fb.field(Date.time)\nprice: fb.decimal | None = None\nnotes: list[fb.text] = fb.field(list)\nis_object: fb.json = fb.field(dict)\n# Other { Type | Model }\nasync def group(self) -&gt; Optional[\"Group\"]:\n\"\"\"Group Type\"\"\"\nreturn Group(name=\"awesome\")\n@fb.sql.model\nclass Category:\n\"\"\"(Type) Read The Docs\"\"\"\nname: str\n@fb.mongo.model\nclass Group:\n\"\"\"(Type) Read The Docs\"\"\"\nname: str\n</code></pre> config/settings.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Settings }\n\"\"\"\nimport pathlib\n# Base Directory\nBASE_DIR = pathlib.Path(__file__).parents[1]\n# Installed Apps\nINSTALLED_APPS = []\n# Database(s)\nDATABASES = {\n\"sql\"  : {\"default\": \"sqlite:///example.db\"},\n\"mongo\": {\"default\": \"mongodb://localhost:27017/example\"},\n}\n</code></pre>"},{"location":"applications/types/#model-fields","title":"Model Fields","text":"<p>Fields translate from a particular type between <code>Python</code> , <code>SQL</code> and <code>GraphQL</code> data.</p> GraphQL Fastberry(Python) SQLAlchemy JavaScript <code>ID</code> <code>fastberry.ID</code> Integer String <code>String</code> <code>str</code> String(length=255) String <code>String</code> <code>fastberry.text</code> Text String <code>Datetime</code> <code>datetime.datetime</code> DateTime String <code>Date</code> <code>datetime.date</code> Date String <code>Time</code> <code>datetime.time</code> Time String <code>Decimal</code> <code>decimal.decimal</code> String(length=255) String <code>Integer</code> <code>int</code> Integer Number <code>Float</code> <code>float</code> Float Number <code>Boolean</code> <code>bool</code> Boolean Boolean <code>JSON</code> <code>fastberry.json</code> JSON Object"},{"location":"applications/types/#your-instance-includes-two-fields","title":"Your instance includes two fields","text":"<ol> <li><code>_id</code> : (str) Meant to be the original <code>Database</code> unique identifier.</li> <li><code>id</code> : (str) Meant to be the client's <code>GraphQL</code> unique identifier.</li> </ol>"},{"location":"databases/","title":"Migrations","text":"<p>Alembic</p> <p>The tool used to create migrations for SQL is Alembic for <code>SQLAlchemy</code>.</p> <pre><code>python ./manage.py db {My-Command}\n</code></pre>"},{"location":"databases/#available-commands","title":"Available Commands","text":"Command Description <code>auto-migrate</code> Database Make-Migrations &amp; Migrate in a single step. <code>make-migrations</code> Database Make-Migrations. <code>migrate</code> Database Migrate. <code>upgrade</code> Database Migrate (Upgrade). <code>downgrade</code> Database Migrate (Downgrade). <code>history</code> Database Migrations History. <code>reset</code> Database Delete Migrations (All-Versions)."},{"location":"getting-started/","title":"Before Starting","text":"<p>Video Tutorial</p> <p>Here is the Video Tutorial Link.</p> <p></p> <p>Warning</p> <p>For the tutorial there is an extra requirement.</p>"},{"location":"getting-started/#python-dependencies-manager","title":"Python Dependencies Manager","text":"<p>First of all take a look at the tool PDM. Because, we will use it to build our First API.</p>"},{"location":"getting-started/#pdm-for-linuxmac","title":"PDM For Linux/Mac","text":"<pre><code>curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 -\n</code></pre>"},{"location":"getting-started/#pdm-for-windows","title":"PDM For Windows","text":"<pre><code>(Invoke-WebRequest -Uri https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py -UseBasicParsing).Content | python -\n</code></pre>"},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>Warning</p> <p>Bash required. If you are in a Windows computer take a look at Git BASH.</p>"},{"location":"getting-started/#create-a-folder","title":"Create a Folder","text":"<pre><code>mkdir myproject\ncd myproject/\n</code></pre>"},{"location":"getting-started/#init-pdm","title":"Init PDM","text":"<pre><code>pdm init\n</code></pre> <p>Note</p> <p>We selected Number \"<code>1</code>\" in order to use python version (<code>3.10</code>)</p> <p>The output in your computer will look similar but not exactly the same.</p> <p>Note</p> <p>Then continue with the setup.</p>"},{"location":"getting-started/first-app/","title":"First App","text":"<pre><code>pdm app start-app demo\n</code></pre>"},{"location":"getting-started/first-app/#settings-configsettingspy-demo","title":"Settings <code>config/settings.py</code> (Demo)","text":"<p>Installed Apps</p> <p>After creating your first <code>demo</code> app. Add it in the applications list \"<code>INSTALLED_APPS</code>\"</p> config/settings.py<pre><code># -*- coding: utf-8 -*-\nimport pathlib\n# Base Directory\nBASE_DIR = pathlib.Path(__file__).parents[1]\n# Installed Apps\nINSTALLED_APPS = [\"demo\"] # (1)\n</code></pre> <ol> <li>INSTALLED_APPS - Right now we control the <code>INSTALLED_APPS</code> from here. However, depending on <code>mode</code> in the <code>spoc.toml</code> is where you place them.</li> </ol> <p>Run</p> <p>Start the Server (Again). After adding your App to <code>INSTALLED_APPS</code>.</p> <pre><code>pdm app run\n</code></pre> <p>Then go to http://127.0.0.1:8000/graphql</p> <p>GraphQL</p> <p>IF its working it should look something like the image below.</p> <p></p>"},{"location":"getting-started/first-app/#testing","title":"Testing","text":"<p>Info</p> <p>Copy the code below and paste it the browser's editor.</p> <pre><code>query MyQuery {\n  detail(item: { id: \"fake-id\", ids: [\"fake-id\"] })\n  search(pagination: { limit: 10, page: 10, sortBy: \"id\", all: false })\n}\n</code></pre> <p></p>"},{"location":"getting-started/first-app/#response","title":"Response","text":"<p>Info</p> <p>After running the query. The editor should return the <code>json</code> below</p> <pre><code>{\n\"data\": {\n\"detail\": \"Detail\",\n\"search\": \"Search\"\n}\n}\n</code></pre>"},{"location":"getting-started/first-form/","title":"First Form","text":"<p>First Type</p> <p>Below is an example of a <code>form</code> named \"<code>Book</code>\" that contains (2) two fields</p> <ul> <li><code>title</code></li> <li><code>author</code></li> </ul> <p>Just like our First Type.</p>"},{"location":"getting-started/first-form/#form","title":"Form","text":"apps/demo/forms.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Forms } for GraphQL\n\"\"\"\nimport fastberry as fb\n# Create Group \"Form\"\nform = fb.input(\"form\")\n# Create your &lt;forms&gt; here.\n@form\nclass Book:\n\"\"\"(FormBook) Read The Docs\"\"\"\ntitle = fb.value(\nstr,\ndefault=None,\nrequired=True\n)\nauthor = fb.value(\nstr,\ndefault=None,\nrequired=True\n)\n</code></pre>"},{"location":"getting-started/first-form/#usage","title":"Usage","text":"<p>Info</p> <p>Go to the folder <code>graphql</code> inside your demo app.</p> <p>And, edit the method <code>create</code> to look like the example below.</p> apps/demo/graphql/demo.py<pre><code># ETC . . .\n# Type(s) Tools\nfrom .. import forms, manager, types\n@fb.gql\nclass Demo:\nclass Meta:\n# ETC . . .\nclass Query:\n# ETC . . .\nclass Mutation:\n\"\"\"Mutation\"\"\"\nasync def create(form: forms.Book) -&gt; fb.mutation(types.Book):\n\"\"\"(Create-Book) Read the Docs\"\"\"\n# Client's Input\nprint(form.input)\n# Return a \"Book\" Type\nreturn types.Book(\nid=\"encoded_id\",\nauthor=\"F. Scott Fitzgerald\",\ntitle=\"The Great Gatsby\"\n)\n# ETC . . .\n</code></pre> <p>In the Browser</p> <p>Go to http://127.0.0.1:8000/graphql And paste the code from below.</p> <p>Then, \"Execute Query\" by pressing the \"\" play button.</p>"},{"location":"getting-started/first-form/#graphql-mutation","title":"GraphQL (Mutation)","text":"<pre><code>mutation MyMutation {\n  create(form: {\n    author: \"F. Scott Fitzgerald\",\n    title: \"The Great Gatsby\"\n  }) {\n    ... on Book {\n      id\n      title\n      author\n    }\n    ... on Error {\n      error\n      meta\n      messages {\n        field\n        text\n        type\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/first-form/#terminal-print","title":"Terminal \"Print\"","text":"<p>Info</p> <p>Go to your terminal and look at the output.</p>"},{"location":"getting-started/first-manager/","title":"First Form","text":"<p>Below is an example of a <code>manager</code> named \"<code>Book</code>\" that controls the database <code>operations</code>.</p>"},{"location":"getting-started/first-manager/#manager","title":"Manager","text":"apps/demo/manager.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Controller } for the Database(s)\n\"\"\"\nimport fastberry as fb\nfrom . import types\n# Create your &lt;managers&gt; here.\n@fb.manager\nclass Book:\n\"\"\"Product Manager\"\"\"\nmodel = types.Book\n@classmethod\nasync def create(cls, form):\n# Errors\nerrors_messages = []\n# Good Input\nif form.is_valid:\nresults = await cls.objects.create(form.data.__dict__)\nif not results.error:\nitem = results.data.__dict__\nreturn types.Book(**item)\n# Bad Input\nerrors_messages.append(\nfb.error(type=\"input\", text=\"Something Went Wrong!\")\n)\nreturn fb.errors(messages=errors_messages)\n</code></pre>"},{"location":"getting-started/first-manager/#usage","title":"Usage","text":"<p>Info</p> <p>Go to the folder <code>graphql</code> inside your demo app.</p> <p>And, edit the method <code>create</code> to look like the example below.</p> apps/demo/graphql/demo.py<pre><code># ETC . . .\n# Type(s) Tools\nfrom .. import forms, manager, types\n@fb.gql\nclass Demo:\nclass Meta:\n# ETC . . .\nclass Query:\n# ETC . . .\nclass Mutation:\n\"\"\"Mutation\"\"\"\nasync def create(form: forms.Book) -&gt; fb.mutation(types.Book):\n\"\"\"(Create-Book) Read the Docs\"\"\"\nreturn await manager.Book.create(form.input)\n# ETC . . .\n</code></pre>"},{"location":"getting-started/first-manager/#more-at-applications","title":"More at Applications","text":"<p>Warning</p> <p>End of this tutorial. To learn more about how to create <code>Types</code>, <code>Forms</code>, <code>Manager</code> and other <code>functionalities</code>.</p> <p>Please read the full documentation for the Applications section.</p>"},{"location":"getting-started/first-project/","title":"First Project","text":"<pre><code>pdm run startproject\n</code></pre>"},{"location":"getting-started/first-project/#settings-pyprojecttoml-demo","title":"Settings <code>pyproject.toml</code> (Demo)","text":"<pre><code>[project]\nname = \"\" # (1)\nversion = \"\" # (2)\n# etc ...\n</code></pre> <ol> <li>Required - The Project Must Have a NAME.</li> <li>Required - The Project Must Have a VERSION Ex: <code>(0.1.0)</code>.</li> </ol> <p>Warning</p> <p>Make sure that the project's settings look something like the example below. . . or it will not work</p> pyproject.toml<pre><code>[project]\nname = \"myproject\"\nversion = \"1.0.0\"\n# etc ...\n</code></pre>"},{"location":"getting-started/first-project/#adding-a-pdm-command","title":"Adding a PDM Command","text":"pyproject.toml<pre><code>[project]\nname = \"myproject\"\nversion = \"1.0.0\"\n# etc ...\n[tool.pdm.scripts]\napp = \"python manage.py\" # (1)\n</code></pre> <ol> <li>Command - Manage Application.</li> </ol>"},{"location":"getting-started/first-project/#finally-getting-started","title":"Finally! Getting Started","text":"<pre><code>pdm app run\n</code></pre> <p>Wait</p> <p>After the server starts, then go to http://localhost:8000/docs</p> <p>You can notice:</p> <ol> <li>Your project's name</li> <li>Your project's version</li> </ol> <p></p>"},{"location":"getting-started/first-type/","title":"First Type","text":"<p>Warning</p> <p>For the example first setup a SQLite database in the settings file.</p>"},{"location":"getting-started/first-type/#settings","title":"Settings","text":"config/settings.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Settings }\n\"\"\"\nimport pathlib\n# Base Directory\nBASE_DIR = pathlib.Path(__file__).parents[1]\n# Installed Apps\nINSTALLED_APPS = [\"demo\"]\n# Database(s)\nDATABASES = {\n\"sql\"  : {\"default\": \"sqlite:///example.db\"},\n\"mongo\": {\"default\": None},\n}\n</code></pre>"},{"location":"getting-started/first-type/#type","title":"Type","text":"<p>Info</p> <p>Creating <code>Book</code> as our first <code>Type</code></p> apps/demo/types.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Types } for GraphQL\n\"\"\"\nfrom typing import Optional\nimport fastberry as fb\n# Create your &lt;types&gt; here.\n@fb.sql.model\nclass Book:\n\"\"\"(Type) Read The Docs\"\"\"\ntitle: str\nauthor: str\n</code></pre>"},{"location":"getting-started/first-type/#database-migrations","title":"Database Migrations","text":"<pre><code>pdm app db auto-migrate\n</code></pre> <p>Warning</p> <p>Keep in mind that migrations are only for <code>SQL</code></p> <p>Run</p> <p>Then, Start the Server (Again).</p> <pre><code>pdm app run\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Warning</p> <p>Make sure you read the Before Starting documentation.</p>"},{"location":"getting-started/installation/#install-fastberry","title":"Install Fastberry","text":"<pre><code>pdm add \"fastberry[testing]\"\n</code></pre> <p>For the example above we used the \"testing\" option. It will install <code>SQL</code> and <code>Mongo</code>.</p> <p>And SQL will be installed with <code>SQLite</code> that way the only extra step you need is to download MongoDB</p> <p>However, is optional. You can use <code>SQL</code> only for testing purposes.</p> <p>Note</p> <p>2 Main Options are available for fastberry installation.</p> <p>Mongo</p> <pre><code>pdm add \"fastberry[mongo]\"\n</code></pre> <p>SQL</p> <pre><code>pdm add \"fastberry[sql]\"\n</code></pre> <p>SQL comes with 3 options</p> <p>PostgreSQL</p> <pre><code>pdm add \"fastberry[sql]\" \"databases[postgresql]\"\n</code></pre> <p>MySQL</p> <pre><code>pdm add \"fastberry[sql]\" \"databases[mysql]\"\n</code></pre> <p>SQLite</p> <pre><code>pdm add \"fastberry[sql]\" \"databases[sqlite]\"\n</code></pre>"},{"location":"middleware/events/","title":"Extension Example","text":"<p>Inject { on_startup } and { on_shutdown } Server Events.</p>"},{"location":"middleware/events/#creating-an-on-event-method","title":"Creating an <code>on-event</code> method","text":"<p>Context</p> <ul> <li><code>app</code> = FastAPI object.</li> <li><code>settings</code> = Settings module.</li> <li><code>controller</code> = Fastberry object.</li> </ul> on_event.py<pre><code>def on_startup(context):\nprint(\"Server Startup\")\nprint(context.app)\nprint(context.settings)\nprint(context.controller)\ndef on_shutdown(context):\nprint(\"Server Shutdown\")\n</code></pre>"},{"location":"middleware/events/#example-of-built-in-on-event","title":"Example of built-in <code>on-event</code>","text":"<p><code>fastberry.extras.redirect_root</code> is a built-in <code>on-event</code> method. You can redirect the root-path <code>http://localhost:8000/</code> to <code>http://localhost:8000/docs</code></p> on_event.py<pre><code>from fastapi.responses import RedirectResponse\ndef redirect_root(context):\n\"\"\"Redirect\"\"\"\n@context.app.get(\"/\", response_class=RedirectResponse)\nasync def redirect_root():\n\"\"\"Redirect To Docs\"\"\"\nreturn \"/docs\"\nreturn context\n</code></pre> <p>Note</p> <p>In the file <code>spoc.toml</code> inside your <code>config</code> folder. Add the <code>on-event</code> method.</p> config/spoc.toml<pre><code>[spoc]\n# etc ...\n[spoc.extras]\n# etc ...\non_startup = [\"fastberry.extras.redirect_root\"]\non_shutdown = []\n</code></pre>"},{"location":"middleware/extension/","title":"Extension Example","text":"<p>Inject { User } or { Anonymous-User } to GraphQL Context.</p>"},{"location":"middleware/extension/#extensions-strawberry","title":"EXTENSIONS (Strawberry)","text":"<p>You can create your own extension by using the base module.</p> <p>The BaseExtension included is just a wrapper/rename for Extension from Strawberry</p> TutorialFull-Code extension.py<pre><code># -*- coding: utf-8 -*-\n\"\"\" [Extension]\n    Inject { User } or { Anonymous-User } to GraphQL Context.\n\"\"\"\nimport secrets\nfrom pydantic import BaseModel\nfrom fastberry import BaseExtension\nclass User(BaseModel):\n\"\"\"API User\"\"\"\nid: str\nrole: str\nusername: str | None = None\nemail: str | None = None\nfull_name: str | None = None\ndisabled: bool = False\nis_staff: bool = False\nsuper_user: bool = False\nis_authenticated: bool = False\nis_anonymous: bool = False\ndef anonymous_user():\n\"\"\"Default Anonymous User\"\"\"\ntoken = f\"anonymous-{secrets.token_urlsafe(38)}\"\nuser = User(\nid=token,\nrole=\"public\",\nis_anonymous=True,\n)\nreturn user\nasync def get_request_user(request):\n\"\"\"Get User from Request the Header or Cookie\"\"\"\nprint(request)\nreturn None\nclass InjectUser(BaseExtension):\n\"\"\"Inject User Extension\"\"\"\nasync def on_executing_start(self):\nrequest = self.execution_context.context.get(\"request\")\nuser = await get_request_user(request)\nif not user:\n# Anonymous-User\nuser = anonymous_user()\nelse:\n# User-Authenticated\nuser_dict = user.__dict__\nuser_dict[\"is_authenticated\"] = True\nuser = User(**user_dict)\n# Set-User (Context)\nself.execution_context.context[\"user\"] = user\n</code></pre>"},{"location":"middleware/extension/#import-your-basics","title":"Import your Basics","text":"<pre><code># -*- coding: utf-8 -*-\n\"\"\" [Extension]\n    Inject { User } or { Anonymous-User } to GraphQL Context.\n\"\"\"\nimport secrets\nfrom pydantic import BaseModel\nfrom fastberry import BaseExtension\n</code></pre>"},{"location":"middleware/extension/#create-the-user-class-with-pydantic-or-dataclasses","title":"Create the User class with pydantic or dataclasses","text":"<pre><code>class User(BaseModel):\n\"\"\"API User\"\"\"\nid: str\nrole: str\nusername: str | None = None\nemail: str | None = None\nfull_name: str | None = None\ndisabled: bool = False\nis_staff: bool = False\nsuper_user: bool = False\nis_authenticated: bool = False\nis_anonymous: bool = False\n</code></pre>"},{"location":"middleware/extension/#anonymous-user-or-authenticated-user","title":"Anonymous-User or Authenticated-User?","text":"<pre><code>def anonymous_user():\n\"\"\"Default Anonymous User\"\"\"\ntoken = f\"anonymous-{secrets.token_urlsafe(38)}\"\nuser = User(\nid=token,\nrole=\"public\",\nis_anonymous=True,\n)\nreturn user\nasync def get_request_user(request):\n\"\"\"Get User from Request the Header or Cookie\"\"\"\nprint(request)\nreturn None\n</code></pre>"},{"location":"middleware/extension/#create-your-strawberry-fastberry-extension","title":"Create your Strawberry / Fastberry Extension","text":"<p>For more information about custom extensions go to strawberry: custom-extensions</p> <pre><code>class InjectUser(BaseExtension):\n\"\"\"Inject User Extension\"\"\"\nasync def on_executing_start(self):\nrequest = self.execution_context.context.get(\"request\")\nuser = await get_request_user(request)\nif not user:\n# Anonymous-User\nuser = anonymous_user()\nelse:\n# User-Authenticated\nuser_dict = user.__dict__\nuser_dict[\"is_authenticated\"] = True\nuser = User(**user_dict)\n# Set-User (Context)\nself.execution_context.context[\"user\"] = user\n</code></pre>"},{"location":"middleware/middleware/","title":"Middleware Example","text":"<p>Get { Authorization } from the { Cookies } and inject it to the { Headers }.</p>"},{"location":"middleware/middleware/#middleware-starlette","title":"MIDDLEWARE (Starlette)","text":"<p>You can create your own middleware by using the base module.</p> <p>The BaseMiddleware included is just a wrapper/rename for BaseHTTPMiddleware from Starlette</p> TutorialFull-Code middleware.py<pre><code># -*- coding: utf-8 -*-\n\"\"\" [Middleware]\n    Get { Authorization } from the { Cookies } and inject it to the { Headers }.\n\"\"\"\nfrom fastberry import BaseMiddleware\nclass AuthenticatedCookieMiddleware(BaseMiddleware):\n\"\"\"Get Authorization From Cookie\"\"\"\nasync def dispatch(self, request, call_next):\n\"\"\"Process Request and Inject Header\"\"\"\nif (\n\"Authorization\" not in request.headers\nand \"Authorization\" in request.cookies\n):\naccess_token = request.cookies.get(\"Authorization\")\nrequest.headers.__dict__[\"_list\"].append(\n(\n\"authorization\".encode(),\nf\"Bearer {access_token}\".encode(),\n)\n)\nresponse = await call_next(request)\nreturn response\n</code></pre>"},{"location":"middleware/middleware/#import-your-basics","title":"Import your Basics","text":"<pre><code># -*- coding: utf-8 -*-\n\"\"\" [Middleware]\n    Get { Authorization } from the { Cookies } and inject it to the { Headers }.\n\"\"\"\nfrom fastberry import BaseMiddleware\n</code></pre>"},{"location":"middleware/middleware/#create-your-fastapi-starlette-fastberry-middleware","title":"Create your FastAPI / Starlette / Fastberry Middleware","text":"<p>For more information about custom middleware go to starlette: BaseHTTPMiddleware</p> <pre><code>class AuthenticatedCookieMiddleware(BaseMiddleware):\n\"\"\"Get Authorization From Cookie\"\"\"\nasync def dispatch(self, request, call_next):\n\"\"\"Process Request and Inject Header\"\"\"\nif (\n\"Authorization\" not in request.headers\nand \"Authorization\" in request.cookies\n):\naccess_token = request.cookies.get(\"Authorization\")\nrequest.headers.__dict__[\"_list\"].append(\n(\n\"authorization\".encode(),\nf\"Bearer {access_token}\".encode(),\n)\n)\nresponse = await call_next(request)\nreturn response\n</code></pre>"},{"location":"middleware/permissions/","title":"Permission Example","text":"<p>Check GraphQL Context for a { User } or { Anonymous-User }.</p>"},{"location":"middleware/permissions/#permissions-strawberry","title":"PERMISSIONS (Strawberry)","text":"<p>You can create your own permissions by using the base module.</p> <p>The BasePermission included is just a wrapper for BasePermission from Strawberry</p> TutorialFull-Code permissions.py<pre><code># -*- coding: utf-8 -*-\n\"\"\" [Permission]\n    Check GraphQL Context for a { User } or { Anonymous-User }.\n\"\"\"\nimport typing\nfrom strawberry.types import Info\nfrom fastberry import BasePermission\nROLES = {\n\"public\": [\"SomeMethod\"],\n\"admin\": [\"demoDetail\", \"demoSearch\", \"demoCreate\", \"demoUpdate\", \"demoDelete\"],\n}\ndef get_perms(role: str = None):\n\"\"\"Get Role And Check For Permissions\"\"\"\nfound = ROLES.get(role, [])\nif found and role:\nperms = found\nelse:\nperms = []\nreturn perms\nclass IsAuthorized(BasePermission):\n\"\"\"Check If User Is Authorized\"\"\"\nmessage = \"User is not authorized\"  # Unauthorized\nasync def has_permission(self, source: typing.Any, info: Info, **kwargs) -&gt; bool:\n\"\"\"Check GraphQL's Info Context\"\"\"\n# if not user.is_authenticated and user.is_anonymous:\noperation = info.field_name  # info.python_name\nuser = info.context.get(\"user\")\nif user:\npermissions = get_perms(user.role)\nreturn operation in permissions\nreturn False\n</code></pre>"},{"location":"middleware/permissions/#import-your-basics","title":"Import your Basics","text":"<pre><code># -*- coding: utf-8 -*-\n\"\"\" [Permission]\n    Check GraphQL Context for a { User } or { Anonymous-User }.\n\"\"\"\nimport typing\nfrom strawberry.types import Info\nfrom fastberry import BasePermission\n</code></pre>"},{"location":"middleware/permissions/#get-user-permissions","title":"Get User Permissions","text":"<pre><code>ROLES = {\n\"public\": [\"SomeMethod\"],\n\"admin\": [\"demoDetail\", \"demoSearch\", \"demoCreate\", \"demoUpdate\", \"demoDelete\"],\n}\ndef get_perms(role: str = None):\n\"\"\"Get Role And Check For Permissions\"\"\"\nfound = ROLES.get(role, [])\nif found and role:\nperms = found\nelse:\nperms = []\nreturn perms\n</code></pre>"},{"location":"middleware/permissions/#create-your-strawberry-fastberry-permission","title":"Create your Strawberry / Fastberry Permission","text":"<p>For more information about custom permissions go to strawberry: custom-permissions</p> <pre><code>class IsAuthorized(BasePermission):\n\"\"\"Check If User Is Authorized\"\"\"\nmessage = \"User is not authorized\"  # Unauthorized\nasync def has_permission(self, source: typing.Any, info: Info, **kwargs) -&gt; bool:\n\"\"\"Check GraphQL's Info Context\"\"\"\n# if not user.is_authenticated and user.is_anonymous:\noperation = info.field_name  # info.python_name\nuser = info.context.get(\"user\")\nif user:\npermissions = get_perms(user.role)\nreturn operation in permissions\nreturn False\n</code></pre>"},{"location":"middleware/plugin/","title":"Plugin Example","text":"<p>Coming full circle with all Four-Elements (Middleware, Extension, Permissions and Router)</p>"},{"location":"middleware/plugin/#plugin-workflow","title":"Plugin Workflow","text":"<pre><code>graph LR;\n    Z[Client] --&gt; A;\n    A[Request] --&gt; B;\n    B{Middleware} --&gt; C;\n    C{Extension} --&gt; D;\n    D{Permissions} --&gt; E;\n    E[Resolver] --&gt; F;\n    F[Response] --&gt; Z;</code></pre>"},{"location":"middleware/plugin/#command","title":"Command","text":"<pre><code>./manage.py start-app my_awesome_plugin --plugin\n</code></pre>"},{"location":"middleware/plugin/#files-layout","title":"Files Layout","text":"<pre><code>root/\n|\n|--  apps/\n|    `--  MY_PLUGIN/             --&gt; &lt;Directory&gt; - Your App in HERE!\n|        |\n|        |-- extension.py\n|        |-- middleware.py\n|        |-- permission.py\n|        |-- router.py\n|        `-- users.py\n|\n`-- etc...\n</code></pre>"},{"location":"middleware/plugin/#other-requirements","title":"Other Requirements","text":"<pre><code>python -m pip install \"python-jose[cryptography]\" \"passlib[bcrypt]\"\n</code></pre> <ul> <li>Jose</li> <li>Passlib</li> </ul>"},{"location":"middleware/plugin/#demo-credentials","title":"Demo Credentials","text":"<ul> <li>Username: <code>johndoe</code> or <code>janedoe</code></li> <li>Password: <code>secret</code></li> </ul>"},{"location":"middleware/plugin/#python-code","title":"Python Code","text":"users.pyrouter.pyextension.pymiddleware.pypermission.py users.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    [Users]\n\"\"\"\nfrom datetime import datetime, timedelta\nfrom typing import Optional\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nSECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b\"\n# Security\nALGORITHM = \"HS256\"\nFAKE_USERS_DB = {\n\"johndoe\": {\n\"id\": 1,\n\"username\": \"johndoe\",\n\"full_name\": \"John Doe\",\n\"email\": \"johndoe@example.com\",\n\"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n\"disabled\": False,\n\"is_staff\": True,\n\"super_user\": False,\n},\n\"janedoe\": {\n\"id\": 2,\n\"username\": \"janedoe\",\n\"full_name\": \"Jane Doe\",\n\"email\": \"janedoe@example.com\",\n\"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n\"disabled\": False,\n\"is_staff\": False,\n\"super_user\": False,\n},\n}\nFAKE_ROLES_DB = {1: \"admin\", 2: \"public\"}\nclass UserLogin(BaseModel):\nusername: str\npassword: str\nclass Token(BaseModel):\naccess_token: str\ntoken_type: str\nclass User(BaseModel):\nid: str\nrole: str\nusername: str | None = None\nemail: str | None = None\nfull_name: str | None = None\ndisabled: bool = False\nis_staff: bool = False\nsuper_user: bool = False\nis_authenticated: bool = False\nis_anonymous: bool = False\nclass UserInDB(User):\nhashed_password: str\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\ndef verify_password(plain_password, hashed_password):\nreturn pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password):\nreturn pwd_context.hash(password)\nasync def get_user(username: str):\ndb = FAKE_USERS_DB\nrole_db = FAKE_ROLES_DB\nif username in db:\nuser_dict = db[username]\nrole = role_db.get(user_dict.get(\"id\"))\nuser_dict[\"role\"] = role\nreturn UserInDB(**user_dict)\nasync def get_request_user(request):\naccess_token = request.headers.get(\"Authorization\")\nuser = None\nif access_token:\ntoken = access_token.replace(\"Bearer \", \"\")\nauth_dict = await decode_token(token)\nif auth_dict:\nusername = auth_dict.get(\"username\")\nuser = await get_user(username=username)\nreturn user\nasync def authenticate_user(username: str, password: str):\nuser = await get_user(username)\nif not user:\nreturn False\nif not verify_password(password, user.hashed_password):\nreturn False\nreturn user\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\nto_encode = data.copy()\nif expires_delta:\nexpire = datetime.utcnow() + expires_delta\nelse:\nexpire = datetime.utcnow() + timedelta(minutes=15)\nto_encode.update({\"exp\": expire})\nencoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\nreturn encoded_jwt\nasync def decode_token(token: str):\ntry:\nreturn_value = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\nexcept JWTError:\nreturn_value = {}\nreturn return_value\nasync def get_current_user(\ntoken: Optional[str] = Depends(oauth2_scheme),\n):\ncredentials_exception = HTTPException(\nstatus_code=status.HTTP_401_UNAUTHORIZED,\ndetail=\"Could not validate credentials\",\nheaders={\"WWW-Authenticate\": \"Bearer\"},\n)\npayload = await decode_token(token)\nusername: str = payload.get(\"username\")\nif username is None:\nraise credentials_exception\nuser = await get_user(username=username)\nif user is None:\nraise credentials_exception\nreturn user\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\nif current_user.disabled:\nraise HTTPException(status_code=400, detail=\"Inactive user\")\nreturn current_user\n</code></pre> router.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    [Router]\n\"\"\"\nfrom datetime import timedelta\nfrom fastapi import Depends, HTTPException, Response, status\nfrom fastapi.responses import JSONResponse\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom fastberry import Router\nfrom .users import (\nToken,\nUser,\nauthenticate_user,\ncreate_access_token,\nget_current_active_user,\n)\nACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24\nrouter = Router(\ntags=[\"Users\"],\n)\ndef to_camel_case(text):\ninit, *temp = text.split(\"_\")\nreturn \"\".join([init.lower(), *map(str.title, temp)])\n@router.post(\"/token\", response_model=Token)\nasync def login_for_access_token(\nresponse: Response,\nform_data: OAuth2PasswordRequestForm = Depends(),\n):\nuser = await authenticate_user(form_data.username, form_data.password)\nif not user:\nraise HTTPException(\nstatus_code=status.HTTP_401_UNAUTHORIZED,\ndetail=\"Incorrect username or password\",\nheaders={\"WWW-Authenticate\": \"Bearer\"},\n)\naccess_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\naccess_token = create_access_token(\ndata={\"sub\": str(user.id), \"username\": user.username},\nexpires_delta=access_token_expires,\n)\nresponse.set_cookie(\nkey=\"Authorization\", value=access_token, httponly=True, secure=True\n)\nreturn {\"access_token\": access_token, \"token_type\": \"bearer\"}\n@router.get(\"/logout\")\nasync def logout_user(current_user: User = Depends(get_current_active_user)):\nresponse = JSONResponse({\"logout\": True})\nresponse.delete_cookie(key=\"Authorization\")\nreturn response\n@router.get(\"/user-me\")  # response_model=User\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\nuser_me = {to_camel_case(k): v for k, v in current_user.__dict__.items()}\ndel user_me[\"hashedPassword\"]\nreturn user_me\n</code></pre> extension.py<pre><code># -*- coding: utf-8 -*-\n\"\"\" [Extension]\n    Inject { User } or { Anonymous-User } to GraphQL Context.\n\"\"\"\nimport secrets\nfrom fastberry import BaseExtension\nfrom .users import User, get_request_user\ndef anonymous_user():\n\"\"\"Default Anonymous User\"\"\"\ntoken = f\"anonymous-{secrets.token_urlsafe(38)}\"\nuser = User(\nid=token,\nrole=\"public\",\nis_anonymous=True,\n)\nreturn user\nclass InjectUser(BaseExtension):\n\"\"\"Inject User Extension\"\"\"\nasync def on_executing_start(self):\nrequest = self.execution_context.context.get(\"request\")\nuser = await get_request_user(request)\nif not user:\n# Anonymous-User\nuser = anonymous_user()\nelse:\n# User-Authenticated\nuser_dict = user.__dict__\nuser_dict[\"is_authenticated\"] = True\nuser = User(**user_dict)\n# Set-User (Context)\nself.execution_context.context[\"user\"] = user\n</code></pre> middleware.py<pre><code># -*- coding: utf-8 -*-\n\"\"\" [Middleware]\n    Get { Authorization } from the { Cookies } and inject it to the { Headers }.\n\"\"\"\nfrom fastberry import BaseMiddleware\nclass AuthenticatedCookieMiddleware(BaseMiddleware):\n\"\"\"Get Authorization From Cookie\"\"\"\nasync def dispatch(self, request, call_next):\n\"\"\"Process Request and Inject Header\"\"\"\nif (\n\"Authorization\" not in request.headers\nand \"Authorization\" in request.cookies\n):\naccess_token = request.cookies.get(\"Authorization\")\nrequest.headers.__dict__[\"_list\"].append(\n(\n\"authorization\".encode(),\nf\"Bearer {access_token}\".encode(),\n)\n)\nresponse = await call_next(request)\nreturn response\n</code></pre> permission.py<pre><code># -*- coding: utf-8 -*-\n\"\"\" [Permission]\n    Check GraphQL Context for a { User } or { Anonymous-User }.\n\"\"\"\nimport typing\nfrom strawberry.types import Info\nfrom fastberry import BasePermission\nROLES = {\n\"public\": [\"SomeMethod\"],\n\"admin\": [\"demoDetail\", \"demoSearch\", \"demoCreate\", \"demoUpdate\", \"demoDelete\"],\n}\ndef get_perms(role: str = None):\n\"\"\"Get Role And Check For Permissions\"\"\"\nfound = ROLES.get(role, [])\nif found and role:\nperms = found\nelse:\nperms = []\nreturn perms\nclass IsAuthorized(BasePermission):\n\"\"\"Check If User Is Authorized\"\"\"\nmessage = \"User is not authorized\"  # Unauthorized\nasync def has_permission(self, source: typing.Any, info: Info, **kwargs) -&gt; bool:\n\"\"\"Check GraphQL's Info Context\"\"\"\n# if not user.is_authenticated and user.is_anonymous:\noperation = info.field_name  # info.python_name\nuser = info.context.get(\"user\")\nif user:\npermissions = get_perms(user.role)\nreturn operation in permissions\nreturn False\n</code></pre>"},{"location":"middleware/workflow/","title":"Middleware + Extension + Permissions","text":"<p>Building a plugin with all 3 elements (Middleware, Extension and Permissions).</p> <p>You can also combine them with a <code>Router</code>. For example: to create a <code>User / Authentication</code> API.</p>"},{"location":"middleware/workflow/#plugin-workflow","title":"Plugin Workflow","text":"<pre><code>graph LR;\n    Z[Client] --&gt; A;\n    A[Request] --&gt; B;\n    B{Middleware} --&gt; C;\n    C{Extension} --&gt; D;\n    D{Permissions} --&gt; E;\n    E[Resolver] --&gt; F;\n    F[Response] --&gt; Z;</code></pre>"},{"location":"middleware/workflow/#middleware-fastapi-starlette","title":"Middleware (FastAPI / Starlette)","text":"<p>User is <code>Authenticated</code> or <code>Anonymous</code>?</p> <p>Inject the <code>Authorization Token</code> to the <code>Headers</code> if the is in the <code>Cookies</code>.</p> <pre><code>graph LR;\n    A{My Middleware} --&gt; |Request Headers| B[Authorization Token?];\n    B --&gt; |Yes| D[Authenticated-User];\n    B --&gt; |No| C[Authorization Cookie?];\n    C --&gt; |No| E[Anonymous-User];\n    C --&gt; |Yes| F[Inject-Header];\n    F --&gt; |Authorization Token| B;\n    D --&gt; Z[Resolver / Next-Method];\n    E --&gt; Z;</code></pre>"},{"location":"middleware/workflow/#extension-strawberry","title":"Extension (Strawberry)","text":"<p>Convert <code>Authorization-Token</code> or <code>None</code> to a <code>User-Object</code> and inject it to <code>GraphQL</code>'s context.</p> <pre><code>graph LR;\n    A{My Extension} --&gt; |Request:Headers| B;\n    B[Authorization Token?] --&gt; |Yes| C[Authenticated-User];\n    B --&gt; |No| D[Anonymous-User];\n    C --&gt; E[User-Object];\n    D --&gt; E;\n    E --&gt; |Inject User| F[info.context];\n    F --&gt; Z[Resolver / Next-Method];;</code></pre>"},{"location":"middleware/workflow/#permissions-strawberry","title":"Permissions (Strawberry)","text":"<p>Get the request's <code>User</code> and check the <code>Role</code> for a list of allowed methods.</p> <p>Then, check if <code>info.field_name</code> (which is the name of the current: <code>Query</code> or <code>Mutation</code>) is in the list of allowed methods.</p> <p>Alternatively, you can use <code>info.python_name</code> if you prefer to use the python's original name of the function.</p> <pre><code>graph LR;\n    A{My Permission} --&gt; |info.context| B[User];\n    B --&gt; |is| C[Allowed?]\n    C --&gt; |Yes| F[Resolver / Next-Method]\n    C --&gt; |No| G[Response: Error]</code></pre>"}]}