{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Fastberry Fastberry, is built with FastAPI and Strawberry that is why is named Fastberry . The Command-Line-Interface (CLI) is built with Click . Description A tool for building GraphQL \u2014 API(s) with Python . You can create . . . GraphQL \u2014 Query (s) and Mutation (s). API \u2014 HTTP Operation (s). Commands \u2014 To create automated processes and more . . . Built With Module Is Used To... Click Manage the server, development process and custom Commands . FastAPI Core Web Framework Strawberry GraphQL Library Uvicorn Run the server in Development mode. Gunicorn Run the server in Staging and Production mode. SPOC FrameWork tool for building this Framework . DBController Database Controller for SQL and Mongo . Install Fastberry (Demo) python -m pip install \"fastberry[testing]\" Install Fastberry Mongo python -m pip install \"fastberry[mongo]\" Install Fastberry SQL python -m pip install \"fastberry[sql]\" \"databases[sqlite]\" SQL Options Database Extra Installation(s) PostgreSQL \"databases[postgresql]\" MySQL \"databases[mysql]\" Sqlite \"databases[sqlite]\" Install Gunicorn python -m pip install gunicorn Project Flowchart You can create . . . Command(s) | API(s) | GraphQL Components . (API) Application Programming Interface (CLI) Command-Line Interface 1. Load all Settings . 1. Load all Settings . 2. Load Environment Variables . 2. Load Environment Variables . 3. Load all Apps (Modules) . 3. Load all Apps (Modules) . 4. Start the API Server . 4. Start the CLI Manager . flowchart LR; A{Click} --> B[Uvicorn]; A --> C[Gunicorn]; A <--> D[Load Settings & Modules]; B --> E{FastAPI}; C --> E; E <--> F[Load Settings & Modules]; D <--> |Strawberry-GraphQL| G{Your Commands}; F <--> |Strawberry-GraphQL| H{Your API}; H <--> Z{Your Code}; G <--> Z; Core Layout root/ --> <Directory> - Project's Root. | |-- apps/ --> <Directory> - Project's Apps. | |-- config/ --> <Directory> - Configurations. | | | |-- .env/ --> <Directory> - Environments. | | |-- development.toml --> <File> - Development | Settings. | | |-- production.toml --> <File> - Production | Settings. | | `-- staging.toml --> <File> - Staging | Settings. | | | |-- docs.md --> <File> - API's Documentation in HERE. | |-- settings.py --> <File> - API (Pythonic) | Settings. | `-- spoc.toml --> <File> - API (TOML) | Settings. | |-- pyproject.toml --> <File> - Project (TOML) | Settings. | `-- etc... Inspired By Django There are several things from Django that inspire this tool. Some of the commands and the installation of modules (aka: INSTALLED_APPS ) inside a Django project. Fastberry comes with a few key commands : Command Is Used To... startproject Create a new Fastberry project. ./manage.py run Run FastApi Server . ./manage.py schema Build GraphQL (Schema & More) . ./manage.py start-app Create a Fastberry App inside your \" apps \" directory. ./manage.py --help For more information . startproject Careful with the command startproject . Only use it once and make sure you are in a new folder . It will write files and folders.","title":"Introduction"},{"location":"#welcome-to-fastberry","text":"Fastberry, is built with FastAPI and Strawberry that is why is named Fastberry . The Command-Line-Interface (CLI) is built with Click .","title":"Welcome to Fastberry"},{"location":"#description","text":"A tool for building GraphQL \u2014 API(s) with Python . You can create . . . GraphQL \u2014 Query (s) and Mutation (s). API \u2014 HTTP Operation (s). Commands \u2014 To create automated processes and more . . .","title":"Description"},{"location":"#built-with","text":"Module Is Used To... Click Manage the server, development process and custom Commands . FastAPI Core Web Framework Strawberry GraphQL Library Uvicorn Run the server in Development mode. Gunicorn Run the server in Staging and Production mode. SPOC FrameWork tool for building this Framework . DBController Database Controller for SQL and Mongo .","title":"Built With"},{"location":"#install-fastberry-demo","text":"python -m pip install \"fastberry[testing]\"","title":"Install Fastberry (Demo)"},{"location":"#install-fastberry-mongo","text":"python -m pip install \"fastberry[mongo]\"","title":"Install Fastberry Mongo"},{"location":"#install-fastberry-sql","text":"python -m pip install \"fastberry[sql]\" \"databases[sqlite]\" SQL Options Database Extra Installation(s) PostgreSQL \"databases[postgresql]\" MySQL \"databases[mysql]\" Sqlite \"databases[sqlite]\"","title":"Install Fastberry SQL"},{"location":"#install-gunicorn","text":"python -m pip install gunicorn","title":"Install Gunicorn"},{"location":"#project-flowchart","text":"You can create . . . Command(s) | API(s) | GraphQL Components . (API) Application Programming Interface (CLI) Command-Line Interface 1. Load all Settings . 1. Load all Settings . 2. Load Environment Variables . 2. Load Environment Variables . 3. Load all Apps (Modules) . 3. Load all Apps (Modules) . 4. Start the API Server . 4. Start the CLI Manager . flowchart LR; A{Click} --> B[Uvicorn]; A --> C[Gunicorn]; A <--> D[Load Settings & Modules]; B --> E{FastAPI}; C --> E; E <--> F[Load Settings & Modules]; D <--> |Strawberry-GraphQL| G{Your Commands}; F <--> |Strawberry-GraphQL| H{Your API}; H <--> Z{Your Code}; G <--> Z;","title":"Project Flowchart"},{"location":"#core-layout","text":"root/ --> <Directory> - Project's Root. | |-- apps/ --> <Directory> - Project's Apps. | |-- config/ --> <Directory> - Configurations. | | | |-- .env/ --> <Directory> - Environments. | | |-- development.toml --> <File> - Development | Settings. | | |-- production.toml --> <File> - Production | Settings. | | `-- staging.toml --> <File> - Staging | Settings. | | | |-- docs.md --> <File> - API's Documentation in HERE. | |-- settings.py --> <File> - API (Pythonic) | Settings. | `-- spoc.toml --> <File> - API (TOML) | Settings. | |-- pyproject.toml --> <File> - Project (TOML) | Settings. | `-- etc...","title":"Core Layout"},{"location":"#inspired-by-django","text":"There are several things from Django that inspire this tool. Some of the commands and the installation of modules (aka: INSTALLED_APPS ) inside a Django project.","title":"Inspired By Django"},{"location":"#fastberry-comes-with-a-few-key-commands","text":"Command Is Used To... startproject Create a new Fastberry project. ./manage.py run Run FastApi Server . ./manage.py schema Build GraphQL (Schema & More) . ./manage.py start-app Create a Fastberry App inside your \" apps \" directory. ./manage.py --help For more information . startproject Careful with the command startproject . Only use it once and make sure you are in a new folder . It will write files and folders.","title":"Fastberry comes with a few key commands:"},{"location":"diagram/","text":"Project Sequence Diagram Below is a graphic description for the project's workflow . App Controller from fastberry import App Controller = App () Controller # Commands (1) Controller . cli # Router (2) Controller . router # GraphQL (3) Controller . graphql # Types (4) Controller . types Commands \u2014 Built with Click Commands. Routes \u2014 Built with FastAPI . GraphQL \u2014 Query (s) and Mutation (s) Built with Strawberry . Types \u2014 GraphQL Strawberry Types. Project's Structure root/ | |-- apps/ | | | `-- MY_APPLICATION/ --> <Directory> - Your App in HERE! | | | |-- __init__.py | |-- commands.py | |-- graphql.py | |-- router.py | `-- types.py | `-- etc... App Plugins Files All Your files get loaded to these namespaces ./commands.py gets loaded to cli ./router.py gets loaded to router ./graphql.py gets loaded to graphql ./types.py gets loaded to types sequenceDiagram autonumber Your Code -->Fastberry: Create Your Code; Note over Your Code,Fastberry: Project; loop Fastberry Your Code -->Fastberry: Create Components; Note over Your Code,Fastberry: CLI (Commands); Note over Your Code,Fastberry: API (Routes); Note over Your Code,Fastberry: GraphQL (Operations); Note over Your Code,Fastberry: GraphQL (Types); Fastberry -->Your Code: Your Components Are Loaded; Note over Your Code,Fastberry: commands; Note over Your Code,Fastberry: routers; Note over Your Code,Fastberry: graphql; Note over Your Code,Fastberry: types; end Fastberry -->Server: Use Your Code; Note over Fastberry,Server: Controller; loop Controller Fastberry -->Server: (CLI) Command-Line Interface; Note over Fastberry,Server: Commands; Fastberry -->Client: (API) Application Programming Interface; Note over Fastberry,Client: HTTP \u2014 Operation(s); Note over Fastberry,Client: GraphQL \u2014 Query(s) and Mutation(s); end","title":"Diagram"},{"location":"diagram/#project-sequence-diagram","text":"Below is a graphic description for the project's workflow .","title":"Project Sequence Diagram"},{"location":"diagram/#app-controller","text":"from fastberry import App Controller = App () Controller # Commands (1) Controller . cli # Router (2) Controller . router # GraphQL (3) Controller . graphql # Types (4) Controller . types Commands \u2014 Built with Click Commands. Routes \u2014 Built with FastAPI . GraphQL \u2014 Query (s) and Mutation (s) Built with Strawberry . Types \u2014 GraphQL Strawberry Types. Project's Structure root/ | |-- apps/ | | | `-- MY_APPLICATION/ --> <Directory> - Your App in HERE! | | | |-- __init__.py | |-- commands.py | |-- graphql.py | |-- router.py | `-- types.py | `-- etc...","title":"App Controller"},{"location":"diagram/#app-plugins","text":"Files All Your files get loaded to these namespaces ./commands.py gets loaded to cli ./router.py gets loaded to router ./graphql.py gets loaded to graphql ./types.py gets loaded to types sequenceDiagram autonumber Your Code -->Fastberry: Create Your Code; Note over Your Code,Fastberry: Project; loop Fastberry Your Code -->Fastberry: Create Components; Note over Your Code,Fastberry: CLI (Commands); Note over Your Code,Fastberry: API (Routes); Note over Your Code,Fastberry: GraphQL (Operations); Note over Your Code,Fastberry: GraphQL (Types); Fastberry -->Your Code: Your Components Are Loaded; Note over Your Code,Fastberry: commands; Note over Your Code,Fastberry: routers; Note over Your Code,Fastberry: graphql; Note over Your Code,Fastberry: types; end Fastberry -->Server: Use Your Code; Note over Fastberry,Server: Controller; loop Controller Fastberry -->Server: (CLI) Command-Line Interface; Note over Fastberry,Server: Commands; Fastberry -->Client: (API) Application Programming Interface; Note over Fastberry,Client: HTTP \u2014 Operation(s); Note over Fastberry,Client: GraphQL \u2014 Query(s) and Mutation(s); end","title":"App Plugins"},{"location":"foct/","text":"F.O.C.T F.O.C.T Inspired by M.V.C F.O.C.T is Inspired by M.V.C (Model, View, Controller). Form = Client's input for the Operation . Operation = GraphQL Operation ( Mutation or Query ) Controller = Handles updates to the database table aka: Type Type = Database Model aka: Table Acronym \" F.O.C.T \" (F) orm \u2014 Client Inputs (O) peration (GraphQL) \u2014 API Methods (C) ontroller (Manager) \u2014 Database Methods (T) ype (Aka: Model) \u2014 Table Schema flowchart BT; A[Types] --- D; B[Forms] --- D; C[Manager] --- D[Operations]; Name API Reference Form fastberry.input AND fastberry.value Operation fastberry.gql Controller fastberry.manager Type fastberry.sql.model OR fastberry.mongo.model F.O.C.T Demo Type Controller (Manager) Form Operations (GraphQL) types.py \"\"\" { Types } GraphQL OR { Tables } Database \"\"\" import fastberry as fb # Mongo Database # fb.mongo.model @fb . sql . model class Category : \"\"\"(Type) Read The Docs\"\"\" name : str manager.py \"\"\" { Controller } for the Database(s) \"\"\" import fastberry as fb from . import types class Base : @classmethod async def all ( cls ): return await cls . objects . all () @classmethod async def reset ( cls ): return await cls . objects . delete ( None , all = True ) @fb . manager class Category ( Base ): model = types . Category @classmethod async def create ( cls , form ): data = form . data results = await cls . objects . create ( data . __dict__ ) return results forms.py \"\"\" { Forms } for Operations \"\"\" import fastberry as fb # Import Once's per project in any App. # IF you want the built-in (Forms) to be register in the GraphQL API. from fastberry import item , pagination form = fb . input ( \"form\" ) @form class Category : \"\"\"(Form) Read The Docs\"\"\" name = fb . value ( str , required = True , ) @form ( name = \"SearchEngine\" ) class Search : \"\"\"(Form) Read The Docs\"\"\" name = fb . value ( str , # Single Typing default = None , ) count = fb . value ( int , default = None , ) cash = fb . value ( float , default = None , ) amount = fb . value ( fb . decimal , default = None , ) start_date = fb . value ( fb . date , default = None , ) end_datetime = fb . value ( fb . datetime , default = None , ) timestamp = fb . value ( fb . time , default = None , required = False , ) graphql.py \"\"\" { Operations } for GraphQL \"\"\" import fastberry as fb from . import forms , manager , types @fb . gql class Demo : \"\"\"GraphQL Manager\"\"\" class Meta : \"\"\"Class Meta-Data\"\"\" app = False model = \"Category\" class Query : \"\"\"GraphQL Query\"\"\" async def detail ( item : fb . item # (1) ) -> fb . query ( types . Category ): # (2) \"\"\"(Detail-Operation) Read The Docs\"\"\" return types . Category ( _id = 1 , id = \"$encoded_id$\" , name = \"Cool\" ) async def search ( search : forms . Search , pagination : fb . pagination # (3) ) -> fb . edges ( types . Category ): # (4) \"\"\"(Search-Operation) Read The Docs\"\"\" # Do Something if input { IS VALID } ... if search . input . is_valid : print ( \" \\n # Client's Inputs #\" ) print ( search . input . data ) print ( pagination . input . data ) # Get Data from the { Database } ... results = await manager . Category . all () print ( \" \\n # Database Response #\" ) print ( results ) # Return { Page } return fb . page ( # (5) edges = [ types . Category ( _id = 1 , id = 1 , name = \"Computer\" ), types . Category ( _id = 2 , id = 2 , name = \"Radio\" ), ], length = 2 , pages = 1 , ) class Mutation : \"\"\"GraphQL Mutation\"\"\" async def create ( form : forms . Category ) -> fb . mutation ( types . Category ): # (6) \"\"\"(Create-Operation) Read The Docs\"\"\" # Client's Input if form . input . is_valid : print ( form . input . data ) # Errors errors_messages = [] # IF error . . . errors_messages . append ( fb . error ( type = \"input\" , text = \"Error for Demo!\" ) # (7) ) return fb . errors ( messages = errors_messages ) # (8) Use item to annotate that you expect a ID or a list of [IDs] Use query to annotate that you will return a specific type Use pagination to annotate that you expect a page configuration (Used to limit the rows per request) Use edges to annotate that you will return a page-list of only a specific type Use page to return a list of edges Use mutation to return either a type or a list of errors Use error to create a single error-message Use errors to return a list of error (s). Tools fastberry.item to annotate that you expect a ID or a list of [IDs] fastberry.query to annotate that you will return a specific type fastberry.pagination to annotate that you expect a page configuration (Used to limit the rows per request) fastberry.edges to annotate that you will return a page-list of only a specific type fastberry.page to return a list of edges fastberry.mutation to return either a type or a list of errors fastberry.error to create a single error-message fastberry.errors to return a list of error (s). Inputs Tools Method Connects With ... Description pagination [edges] Use pagination for annotations of client's input item types Use item for annotations of client's input Types Tools Method Connects With ... Description mutation types Use mutation for annotations query types Use query for annotations edges page Use edges for annotations Return Tools Method Connects With ... Description errors [error] Use errors to return a list of error (s) page [edges] Use page to return a list of edges","title":"FOCT"},{"location":"foct/#foct","text":"F.O.C.T Inspired by M.V.C F.O.C.T is Inspired by M.V.C (Model, View, Controller). Form = Client's input for the Operation . Operation = GraphQL Operation ( Mutation or Query ) Controller = Handles updates to the database table aka: Type Type = Database Model aka: Table","title":"F.O.C.T"},{"location":"foct/#acronym-foct","text":"(F) orm \u2014 Client Inputs (O) peration (GraphQL) \u2014 API Methods (C) ontroller (Manager) \u2014 Database Methods (T) ype (Aka: Model) \u2014 Table Schema flowchart BT; A[Types] --- D; B[Forms] --- D; C[Manager] --- D[Operations]; Name API Reference Form fastberry.input AND fastberry.value Operation fastberry.gql Controller fastberry.manager Type fastberry.sql.model OR fastberry.mongo.model","title":"Acronym \" F.O.C.T \""},{"location":"foct/#foct-demo","text":"Type Controller (Manager) Form Operations (GraphQL) types.py \"\"\" { Types } GraphQL OR { Tables } Database \"\"\" import fastberry as fb # Mongo Database # fb.mongo.model @fb . sql . model class Category : \"\"\"(Type) Read The Docs\"\"\" name : str manager.py \"\"\" { Controller } for the Database(s) \"\"\" import fastberry as fb from . import types class Base : @classmethod async def all ( cls ): return await cls . objects . all () @classmethod async def reset ( cls ): return await cls . objects . delete ( None , all = True ) @fb . manager class Category ( Base ): model = types . Category @classmethod async def create ( cls , form ): data = form . data results = await cls . objects . create ( data . __dict__ ) return results forms.py \"\"\" { Forms } for Operations \"\"\" import fastberry as fb # Import Once's per project in any App. # IF you want the built-in (Forms) to be register in the GraphQL API. from fastberry import item , pagination form = fb . input ( \"form\" ) @form class Category : \"\"\"(Form) Read The Docs\"\"\" name = fb . value ( str , required = True , ) @form ( name = \"SearchEngine\" ) class Search : \"\"\"(Form) Read The Docs\"\"\" name = fb . value ( str , # Single Typing default = None , ) count = fb . value ( int , default = None , ) cash = fb . value ( float , default = None , ) amount = fb . value ( fb . decimal , default = None , ) start_date = fb . value ( fb . date , default = None , ) end_datetime = fb . value ( fb . datetime , default = None , ) timestamp = fb . value ( fb . time , default = None , required = False , ) graphql.py \"\"\" { Operations } for GraphQL \"\"\" import fastberry as fb from . import forms , manager , types @fb . gql class Demo : \"\"\"GraphQL Manager\"\"\" class Meta : \"\"\"Class Meta-Data\"\"\" app = False model = \"Category\" class Query : \"\"\"GraphQL Query\"\"\" async def detail ( item : fb . item # (1) ) -> fb . query ( types . Category ): # (2) \"\"\"(Detail-Operation) Read The Docs\"\"\" return types . Category ( _id = 1 , id = \"$encoded_id$\" , name = \"Cool\" ) async def search ( search : forms . Search , pagination : fb . pagination # (3) ) -> fb . edges ( types . Category ): # (4) \"\"\"(Search-Operation) Read The Docs\"\"\" # Do Something if input { IS VALID } ... if search . input . is_valid : print ( \" \\n # Client's Inputs #\" ) print ( search . input . data ) print ( pagination . input . data ) # Get Data from the { Database } ... results = await manager . Category . all () print ( \" \\n # Database Response #\" ) print ( results ) # Return { Page } return fb . page ( # (5) edges = [ types . Category ( _id = 1 , id = 1 , name = \"Computer\" ), types . Category ( _id = 2 , id = 2 , name = \"Radio\" ), ], length = 2 , pages = 1 , ) class Mutation : \"\"\"GraphQL Mutation\"\"\" async def create ( form : forms . Category ) -> fb . mutation ( types . Category ): # (6) \"\"\"(Create-Operation) Read The Docs\"\"\" # Client's Input if form . input . is_valid : print ( form . input . data ) # Errors errors_messages = [] # IF error . . . errors_messages . append ( fb . error ( type = \"input\" , text = \"Error for Demo!\" ) # (7) ) return fb . errors ( messages = errors_messages ) # (8) Use item to annotate that you expect a ID or a list of [IDs] Use query to annotate that you will return a specific type Use pagination to annotate that you expect a page configuration (Used to limit the rows per request) Use edges to annotate that you will return a page-list of only a specific type Use page to return a list of edges Use mutation to return either a type or a list of errors Use error to create a single error-message Use errors to return a list of error (s). Tools fastberry.item to annotate that you expect a ID or a list of [IDs] fastberry.query to annotate that you will return a specific type fastberry.pagination to annotate that you expect a page configuration (Used to limit the rows per request) fastberry.edges to annotate that you will return a page-list of only a specific type fastberry.page to return a list of edges fastberry.mutation to return either a type or a list of errors fastberry.error to create a single error-message fastberry.errors to return a list of error (s).","title":"F.O.C.T Demo"},{"location":"foct/#inputs-tools","text":"Method Connects With ... Description pagination [edges] Use pagination for annotations of client's input item types Use item for annotations of client's input","title":"Inputs Tools"},{"location":"foct/#types-tools","text":"Method Connects With ... Description mutation types Use mutation for annotations query types Use query for annotations edges page Use edges for annotations","title":"Types Tools"},{"location":"foct/#return-tools","text":"Method Connects With ... Description errors [error] Use errors to return a list of error (s) page [edges] Use page to return a list of edges","title":"Return Tools"},{"location":"settings/","text":"Core Settings are in TOML format. Because TOML is easy to read for humans and computers. TOML Since TOML is Python 's new best friend. Feels like a good fit for the core settings of the project. Settings Workflow Settings Load pyproject.toml Load spoc.toml Load settings.py Load Environment Variables flowchart TB; A[pyproject.toml] --> E{Project Settings}; B[spoc.toml] --> E{Project Settings}; C[settings.py] --> E; D[environment.toml] --> E; Settings Locations root/ --> <Directory> - Project's Root. | |-- config/ --> <Directory> - Configurations. | | | |-- .env/ --> <Directory> - Environments. | | |-- development.toml --> <File> - Development Settings. | | |-- production.toml --> <File> - Production Settings. | | `-- staging.toml --> <File> - Staging Settings. | | | |-- settings.py --> <File> - Pythonic Settings. | `-- spoc.toml --> <File> - Spoc Settings. | |-- pyproject.toml --> <File> - PyProject Settings. `-- etc... PyProject Spoc Environment Variables Custom (settings.py) pyproject (TOML) pyproject.toml [project] name = \"fastberry\" # (1) version = \"0.1.4\" # (2) description = \"GraphQL Made Easy.\" # (3) # etc ... (4) Name \u2014 The name of the project. Version \u2014 The version of the project. Description \u2014 Short description of your project. Other \u2014 Extra configurations of your project. PyProject fastberry.config[\"pyproject\"] is where your PyProject Variables are loaded. example.py import fastberry as fb print ( fb . config [ \"pyproject\" ]) SPOC (TOML) config/spoc.toml [ spoc ] # (1) mode = \"custom\" # development, production, staging, custom custom_mode = \"development\" # (16) docs = \"config/docs.md\" # (17) generates = \"graphql\" # (18) [ spoc . api ] # (2) graphql_path = \"/graphql\" # (10) max_depth = 4 # (11) items_per_page = 50 # (12) allowed_hosts = [ \"http://localhost\" , \"http://localhost:8080\" ] [ spoc . apps ] # (3) production = [ \"app_one\" , \"app_two\" ] # (13) development = [] # (14) staging = [] # (15) [ spoc . extras ] # (4) middleware = [ \"fastberry.extras.middleware \" ] # (5) extensions = [ \"fastberry.extras.extensions\" ] # (6) permissions = [ \"fastberry.extras.permissions\" ] # (7) on_startup = [ \"fastberry.extras.on_startup\" ] # (8) on_shutdown = [ \"fastberry.extras.on_shutdown\" ] # (9) API \u2014 Core Settings . API \u2014 Querying & More Configs . Installed \u2014 Apps . Installed \u2014 Middleware, Extension & Permissions . Middleware \u2014 For adding behavior that is applied across your entire (FastAPI) application. Extensions \u2014 For adding behavior that is applied across your entire (GraphQL) application. Permissions \u2014 For adding Permissions to your (GraphQL) application. On-Startup \u2014 For adding behavior that is applied before the server start. On-Shutdown \u2014 For adding behavior that is applied after the server shutdown. Endpoint \u2014 GraphQL's URL endpoint. Depth \u2014 Search depth in the GraphQL's tree . Pagination \u2014 Number of rows per page . Production \u2014 Production Ready Apps ( Production ) . Development \u2014 Development Only Apps ( Production + Development ) . Staging \u2014 Testing Only Apps ( Production + Staging ) . Custom \u2014 Custom mode will load Apps from the pythonic settings.py plus the current mode . Docs \u2014 Path for the documentation. Generates \u2014 Folder where the schema and frontend related files and folders will be generated . SPOC fastberry.config[\"spoc\"] is where your SPOC Variables are loaded. example.py import fastberry as fb print ( fb . config [ \"spoc\" ]) Environment Variables (TOML) config/.env/development.toml [env] DEBUG = \"yes\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\" Variables fastberry.config[\"env\"] is where your Environment Variables are loaded. example.py import fastberry as fb print ( fb . config [ \"env\" ]) Custom (Python) settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [ \"good_app\" , \"app_two\" ] # Database(s) DATABASES = { \"sql\" : { \"default\" : \"sqlite:///example.db\" }, \"mongo\" : { \"default\" : \"mongodb://localhost:27017/example\" }, } PyProject fastberry.config[\"pyproject\"] is where your PyProject Variables are loaded. example.py import fastberry as fb print ( fb . config [ \"pyproject\" ]) Breakdown of the Middlewares, Extensions and Permissions MIDDLEWARE (Starlette) List of active Middlewares . You can create your own middleware by using the base module . The BaseMiddleware included is just a wrapper/rename for BaseHTTPMiddleware from Starlette EXTENSIONS (Strawberry) List of active Extensions . You can create your own extension by using the base module . The BaseExtension included is just a wrapper/rename for Extension from Strawberry PERMISSIONS (Strawberry) List of active Permissions . You can create your own permissions by using the base module . The BasePermission included is just a wrapper for BasePermission from Strawberry","title":"Settings"},{"location":"settings/#settings-workflow","text":"Settings Load pyproject.toml Load spoc.toml Load settings.py Load Environment Variables flowchart TB; A[pyproject.toml] --> E{Project Settings}; B[spoc.toml] --> E{Project Settings}; C[settings.py] --> E; D[environment.toml] --> E;","title":"Settings Workflow"},{"location":"settings/#settings-locations","text":"root/ --> <Directory> - Project's Root. | |-- config/ --> <Directory> - Configurations. | | | |-- .env/ --> <Directory> - Environments. | | |-- development.toml --> <File> - Development Settings. | | |-- production.toml --> <File> - Production Settings. | | `-- staging.toml --> <File> - Staging Settings. | | | |-- settings.py --> <File> - Pythonic Settings. | `-- spoc.toml --> <File> - Spoc Settings. | |-- pyproject.toml --> <File> - PyProject Settings. `-- etc... PyProject Spoc Environment Variables Custom (settings.py)","title":"Settings Locations"},{"location":"settings/#pyproject-toml","text":"pyproject.toml [project] name = \"fastberry\" # (1) version = \"0.1.4\" # (2) description = \"GraphQL Made Easy.\" # (3) # etc ... (4) Name \u2014 The name of the project. Version \u2014 The version of the project. Description \u2014 Short description of your project. Other \u2014 Extra configurations of your project. PyProject fastberry.config[\"pyproject\"] is where your PyProject Variables are loaded. example.py import fastberry as fb print ( fb . config [ \"pyproject\" ])","title":"pyproject (TOML)"},{"location":"settings/#spoc-toml","text":"config/spoc.toml [ spoc ] # (1) mode = \"custom\" # development, production, staging, custom custom_mode = \"development\" # (16) docs = \"config/docs.md\" # (17) generates = \"graphql\" # (18) [ spoc . api ] # (2) graphql_path = \"/graphql\" # (10) max_depth = 4 # (11) items_per_page = 50 # (12) allowed_hosts = [ \"http://localhost\" , \"http://localhost:8080\" ] [ spoc . apps ] # (3) production = [ \"app_one\" , \"app_two\" ] # (13) development = [] # (14) staging = [] # (15) [ spoc . extras ] # (4) middleware = [ \"fastberry.extras.middleware \" ] # (5) extensions = [ \"fastberry.extras.extensions\" ] # (6) permissions = [ \"fastberry.extras.permissions\" ] # (7) on_startup = [ \"fastberry.extras.on_startup\" ] # (8) on_shutdown = [ \"fastberry.extras.on_shutdown\" ] # (9) API \u2014 Core Settings . API \u2014 Querying & More Configs . Installed \u2014 Apps . Installed \u2014 Middleware, Extension & Permissions . Middleware \u2014 For adding behavior that is applied across your entire (FastAPI) application. Extensions \u2014 For adding behavior that is applied across your entire (GraphQL) application. Permissions \u2014 For adding Permissions to your (GraphQL) application. On-Startup \u2014 For adding behavior that is applied before the server start. On-Shutdown \u2014 For adding behavior that is applied after the server shutdown. Endpoint \u2014 GraphQL's URL endpoint. Depth \u2014 Search depth in the GraphQL's tree . Pagination \u2014 Number of rows per page . Production \u2014 Production Ready Apps ( Production ) . Development \u2014 Development Only Apps ( Production + Development ) . Staging \u2014 Testing Only Apps ( Production + Staging ) . Custom \u2014 Custom mode will load Apps from the pythonic settings.py plus the current mode . Docs \u2014 Path for the documentation. Generates \u2014 Folder where the schema and frontend related files and folders will be generated . SPOC fastberry.config[\"spoc\"] is where your SPOC Variables are loaded. example.py import fastberry as fb print ( fb . config [ \"spoc\" ])","title":"SPOC (TOML)"},{"location":"settings/#environment-variables-toml","text":"config/.env/development.toml [env] DEBUG = \"yes\" SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c\" Variables fastberry.config[\"env\"] is where your Environment Variables are loaded. example.py import fastberry as fb print ( fb . config [ \"env\" ])","title":"Environment Variables (TOML)"},{"location":"settings/#custom-python","text":"settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [ \"good_app\" , \"app_two\" ] # Database(s) DATABASES = { \"sql\" : { \"default\" : \"sqlite:///example.db\" }, \"mongo\" : { \"default\" : \"mongodb://localhost:27017/example\" }, } PyProject fastberry.config[\"pyproject\"] is where your PyProject Variables are loaded. example.py import fastberry as fb print ( fb . config [ \"pyproject\" ])","title":"Custom (Python)"},{"location":"settings/#breakdown-of-the-middlewares-extensions-and-permissions","text":"","title":"Breakdown of the Middlewares, Extensions and Permissions"},{"location":"settings/#middleware-starlette","text":"List of active Middlewares . You can create your own middleware by using the base module . The BaseMiddleware included is just a wrapper/rename for BaseHTTPMiddleware from Starlette","title":"MIDDLEWARE (Starlette)"},{"location":"settings/#extensions-strawberry","text":"List of active Extensions . You can create your own extension by using the base module . The BaseExtension included is just a wrapper/rename for Extension from Strawberry","title":"EXTENSIONS (Strawberry)"},{"location":"settings/#permissions-strawberry","text":"List of active Permissions . You can create your own permissions by using the base module . The BasePermission included is just a wrapper for BasePermission from Strawberry","title":"PERMISSIONS (Strawberry)"},{"location":"applications/","text":"Introduction The definition for \"Application\" in Fastberry is basically a python module . The idea is to have \"self-contained\" blocks of code that are reusable . Also, easy to share and use inside other Fastberry projects. Command ./manage.py start-app my_awesome_app Files Layout (Complex) Files (Complex) The example below represents a Complex Application that uses all of the internal tools commands path to create Internal commands extension path to create GraphQL 's extensions permissions path to create GraphQL 's permissions middleware path to create API 's middleware on_event (optional) path to create middleware for server Events 's Name & Usage of on_event are optional . You can name the file anyway you want. root/ | |-- apps/ | `-- MY_APPLICATION/ --> <Directory> - Your App in HERE! | |-- __init__.py | |-- commands.py | |-- extension.py | |-- graphql.py | |-- middleware.py | |-- forms.py | |-- permissions.py | |-- on_event.py --> <Optional> | |-- router.py | `-- types.py | `-- etc... Files Layout (Simple) Files (Simple) The example below represents a Simple Application that uses only the necessary tools to build an API types use to create the equivalent of a database Model forms use to create complex input forms manager use to create complex database Queries & Mutations graphql use to create operations of the GraphQL router ( optional ) used to create endpoints for FastAPI root/ | |-- apps/ | `-- MY_APPLICATION/ --> <Directory> - Your App in HERE! | |-- __init__.py | |-- forms.py | |-- graphql.py | |-- manager.py | |-- router.py --> <Optional> | `-- types.py | `-- etc... Application Diagram flowchart LR; A[Types] --- D; B[Forms] --- D; C[Manager] --- D; D[Operations] --- F; E((Router)) --- F; F{API} --- H{Client}; Demo The example above shows the flow of the API but it also shows all the tools you can use to build your projects.","title":"Introduction"},{"location":"applications/#introduction","text":"The definition for \"Application\" in Fastberry is basically a python module . The idea is to have \"self-contained\" blocks of code that are reusable . Also, easy to share and use inside other Fastberry projects.","title":"Introduction"},{"location":"applications/#command","text":"./manage.py start-app my_awesome_app","title":"Command"},{"location":"applications/#files-layout-complex","text":"Files (Complex) The example below represents a Complex Application that uses all of the internal tools commands path to create Internal commands extension path to create GraphQL 's extensions permissions path to create GraphQL 's permissions middleware path to create API 's middleware on_event (optional) path to create middleware for server Events 's Name & Usage of on_event are optional . You can name the file anyway you want. root/ | |-- apps/ | `-- MY_APPLICATION/ --> <Directory> - Your App in HERE! | |-- __init__.py | |-- commands.py | |-- extension.py | |-- graphql.py | |-- middleware.py | |-- forms.py | |-- permissions.py | |-- on_event.py --> <Optional> | |-- router.py | `-- types.py | `-- etc...","title":"Files Layout (Complex)"},{"location":"applications/#files-layout-simple","text":"Files (Simple) The example below represents a Simple Application that uses only the necessary tools to build an API types use to create the equivalent of a database Model forms use to create complex input forms manager use to create complex database Queries & Mutations graphql use to create operations of the GraphQL router ( optional ) used to create endpoints for FastAPI root/ | |-- apps/ | `-- MY_APPLICATION/ --> <Directory> - Your App in HERE! | |-- __init__.py | |-- forms.py | |-- graphql.py | |-- manager.py | |-- router.py --> <Optional> | `-- types.py | `-- etc...","title":"Files Layout (Simple)"},{"location":"applications/#application-diagram","text":"flowchart LR; A[Types] --- D; B[Forms] --- D; C[Manager] --- D; D[Operations] --- F; E((Router)) --- F; F{API} --- H{Client}; Demo The example above shows the flow of the API but it also shows all the tools you can use to build your projects.","title":"Application Diagram"},{"location":"applications/application/","text":"Application (C.R.U.D Default Setup) Info The CRUD application is created when you run the start-app command. CRUD All methods inside Query and Mutation classes are by default static -methods @staticmethod Each function is turn into a @staticmethod when it gets loaded after the server starts running. That means you don't use self inside your functions. Command ./manage.py start-app my_app PyLint ( disable ) Warning E0213 : Method should have \" self \" as first argument ( no-self-argument ) Disable the no-self-argument . Five Operations to get you started. The demo-app comes with 5 core operations . ( Create, Update, Delete, Search & Detail ) GraphQL CRUD Mutation Query Create Search Update Detail Delete Method CRUD GraphQL Description Create Create Mutation Create resource Update Update Mutation Update resource Delete Delete Mutation Delete resource Search Read Query Fetch Multiple resources Detail Read Query Fetch Single resource Classes Query : GraphQL \" Query \" functions. Mutation : GraphQL \" Mutation \" functions. Meta : Configurations for the current GraphQL functions. Meta Variables ( optional ) app ( bool ) : Prepend the application 's name to the operation's name. model ( str ): Prepend model 's name to the operation's name. root/ | |-- apps/ | `-- MY_APP/ | `-- graphql/ --> <Directory> - Your GraphQL in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | |-- demo.py --> <File> - Demo File. | `-- etc... | `-- etc... Demo Files demo.py __init__.py # -*- coding: utf-8 -*- \"\"\" API - GraphQL \"\"\" # Fastberry import fastberry as fb # Create your API (GraphQL) here. @fb . gql class Demo : \"\"\"Demo Api\"\"\" class Meta : \"\"\"GQL-Class Metadata\"\"\" app = False model = None class Query : \"\"\"Query\"\"\" async def search ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Search\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\" async def update ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Update\" async def delete ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Delete\" # -*- coding: utf-8 -*- \"\"\" GraphQL Operations \"\"\" from .demo import Demo","title":"Application"},{"location":"applications/application/#application-crud-default-setup","text":"Info The CRUD application is created when you run the start-app command.","title":"Application (C.R.U.D Default Setup)"},{"location":"applications/application/#crud","text":"All methods inside Query and Mutation classes are by default static -methods @staticmethod Each function is turn into a @staticmethod when it gets loaded after the server starts running. That means you don't use self inside your functions.","title":"CRUD"},{"location":"applications/application/#command","text":"./manage.py start-app my_app","title":"Command"},{"location":"applications/application/#pylint-disable","text":"Warning E0213 : Method should have \" self \" as first argument ( no-self-argument ) Disable the no-self-argument .","title":"PyLint (disable)"},{"location":"applications/application/#five-operations-to-get-you-started","text":"The demo-app comes with 5 core operations . ( Create, Update, Delete, Search & Detail ) GraphQL CRUD Mutation Query Create Search Update Detail Delete Method CRUD GraphQL Description Create Create Mutation Create resource Update Update Mutation Update resource Delete Delete Mutation Delete resource Search Read Query Fetch Multiple resources Detail Read Query Fetch Single resource","title":"Five Operations to get you started."},{"location":"applications/application/#classes","text":"Query : GraphQL \" Query \" functions. Mutation : GraphQL \" Mutation \" functions. Meta : Configurations for the current GraphQL functions.","title":"Classes"},{"location":"applications/application/#meta-variables-optional","text":"app ( bool ) : Prepend the application 's name to the operation's name. model ( str ): Prepend model 's name to the operation's name. root/ | |-- apps/ | `-- MY_APP/ | `-- graphql/ --> <Directory> - Your GraphQL in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | |-- demo.py --> <File> - Demo File. | `-- etc... | `-- etc...","title":"Meta Variables (optional)"},{"location":"applications/application/#demo-files","text":"demo.py __init__.py # -*- coding: utf-8 -*- \"\"\" API - GraphQL \"\"\" # Fastberry import fastberry as fb # Create your API (GraphQL) here. @fb . gql class Demo : \"\"\"Demo Api\"\"\" class Meta : \"\"\"GQL-Class Metadata\"\"\" app = False model = None class Query : \"\"\"Query\"\"\" async def search ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Search\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\" async def update ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Update\" async def delete ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Delete\" # -*- coding: utf-8 -*- \"\"\" GraphQL Operations \"\"\" from .demo import Demo","title":"Demo Files"},{"location":"applications/commands/","text":"Your code needs to be in a file named commands.py or folder named commands inside your Application . Your click.group needs to be named cli . File or Folder Layout File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- commands.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- commands/ --> <Directory> - Your Commands in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc... Python Code File Folder commands.py # -*- coding: utf-8 -*- \"\"\" Custom - Command-Line-Group \"\"\" import fastberry as fb import click # Init Group @fb . cli def cli (): \"\"\"Click (CLI) Group\"\"\" # Create <Commands> here. @cli . command () def hello_world (): \"\"\"Demo CLI Function\"\"\" click . echo ( \"Hello World\" ) __init__.py # -*- coding: utf-8 -*- \"\"\" Custom - Command-Line-Group \"\"\" import fastberry as fb # Import <Commands> Here from .hello_world import hello_world # Init Group @fb . cli def cli (): \"\"\"Click (CLI) Group\"\"\" # Register <Commands> Here cli . add_command ( hello_world ) hello_world.py # -*- coding: utf-8 -*- \"\"\" Command - Hello World \"\"\" import click # Create <Commands> here. @click . command () def hello_world (): \"\"\"Demo CLI Function\"\"\" print ( \"Hello World\" )","title":"Commands"},{"location":"applications/commands/#file-or-folder-layout","text":"File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- commands.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- commands/ --> <Directory> - Your Commands in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc...","title":"File or Folder Layout"},{"location":"applications/commands/#python-code","text":"File Folder commands.py # -*- coding: utf-8 -*- \"\"\" Custom - Command-Line-Group \"\"\" import fastberry as fb import click # Init Group @fb . cli def cli (): \"\"\"Click (CLI) Group\"\"\" # Create <Commands> here. @cli . command () def hello_world (): \"\"\"Demo CLI Function\"\"\" click . echo ( \"Hello World\" ) __init__.py # -*- coding: utf-8 -*- \"\"\" Custom - Command-Line-Group \"\"\" import fastberry as fb # Import <Commands> Here from .hello_world import hello_world # Init Group @fb . cli def cli (): \"\"\"Click (CLI) Group\"\"\" # Register <Commands> Here cli . add_command ( hello_world ) hello_world.py # -*- coding: utf-8 -*- \"\"\" Command - Hello World \"\"\" import click # Create <Commands> here. @click . command () def hello_world (): \"\"\"Demo CLI Function\"\"\" print ( \"Hello World\" )","title":"Python Code"},{"location":"applications/forms/","text":"Your code needs to be in a file named forms.py or folder named forms inside your Application . File or Folder Layout File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- forms.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- forms/ --> <Directory> - Your Forms in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc... Tools Fastberry input-values can only have a Single Typing . You'll mainly use 3 tools to create the forms . fastberry.input(str) fastberry.value fastberry.filters(regex = list(tuple), rules = list(function)) Value References Name API Reference default The default value required Default: False . Does the field requires an input value? regex Regex ( validators ) key = Regex-Pattern and value = Error-Message rules Custom ( validators ) returns None or Error-Message(s) filters Transform-Data with Regex & Rules Python Code Tip Values can only have a Single Type . However , you can wrap it around a list for example: list[int] File Folder forms.py # -*- coding: utf-8 -*- \"\"\" Forms - Complex Inputs \"\"\" import fastberry as fb # Create Group \"Form\" form = fb . input ( \"form\" ) # Create your <forms> here. @form # (name=\"CustonInputName\") class Search : \"\"\"(Form) Read The Docs\"\"\" name = fb . value ( # Single Typing str , default = None , required = True , ) count = fb . value ( int , default = 999 , ) cash = fb . value ( float , default = 44.4 , ) amount = fb . value ( fb . decimal , default = \"55.5\" , ) start_date = fb . value ( fb . date , default = \"2022-11-10\" , ) end_datetime = fb . value ( fb . datetime , default = \"2022-11-10T16:35:56.216344\" , ) timestamp = fb . value ( fb . time , default = \"16:35:04.872130\" , ) @form class User : \"\"\"(Complex-Form) Read The Docs\"\"\" email = fb . value ( str , default = \"demo@helloworld.com\" , regex = { r \"[\\w\\.-]+@[\\w\\.-]+\" : \"invalid email address\" }, rules = [ ( lambda v : v . startswith ( \"demo\" ) or \"invalid input\" ) ], filters = fb . filters ( regex = [ ( \"^hello\" , \"hola\" ), ( \"com\" , \"api\" ), ], # (\"^hello\"...) [Won't Work]: We used { regex } to check if it startswith \"hello\". rules = [ ( lambda v : v . upper ()) ], ), ) __init__.py # -*- coding: utf-8 -*- \"\"\" Forms - Init \"\"\" # Import your <cruds> here. from .demo import Search , User demo.py # -*- coding: utf-8 -*- \"\"\" API - Complex Inputs \"\"\" # Fastberry import fastberry as fb # Create Group \"Form\" form = fb . input ( \"form\" ) # Create your API (GraphQL) here. @form # (name=\"CustonInputName\") class Search : \"\"\"(Form) Read The Docs\"\"\" name = fb . value ( str , # Single Typing default = None , ) count = fb . value ( int , default = None , ) cash = fb . value ( float , default = None , ) amount = fb . value ( fb . decimal , default = None , ) start_date = fb . value ( fb . date , default = None , ) end_datetime = fb . value ( fb . datetime , default = None , ) timestamp = fb . value ( fb . time , default = None , required = True , ) @form class User : \"\"\"(Complex-Form) Read The Docs\"\"\" email = fb . value ( str , default = \"demo@helloworld.com\" , regex = { r \"[\\w\\.-]+@[\\w\\.-]+\" : \"invalid email address\" }, rules = [( lambda v : v . startswith ( \"demo\" ) or \"invalid input\" )], filters = fb . filters ( regex = [ ( \"^hello\" , \"hola\" ), ( \"com\" , \"api\" ), ], # (\"^hello\"...) [Doesn't Work]: We used { regex } to check if it startswith \"hello\". rules = [( lambda v : v . upper ())], ), )","title":"Forms"},{"location":"applications/forms/#file-or-folder-layout","text":"File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- forms.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- forms/ --> <Directory> - Your Forms in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc... Tools Fastberry input-values can only have a Single Typing . You'll mainly use 3 tools to create the forms . fastberry.input(str) fastberry.value fastberry.filters(regex = list(tuple), rules = list(function))","title":"File or Folder Layout"},{"location":"applications/forms/#value-references","text":"Name API Reference default The default value required Default: False . Does the field requires an input value? regex Regex ( validators ) key = Regex-Pattern and value = Error-Message rules Custom ( validators ) returns None or Error-Message(s) filters Transform-Data with Regex & Rules","title":"Value References"},{"location":"applications/forms/#python-code","text":"Tip Values can only have a Single Type . However , you can wrap it around a list for example: list[int] File Folder forms.py # -*- coding: utf-8 -*- \"\"\" Forms - Complex Inputs \"\"\" import fastberry as fb # Create Group \"Form\" form = fb . input ( \"form\" ) # Create your <forms> here. @form # (name=\"CustonInputName\") class Search : \"\"\"(Form) Read The Docs\"\"\" name = fb . value ( # Single Typing str , default = None , required = True , ) count = fb . value ( int , default = 999 , ) cash = fb . value ( float , default = 44.4 , ) amount = fb . value ( fb . decimal , default = \"55.5\" , ) start_date = fb . value ( fb . date , default = \"2022-11-10\" , ) end_datetime = fb . value ( fb . datetime , default = \"2022-11-10T16:35:56.216344\" , ) timestamp = fb . value ( fb . time , default = \"16:35:04.872130\" , ) @form class User : \"\"\"(Complex-Form) Read The Docs\"\"\" email = fb . value ( str , default = \"demo@helloworld.com\" , regex = { r \"[\\w\\.-]+@[\\w\\.-]+\" : \"invalid email address\" }, rules = [ ( lambda v : v . startswith ( \"demo\" ) or \"invalid input\" ) ], filters = fb . filters ( regex = [ ( \"^hello\" , \"hola\" ), ( \"com\" , \"api\" ), ], # (\"^hello\"...) [Won't Work]: We used { regex } to check if it startswith \"hello\". rules = [ ( lambda v : v . upper ()) ], ), ) __init__.py # -*- coding: utf-8 -*- \"\"\" Forms - Init \"\"\" # Import your <cruds> here. from .demo import Search , User demo.py # -*- coding: utf-8 -*- \"\"\" API - Complex Inputs \"\"\" # Fastberry import fastberry as fb # Create Group \"Form\" form = fb . input ( \"form\" ) # Create your API (GraphQL) here. @form # (name=\"CustonInputName\") class Search : \"\"\"(Form) Read The Docs\"\"\" name = fb . value ( str , # Single Typing default = None , ) count = fb . value ( int , default = None , ) cash = fb . value ( float , default = None , ) amount = fb . value ( fb . decimal , default = None , ) start_date = fb . value ( fb . date , default = None , ) end_datetime = fb . value ( fb . datetime , default = None , ) timestamp = fb . value ( fb . time , default = None , required = True , ) @form class User : \"\"\"(Complex-Form) Read The Docs\"\"\" email = fb . value ( str , default = \"demo@helloworld.com\" , regex = { r \"[\\w\\.-]+@[\\w\\.-]+\" : \"invalid email address\" }, rules = [( lambda v : v . startswith ( \"demo\" ) or \"invalid input\" )], filters = fb . filters ( regex = [ ( \"^hello\" , \"hola\" ), ( \"com\" , \"api\" ), ], # (\"^hello\"...) [Doesn't Work]: We used { regex } to check if it startswith \"hello\". rules = [( lambda v : v . upper ())], ), )","title":"Python Code"},{"location":"applications/graphql/","text":"Your code needs to be in a file named graphql.py or folder named graphql inside your Application . File or Folder Layout File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- graphql.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- graphql/ --> <Directory> - Your GraphQL in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc... Python Code File Folder graphql.py # -*- coding: utf-8 -*- \"\"\" API - GraphQL \"\"\" # Fastberry import fastberry as fb # Create your API (GraphQL) here. @fb . gql class Demo : \"\"\"Demo Api\"\"\" class Meta : \"\"\"GQL-Class Metadata\"\"\" app = False model = None class Query : \"\"\"Query\"\"\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\" __init__.py # -*- coding: utf-8 -*- \"\"\" GraphQL - Init \"\"\" # Import your <cruds> here. from .demo import Demo demo.py # -*- coding: utf-8 -*- \"\"\" API - GraphQL \"\"\" # Fastberry import fastberry as fb # Create your API (GraphQL) here. @fb . gql class Demo : \"\"\"Demo Api\"\"\" class Meta : \"\"\"GQL-Class Metadata\"\"\" app = False model = None class Query : \"\"\"Query\"\"\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\"","title":"GraphQL"},{"location":"applications/graphql/#file-or-folder-layout","text":"File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- graphql.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- graphql/ --> <Directory> - Your GraphQL in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc...","title":"File or Folder Layout"},{"location":"applications/graphql/#python-code","text":"File Folder graphql.py # -*- coding: utf-8 -*- \"\"\" API - GraphQL \"\"\" # Fastberry import fastberry as fb # Create your API (GraphQL) here. @fb . gql class Demo : \"\"\"Demo Api\"\"\" class Meta : \"\"\"GQL-Class Metadata\"\"\" app = False model = None class Query : \"\"\"Query\"\"\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\" __init__.py # -*- coding: utf-8 -*- \"\"\" GraphQL - Init \"\"\" # Import your <cruds> here. from .demo import Demo demo.py # -*- coding: utf-8 -*- \"\"\" API - GraphQL \"\"\" # Fastberry import fastberry as fb # Create your API (GraphQL) here. @fb . gql class Demo : \"\"\"Demo Api\"\"\" class Meta : \"\"\"GQL-Class Metadata\"\"\" app = False model = None class Query : \"\"\"Query\"\"\" async def detail ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Detail\" class Mutation : \"\"\"Mutation\"\"\" async def create ( info ) -> str : \"\"\"Read the Docs\"\"\" print ( info ) return \"Create\"","title":"Python Code"},{"location":"applications/manager/","text":"Your code needs to be in a file named manager.py or folder named manager inside your Application . Info The purpose of the manager is to handle updates to the database File or Folder Layout File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- manager.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- manager/ --> <Directory> - Your Manager(s) in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc... Tool fastberry.manager Python Code File Folder manager.py # -*- coding: utf-8 -*- \"\"\" { Controller } for the Database(s) \"\"\" import fastberry as fb from . import types class Base : \"\"\"Reusable Manager\"\"\" @classmethod async def all ( cls ): return await cls . objects . all () @classmethod async def reset_table ( cls ): return await cls . objects . delete ( None , all = True ) @fb . manager class Product ( Base ): \"\"\"Product Manager\"\"\" model = types . Product @classmethod async def create ( cls , form ): results = None if form . is_valid : results = await cls . objects . create ( form . data . __dict__ ) return results __init__.py # -*- coding: utf-8 -*- \"\"\" Manager - Init \"\"\" # Import your <managers> here. from .product import Product product.py # -*- coding: utf-8 -*- \"\"\" { Controller } for the Database(s) \"\"\" import fastberry as fb from . import types class Base : \"\"\"Reusable Manager\"\"\" @classmethod async def all ( cls ): return await cls . objects . all () @classmethod async def reset_table ( cls ): return await cls . objects . delete ( None , all = True ) @fb . manager class Product ( Base ): \"\"\"Product Manager\"\"\" model = types . Product @classmethod async def create ( cls , form ): results = None if form . is_valid : results = await cls . objects . create ( form . data . __dict__ ) return results","title":"Manager"},{"location":"applications/manager/#file-or-folder-layout","text":"File Folder root/ | |-- apps/ | `-- MY_APP/ | `-- manager.py --> <File> - Your code in HERE! | `-- etc... root/ | |-- apps/ | `-- MY_APP/ | `-- manager/ --> <Directory> - Your Manager(s) in HERE! | |-- __init__.py --> <File> - Your IMPORTS in HERE! | `-- etc... | `-- etc... Tool fastberry.manager","title":"File or Folder Layout"},{"location":"applications/manager/#python-code","text":"File Folder manager.py # -*- coding: utf-8 -*- \"\"\" { Controller } for the Database(s) \"\"\" import fastberry as fb from . import types class Base : \"\"\"Reusable Manager\"\"\" @classmethod async def all ( cls ): return await cls . objects . all () @classmethod async def reset_table ( cls ): return await cls . objects . delete ( None , all = True ) @fb . manager class Product ( Base ): \"\"\"Product Manager\"\"\" model = types . Product @classmethod async def create ( cls , form ): results = None if form . is_valid : results = await cls . objects . create ( form . data . __dict__ ) return results __init__.py # -*- coding: utf-8 -*- \"\"\" Manager - Init \"\"\" # Import your <managers> here. from .product import Product product.py # -*- coding: utf-8 -*- \"\"\" { Controller } for the Database(s) \"\"\" import fastberry as fb from . import types class Base : \"\"\"Reusable Manager\"\"\" @classmethod async def all ( cls ): return await cls . objects . all () @classmethod async def reset_table ( cls ): return await cls . objects . delete ( None , all = True ) @fb . manager class Product ( Base ): \"\"\"Product Manager\"\"\" model = types . Product @classmethod async def create ( cls , form ): results = None if form . is_valid : results = await cls . objects . create ( form . data . __dict__ ) return results","title":"Python Code"},{"location":"applications/routers/","text":"Your code needs to be in a file named router.py inside your Application . File Layout root/ | |-- apps/ | `-- MY_APP/ --> <Directory> - Your App in HERE! | `-- router.py --> <File> - Your code in HERE! | `-- etc... Python Code router.py # -*- coding: utf-8 -*- \"\"\" Router-Example \"\"\" from fastberry import Router router = Router ( tags = [ \"Examples\" ], ) # Create <Routers> here. @router . get ( \"/hello_world\" ) async def hello_world (): \"\"\"Return: A `Hello World` Message.\"\"\" return \"Hello World\"","title":"Router"},{"location":"applications/routers/#file-layout","text":"root/ | |-- apps/ | `-- MY_APP/ --> <Directory> - Your App in HERE! | `-- router.py --> <File> - Your code in HERE! | `-- etc...","title":"File Layout"},{"location":"applications/routers/#python-code","text":"router.py # -*- coding: utf-8 -*- \"\"\" Router-Example \"\"\" from fastberry import Router router = Router ( tags = [ \"Examples\" ], ) # Create <Routers> here. @router . get ( \"/hello_world\" ) async def hello_world (): \"\"\"Return: A `Hello World` Message.\"\"\" return \"Hello World\"","title":"Python Code"},{"location":"applications/types/","text":"Your GraphQL-Types need to be in a file named types.py inside your Application . graph LR; A{DataBase} --> B; A --> C; B[SQL] --> D; C[Mongo] --> D{GraphQL Type}; File Layout Types (Models) Settings root/ |-- apps/ | `-- MY_APP/ | `-- types.py --> <File> - Your code in HERE! `-- etc... root/ |-- config/ --> <Directory> - Configurations. | `-- settings.py --> <File> - API (Pythonic) | Settings. `-- etc... Both Mongo and SQLAlchemy are optional . But I do recommend using at least one . Otherwise, there is no point in using this section and instead you should just declare your Types by using Strawberry Tools You'll mainly use 3 tools to create the types . fb.sql.model fb.mongo.model fb.field Python Code graph LR; A{SQL} --> C; B{Mongo} --> C[Databases Controller]; C --> D{Types}; Types Databases (settings.py) types.py # -*- coding: utf-8 -*- \"\"\" { Types } for GraphQL \"\"\" from typing import Optional import fastberry as fb import datetime # DateTime Functions class Date : datetime = lambda : datetime . datetime . now () date = lambda : datetime . date . today () time = lambda : datetime . datetime . now () . time () # Create your <types> here. @fb . sql . model ( description = \"(Type) Read The Docs\" ) class Product : # Other { Type | Model } category : Optional [ \"Category\" ] = None # Core { Python } name : str | None = None aliases : list [ str ] | None = None stock : int | None = None is_available : bool | None = None # Custom Scalars { GraphQL } created_on : fb . datetime = fb . field ( Date . datetime ) available_from : fb . date = fb . field ( Date . date ) same_day_shipping_before : fb . time = fb . field ( Date . time ) price : fb . decimal | None = None notes : list [ fb . text ] = fb . field ( list ) is_object : fb . json = fb . field ( dict ) # Other { Type | Model } async def group ( self ) -> Optional [ \"Group\" ]: \"\"\"Group Type\"\"\" return Group ( name = \"awesome\" ) @fb . sql . model class Category : \"\"\"(Type) Read The Docs\"\"\" name : str @fb . mongo . model class Group : \"\"\"(Type) Read The Docs\"\"\" name : str config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [] # Database(s) DATABASES = { \"sql\" : { \"default\" : \"sqlite:///example.db\" }, \"mongo\" : { \"default\" : \"mongodb://localhost:27017/example\" }, } Model Fields Fields translate from a particular type between Python , SQL and GraphQL data. GraphQL Fastberry(Python) SQLAlchemy JavaScript ID fastberry.ID Integer String String str String(length=255) String String fastberry.text Text String Datetime datetime.datetime DateTime String Date datetime.date Date String Time datetime.time Time String Decimal decimal.decimal String(length=255) String Integer int Integer Number Float float Float Number Boolean bool Boolean Boolean JSON fastberry.json JSON Object Your instance includes two fields _id : (str) Meant to be the original Database unique identifier. id : (str) Meant to be the client's GraphQL unique identifier.","title":"Types"},{"location":"applications/types/#file-layout","text":"Types (Models) Settings root/ |-- apps/ | `-- MY_APP/ | `-- types.py --> <File> - Your code in HERE! `-- etc... root/ |-- config/ --> <Directory> - Configurations. | `-- settings.py --> <File> - API (Pythonic) | Settings. `-- etc... Both Mongo and SQLAlchemy are optional . But I do recommend using at least one . Otherwise, there is no point in using this section and instead you should just declare your Types by using Strawberry Tools You'll mainly use 3 tools to create the types . fb.sql.model fb.mongo.model fb.field","title":"File Layout"},{"location":"applications/types/#python-code","text":"graph LR; A{SQL} --> C; B{Mongo} --> C[Databases Controller]; C --> D{Types}; Types Databases (settings.py) types.py # -*- coding: utf-8 -*- \"\"\" { Types } for GraphQL \"\"\" from typing import Optional import fastberry as fb import datetime # DateTime Functions class Date : datetime = lambda : datetime . datetime . now () date = lambda : datetime . date . today () time = lambda : datetime . datetime . now () . time () # Create your <types> here. @fb . sql . model ( description = \"(Type) Read The Docs\" ) class Product : # Other { Type | Model } category : Optional [ \"Category\" ] = None # Core { Python } name : str | None = None aliases : list [ str ] | None = None stock : int | None = None is_available : bool | None = None # Custom Scalars { GraphQL } created_on : fb . datetime = fb . field ( Date . datetime ) available_from : fb . date = fb . field ( Date . date ) same_day_shipping_before : fb . time = fb . field ( Date . time ) price : fb . decimal | None = None notes : list [ fb . text ] = fb . field ( list ) is_object : fb . json = fb . field ( dict ) # Other { Type | Model } async def group ( self ) -> Optional [ \"Group\" ]: \"\"\"Group Type\"\"\" return Group ( name = \"awesome\" ) @fb . sql . model class Category : \"\"\"(Type) Read The Docs\"\"\" name : str @fb . mongo . model class Group : \"\"\"(Type) Read The Docs\"\"\" name : str config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [] # Database(s) DATABASES = { \"sql\" : { \"default\" : \"sqlite:///example.db\" }, \"mongo\" : { \"default\" : \"mongodb://localhost:27017/example\" }, }","title":"Python Code"},{"location":"applications/types/#model-fields","text":"Fields translate from a particular type between Python , SQL and GraphQL data. GraphQL Fastberry(Python) SQLAlchemy JavaScript ID fastberry.ID Integer String String str String(length=255) String String fastberry.text Text String Datetime datetime.datetime DateTime String Date datetime.date Date String Time datetime.time Time String Decimal decimal.decimal String(length=255) String Integer int Integer Number Float float Float Number Boolean bool Boolean Boolean JSON fastberry.json JSON Object","title":"Model Fields"},{"location":"applications/types/#your-instance-includes-two-fields","text":"_id : (str) Meant to be the original Database unique identifier. id : (str) Meant to be the client's GraphQL unique identifier.","title":"Your instance includes two fields"},{"location":"databases/","text":"Alembic The tool used to create migrations for SQL is Alembic for SQLAlchemy . python ./manage.py db {My-Command} Available Commands Command Description auto-migrate Database Make-Migrations & Migrate in a single step . make-migrations Database Make-Migrations. migrate Database Migrate. upgrade Database Migrate (Upgrade). downgrade Database Migrate (Downgrade). history Database Migrations History. reset Database Delete Migrations (All-Versions).","title":"Migrations"},{"location":"databases/#available-commands","text":"Command Description auto-migrate Database Make-Migrations & Migrate in a single step . make-migrations Database Make-Migrations. migrate Database Migrate. upgrade Database Migrate (Upgrade). downgrade Database Migrate (Downgrade). history Database Migrations History. reset Database Delete Migrations (All-Versions).","title":"Available Commands"},{"location":"getting-started/","text":"Warning For the tutorial there is an extra requirement . P ython D ependencies M anager First of all take a look at the tool PDM . Because, we will use it to build our First API . PDM For Linux/Mac curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 - PDM For Windows ( Invoke-WebRequest -Uri https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py -UseBasicParsing ) .Content | python - Getting Started Warning Bash required. If you are in a Windows computer take a look at Git BASH . Create a Folder mkdir myproject cd myproject/ Init PDM pdm init Note We selected Number \" 1 \" in order to use python version ( 3.10 ) The output in your computer will look similar but not exactly the same . Note Then continue with the setup.","title":"Before Starting"},{"location":"getting-started/#python-dependencies-manager","text":"First of all take a look at the tool PDM . Because, we will use it to build our First API .","title":"Python Dependencies Manager"},{"location":"getting-started/#pdm-for-linuxmac","text":"curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 -","title":"PDM For Linux/Mac"},{"location":"getting-started/#pdm-for-windows","text":"( Invoke-WebRequest -Uri https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py -UseBasicParsing ) .Content | python -","title":"PDM For Windows"},{"location":"getting-started/#getting-started","text":"Warning Bash required. If you are in a Windows computer take a look at Git BASH .","title":"Getting Started"},{"location":"getting-started/#create-a-folder","text":"mkdir myproject cd myproject/","title":"Create a Folder"},{"location":"getting-started/#init-pdm","text":"pdm init Note We selected Number \" 1 \" in order to use python version ( 3.10 ) The output in your computer will look similar but not exactly the same . Note Then continue with the setup.","title":"Init PDM"},{"location":"getting-started/first-app/","text":"First App pdm app start-app demo Settings config/settings.py ( Demo ) Installed Apps After creating your first demo app. Add it in the applications list \" INSTALLED_APPS \" config/settings.py # -*- coding: utf-8 -*- import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [ \"demo\" ] # (1) INSTALLED_APPS - Right now we control the INSTALLED_APPS from here. However , depending on mode in the spoc.toml is where you place them. Run Start the Server (Again). After adding your App to INSTALLED_APPS . pdm app run Then go to http://127.0.0.1:8000/graphql GraphQL IF its working it should look something like the image below . Testing Info Copy the code below and paste it the browser's editor. query MyQuery { detail(item: { id: \"fake-id\", ids: [\"fake-id\"] }) search(pagination: { limit: 10, page: 10, sortBy: \"id\", all: false }) } Response Info After running the query. The editor should return the json below { \"data\" : { \"detail\" : \"Detail\" , \"search\" : \"Search\" } }","title":"First App"},{"location":"getting-started/first-app/#first-app","text":"pdm app start-app demo","title":"First App"},{"location":"getting-started/first-app/#settings-configsettingspy-demo","text":"Installed Apps After creating your first demo app. Add it in the applications list \" INSTALLED_APPS \" config/settings.py # -*- coding: utf-8 -*- import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [ \"demo\" ] # (1) INSTALLED_APPS - Right now we control the INSTALLED_APPS from here. However , depending on mode in the spoc.toml is where you place them. Run Start the Server (Again). After adding your App to INSTALLED_APPS . pdm app run Then go to http://127.0.0.1:8000/graphql GraphQL IF its working it should look something like the image below .","title":"Settings config/settings.py (Demo)"},{"location":"getting-started/first-app/#testing","text":"Info Copy the code below and paste it the browser's editor. query MyQuery { detail(item: { id: \"fake-id\", ids: [\"fake-id\"] }) search(pagination: { limit: 10, page: 10, sortBy: \"id\", all: false }) }","title":"Testing"},{"location":"getting-started/first-app/#response","text":"Info After running the query. The editor should return the json below { \"data\" : { \"detail\" : \"Detail\" , \"search\" : \"Search\" } }","title":"Response"},{"location":"getting-started/first-form/","text":"First Form First Type Below is an example of a form named \" Book \" that contains (2) two fields title author Just like our First Type . Form apps/demo/forms.py # -*- coding: utf-8 -*- \"\"\" { Forms } for GraphQL \"\"\" import fastberry as fb # Create Group \"Form\" form = fb . input ( \"form\" ) # Create your <forms> here. @form class Book : \"\"\"(FormBook) Read The Docs\"\"\" title = fb . value ( str , default = None , required = True ) author = fb . value ( str , default = None , required = True ) Usage Info Go to the folder graphql inside your demo app. And, edit the method create to look like the example below. apps/demo/graphql/demo.py # ETC . . . # Type(s) Tools from .. import forms , manager , types @fb . gql class Demo : class Meta : # ETC . . . class Query : # ETC . . . class Mutation : \"\"\"Mutation\"\"\" async def create ( form : forms . Book ) -> fb . mutation ( types . Book ): \"\"\"(Create-Book) Read the Docs\"\"\" # Client's Input print ( form . input ) # Return a \"Book\" Type return types . Book ( id = \"encoded_id\" , author = \"F. Scott Fitzgerald\" , title = \"The Great Gatsby\" ) # ETC . . . In the Browser Go to http://127.0.0.1:8000/graphql And paste the code from below. Then, \" Execute Query \" by pressing the \" \" play button. GraphQL ( Mutation ) mutation MyMutation { create(form: { author: \"F. Scott Fitzgerald\", title: \"The Great Gatsby\" }) { ... on Book { id title author } ... on Error { error meta messages { field text type } } } } Terminal \" Print \" Info Go to your terminal and look at the output.","title":"First Form"},{"location":"getting-started/first-form/#first-form","text":"First Type Below is an example of a form named \" Book \" that contains (2) two fields title author Just like our First Type .","title":"First Form"},{"location":"getting-started/first-form/#form","text":"apps/demo/forms.py # -*- coding: utf-8 -*- \"\"\" { Forms } for GraphQL \"\"\" import fastberry as fb # Create Group \"Form\" form = fb . input ( \"form\" ) # Create your <forms> here. @form class Book : \"\"\"(FormBook) Read The Docs\"\"\" title = fb . value ( str , default = None , required = True ) author = fb . value ( str , default = None , required = True )","title":"Form"},{"location":"getting-started/first-form/#usage","text":"Info Go to the folder graphql inside your demo app. And, edit the method create to look like the example below. apps/demo/graphql/demo.py # ETC . . . # Type(s) Tools from .. import forms , manager , types @fb . gql class Demo : class Meta : # ETC . . . class Query : # ETC . . . class Mutation : \"\"\"Mutation\"\"\" async def create ( form : forms . Book ) -> fb . mutation ( types . Book ): \"\"\"(Create-Book) Read the Docs\"\"\" # Client's Input print ( form . input ) # Return a \"Book\" Type return types . Book ( id = \"encoded_id\" , author = \"F. Scott Fitzgerald\" , title = \"The Great Gatsby\" ) # ETC . . . In the Browser Go to http://127.0.0.1:8000/graphql And paste the code from below. Then, \" Execute Query \" by pressing the \" \" play button.","title":"Usage"},{"location":"getting-started/first-form/#graphql-mutation","text":"mutation MyMutation { create(form: { author: \"F. Scott Fitzgerald\", title: \"The Great Gatsby\" }) { ... on Book { id title author } ... on Error { error meta messages { field text type } } } }","title":"GraphQL (Mutation)"},{"location":"getting-started/first-form/#terminal-print","text":"Info Go to your terminal and look at the output.","title":"Terminal \"Print\""},{"location":"getting-started/first-manager/","text":"First Form Below is an example of a manager named \" Book \" that controls the database operations . Manager apps/demo/manager.py # -*- coding: utf-8 -*- \"\"\" { Controller } for the Database(s) \"\"\" import fastberry as fb from . import types # Create your <managers> here. @fb . manager class Book : \"\"\"Product Manager\"\"\" model = types . Book @classmethod async def create ( cls , form ): # Errors errors_messages = [] # Good Input if form . is_valid : results = await cls . objects . create ( form . data . __dict__ ) if not results . error : item = results . data . __dict__ return types . Book ( ** item ) # Bad Input errors_messages . append ( fb . error ( type = \"input\" , text = \"Something Went Wrong!\" ) ) return fb . errors ( messages = errors_messages ) Usage Info Go to the folder graphql inside your demo app. And, edit the method create to look like the example below. apps/demo/graphql/demo.py # ETC . . . # Type(s) Tools from .. import forms , manager , types @fb . gql class Demo : class Meta : # ETC . . . class Query : # ETC . . . class Mutation : \"\"\"Mutation\"\"\" async def create ( form : forms . Book ) -> fb . mutation ( types . Book ): \"\"\"(Create-Book) Read the Docs\"\"\" return await manager . Book . create ( form . input ) # ETC . . . More at Applications Warning End of this tutorial . To learn more about how to create Types , Forms , Manager and other functionalities . Please read the full documentation for the Applications section.","title":"First Manager"},{"location":"getting-started/first-manager/#first-form","text":"Below is an example of a manager named \" Book \" that controls the database operations .","title":"First Form"},{"location":"getting-started/first-manager/#manager","text":"apps/demo/manager.py # -*- coding: utf-8 -*- \"\"\" { Controller } for the Database(s) \"\"\" import fastberry as fb from . import types # Create your <managers> here. @fb . manager class Book : \"\"\"Product Manager\"\"\" model = types . Book @classmethod async def create ( cls , form ): # Errors errors_messages = [] # Good Input if form . is_valid : results = await cls . objects . create ( form . data . __dict__ ) if not results . error : item = results . data . __dict__ return types . Book ( ** item ) # Bad Input errors_messages . append ( fb . error ( type = \"input\" , text = \"Something Went Wrong!\" ) ) return fb . errors ( messages = errors_messages )","title":"Manager"},{"location":"getting-started/first-manager/#usage","text":"Info Go to the folder graphql inside your demo app. And, edit the method create to look like the example below. apps/demo/graphql/demo.py # ETC . . . # Type(s) Tools from .. import forms , manager , types @fb . gql class Demo : class Meta : # ETC . . . class Query : # ETC . . . class Mutation : \"\"\"Mutation\"\"\" async def create ( form : forms . Book ) -> fb . mutation ( types . Book ): \"\"\"(Create-Book) Read the Docs\"\"\" return await manager . Book . create ( form . input ) # ETC . . .","title":"Usage"},{"location":"getting-started/first-manager/#more-at-applications","text":"Warning End of this tutorial . To learn more about how to create Types , Forms , Manager and other functionalities . Please read the full documentation for the Applications section.","title":"More at Applications"},{"location":"getting-started/first-project/","text":"First Project pdm run startproject Settings pyproject.toml ( Demo ) [project] name = \"\" # (1) version = \"\" # (2) # etc ... Required - The Project Must Have a NAME . Required - The Project Must Have a VERSION Ex: (0.1.0) . Warning Make sure that the project's settings look something like the example below. . . or it will not work pyproject.toml [project] name = \"myproject\" version = \"1.0.0\" # etc ... Adding a PDM Command pyproject.toml [project] name = \"myproject\" version = \"1.0.0\" # etc ... [tool.pdm.scripts] app = \"python manage.py\" # (1) Command - Manage Application. Finally! Getting Started pdm app run Wait After the server starts, then go to http://localhost:8000/docs You can notice : Your project's name Your project's version","title":"First Project"},{"location":"getting-started/first-project/#first-project","text":"pdm run startproject","title":"First Project"},{"location":"getting-started/first-project/#settings-pyprojecttoml-demo","text":"[project] name = \"\" # (1) version = \"\" # (2) # etc ... Required - The Project Must Have a NAME . Required - The Project Must Have a VERSION Ex: (0.1.0) . Warning Make sure that the project's settings look something like the example below. . . or it will not work pyproject.toml [project] name = \"myproject\" version = \"1.0.0\" # etc ...","title":"Settings pyproject.toml (Demo)"},{"location":"getting-started/first-project/#adding-a-pdm-command","text":"pyproject.toml [project] name = \"myproject\" version = \"1.0.0\" # etc ... [tool.pdm.scripts] app = \"python manage.py\" # (1) Command - Manage Application.","title":"Adding a PDM Command"},{"location":"getting-started/first-project/#finally-getting-started","text":"pdm app run Wait After the server starts, then go to http://localhost:8000/docs You can notice : Your project's name Your project's version","title":"Finally! Getting Started"},{"location":"getting-started/first-type/","text":"First Type Warning For the example first setup a SQLite database in the settings file. Settings config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [ \"demo\" ] # Database(s) DATABASES = { \"sql\" : { \"default\" : \"sqlite:///example.db\" }, \"mongo\" : { \"default\" : None }, } Type Info Creating Book as our first Type apps/demo/types.py # -*- coding: utf-8 -*- \"\"\" { Types } for GraphQL \"\"\" from typing import Optional import fastberry as fb # Create your <types> here. @fb . sql . model class Book : \"\"\"(Type) Read The Docs\"\"\" title : str author : str Database Migrations pdm app db auto-migrate Warning Keep in mind that migrations are only for SQL Run Then , Start the Server (Again). pdm app run","title":"First Type"},{"location":"getting-started/first-type/#first-type","text":"Warning For the example first setup a SQLite database in the settings file.","title":"First Type"},{"location":"getting-started/first-type/#settings","text":"config/settings.py # -*- coding: utf-8 -*- \"\"\" { Settings } \"\"\" import pathlib # Base Directory BASE_DIR = pathlib . Path ( __file__ ) . parents [ 1 ] # Installed Apps INSTALLED_APPS = [ \"demo\" ] # Database(s) DATABASES = { \"sql\" : { \"default\" : \"sqlite:///example.db\" }, \"mongo\" : { \"default\" : None }, }","title":"Settings"},{"location":"getting-started/first-type/#type","text":"Info Creating Book as our first Type apps/demo/types.py # -*- coding: utf-8 -*- \"\"\" { Types } for GraphQL \"\"\" from typing import Optional import fastberry as fb # Create your <types> here. @fb . sql . model class Book : \"\"\"(Type) Read The Docs\"\"\" title : str author : str","title":"Type"},{"location":"getting-started/first-type/#database-migrations","text":"pdm app db auto-migrate Warning Keep in mind that migrations are only for SQL Run Then , Start the Server (Again). pdm app run","title":"Database Migrations"},{"location":"getting-started/installation/","text":"Warning Make sure you read the Before Starting documentation. Install Fastberry pdm add \"fastberry[testing]\" For the example above we used the \"testing\" option. It will install SQL and Mongo . And SQL will be installed with SQLite that way the only extra step you need is to download MongoDB However , is optional . You can use SQL only for testing purposes . Note 2 Main Options are available for fastberry installation . Mongo pdm add \"fastberry[mongo]\" SQL pdm add \"fastberry[sql]\" SQL comes with 3 options PostgreSQL pdm add \"fastberry[sql]\" \"databases[postgresql]\" MySQL pdm add \"fastberry[sql]\" \"databases[mysql]\" SQLite pdm add \"fastberry[sql]\" \"databases[sqlite]\"","title":"Installation"},{"location":"getting-started/installation/#install-fastberry","text":"pdm add \"fastberry[testing]\" For the example above we used the \"testing\" option. It will install SQL and Mongo . And SQL will be installed with SQLite that way the only extra step you need is to download MongoDB However , is optional . You can use SQL only for testing purposes . Note 2 Main Options are available for fastberry installation . Mongo pdm add \"fastberry[mongo]\" SQL pdm add \"fastberry[sql]\" SQL comes with 3 options PostgreSQL pdm add \"fastberry[sql]\" \"databases[postgresql]\" MySQL pdm add \"fastberry[sql]\" \"databases[mysql]\" SQLite pdm add \"fastberry[sql]\" \"databases[sqlite]\"","title":"Install Fastberry"},{"location":"middleware/events/","text":"Extension Example Inject { on_startup } and { on_shutdown } Server Events. Creating an on-event method Context app = FastAPI object. settings = Settings module. controller = Fastberry object. on_event.py def on_startup ( context ): print ( \"Server Startup\" ) print ( context . app ) print ( context . settings ) print ( context . controller ) def on_shutdown ( context ): print ( \"Server Shutdown\" ) Example of built-in on-event fastberry.extras.redirect_root is a built-in on-event method. You can redirect the root-path http://localhost:8000/ to http://localhost:8000/docs on_event.py from fastapi.responses import RedirectResponse def redirect_root ( context ): \"\"\"Redirect\"\"\" @context . app . get ( \"/\" , response_class = RedirectResponse ) async def redirect_root (): \"\"\"Redirect To Docs\"\"\" return \"/docs\" return context Note In the file spoc.toml inside your config folder. Add the on-event method. config/spoc.toml [ spoc ] # etc ... [ spoc . extras ] # etc ... on_startup = [ \"fastberry.extras.redirect_root\" ] on_shutdown = []","title":"Events"},{"location":"middleware/events/#extension-example","text":"Inject { on_startup } and { on_shutdown } Server Events.","title":"Extension Example"},{"location":"middleware/events/#creating-an-on-event-method","text":"Context app = FastAPI object. settings = Settings module. controller = Fastberry object. on_event.py def on_startup ( context ): print ( \"Server Startup\" ) print ( context . app ) print ( context . settings ) print ( context . controller ) def on_shutdown ( context ): print ( \"Server Shutdown\" )","title":"Creating an on-event method"},{"location":"middleware/events/#example-of-built-in-on-event","text":"fastberry.extras.redirect_root is a built-in on-event method. You can redirect the root-path http://localhost:8000/ to http://localhost:8000/docs on_event.py from fastapi.responses import RedirectResponse def redirect_root ( context ): \"\"\"Redirect\"\"\" @context . app . get ( \"/\" , response_class = RedirectResponse ) async def redirect_root (): \"\"\"Redirect To Docs\"\"\" return \"/docs\" return context Note In the file spoc.toml inside your config folder. Add the on-event method. config/spoc.toml [ spoc ] # etc ... [ spoc . extras ] # etc ... on_startup = [ \"fastberry.extras.redirect_root\" ] on_shutdown = []","title":"Example of built-in on-event"},{"location":"middleware/extension/","text":"Extension Example Inject { User } or { Anonymous-User } to GraphQL Context . EXTENSIONS (Strawberry) You can create your own extension by using the base module . The BaseExtension included is just a wrapper/rename for Extension from Strawberry Tutorial Full-Code Import your Basics # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from pydantic import BaseModel from fastberry import BaseExtension Create the User class with pydantic or dataclasses class User ( BaseModel ): \"\"\"API User\"\"\" id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False Anonymous -User or Authenticated -User? def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user async def get_request_user ( request ): \"\"\"Get User from Request the Header or Cookie\"\"\" print ( request ) return None Create your Strawberry / Fastberry Extension For more information about custom extensions go to strawberry : custom-extensions class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user extension.py # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from pydantic import BaseModel from fastberry import BaseExtension class User ( BaseModel ): \"\"\"API User\"\"\" id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user async def get_request_user ( request ): \"\"\"Get User from Request the Header or Cookie\"\"\" print ( request ) return None class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user","title":"Extension"},{"location":"middleware/extension/#extension-example","text":"Inject { User } or { Anonymous-User } to GraphQL Context .","title":"Extension Example"},{"location":"middleware/extension/#extensions-strawberry","text":"You can create your own extension by using the base module . The BaseExtension included is just a wrapper/rename for Extension from Strawberry Tutorial Full-Code","title":"EXTENSIONS (Strawberry)"},{"location":"middleware/extension/#import-your-basics","text":"# -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from pydantic import BaseModel from fastberry import BaseExtension","title":"Import your Basics"},{"location":"middleware/extension/#create-the-user-class-with-pydantic-or-dataclasses","text":"class User ( BaseModel ): \"\"\"API User\"\"\" id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False","title":"Create the User class with pydantic or dataclasses"},{"location":"middleware/extension/#anonymous-user-or-authenticated-user","text":"def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user async def get_request_user ( request ): \"\"\"Get User from Request the Header or Cookie\"\"\" print ( request ) return None","title":"Anonymous-User or Authenticated-User?"},{"location":"middleware/extension/#create-your-strawberry-fastberry-extension","text":"For more information about custom extensions go to strawberry : custom-extensions class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user extension.py # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from pydantic import BaseModel from fastberry import BaseExtension class User ( BaseModel ): \"\"\"API User\"\"\" id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user async def get_request_user ( request ): \"\"\"Get User from Request the Header or Cookie\"\"\" print ( request ) return None class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user","title":"Create your Strawberry / Fastberry Extension"},{"location":"middleware/middleware/","text":"Middleware Example Get { Authorization } from the { Cookies } and inject it to the { Headers }. MIDDLEWARE (Starlette) You can create your own middleware by using the base module . The BaseMiddleware included is just a wrapper/rename for BaseHTTPMiddleware from Starlette Tutorial Full-Code Import your Basics # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware Create your FastAPI / Starlette / Fastberry Middleware For more information about custom middleware go to starlette : BaseHTTPMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response middleware.py # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response","title":"Middleware"},{"location":"middleware/middleware/#middleware-example","text":"Get { Authorization } from the { Cookies } and inject it to the { Headers }.","title":"Middleware Example"},{"location":"middleware/middleware/#middleware-starlette","text":"You can create your own middleware by using the base module . The BaseMiddleware included is just a wrapper/rename for BaseHTTPMiddleware from Starlette Tutorial Full-Code","title":"MIDDLEWARE (Starlette)"},{"location":"middleware/middleware/#import-your-basics","text":"# -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware","title":"Import your Basics"},{"location":"middleware/middleware/#create-your-fastapi-starlette-fastberry-middleware","text":"For more information about custom middleware go to starlette : BaseHTTPMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response middleware.py # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response","title":"Create your FastAPI / Starlette / Fastberry Middleware"},{"location":"middleware/permissions/","text":"Permission Example Check GraphQL Context for a { User } or { Anonymous-User }. PERMISSIONS (Strawberry) You can create your own permissions by using the base module . The BasePermission included is just a wrapper for BasePermission from Strawberry Tutorial Full-Code Import your Basics # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission Get User Permissions ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms Create your Strawberry / Fastberry Permission For more information about custom permissions go to strawberry : custom-permissions class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False permissions.py # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False","title":"Permission"},{"location":"middleware/permissions/#permission-example","text":"Check GraphQL Context for a { User } or { Anonymous-User }.","title":"Permission Example"},{"location":"middleware/permissions/#permissions-strawberry","text":"You can create your own permissions by using the base module . The BasePermission included is just a wrapper for BasePermission from Strawberry Tutorial Full-Code","title":"PERMISSIONS (Strawberry)"},{"location":"middleware/permissions/#import-your-basics","text":"# -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission","title":"Import your Basics"},{"location":"middleware/permissions/#get-user-permissions","text":"ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms","title":"Get User Permissions"},{"location":"middleware/permissions/#create-your-strawberry-fastberry-permission","text":"For more information about custom permissions go to strawberry : custom-permissions class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False permissions.py # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False","title":"Create your Strawberry / Fastberry Permission"},{"location":"middleware/plugin/","text":"Plugin Example Coming full circle with all Four-Elements (Middleware, Extension, Permissions and Router) Plugin Workflow graph LR; Z[Client] --> A; A[Request] --> B; B{Middleware} --> C; C{Extension} --> D; D{Permissions} --> E; E[Resolver] --> F; F[Response] --> Z; Command ./manage.py start-app my_awesome_plugin --plugin Files Layout root/ | |-- apps/ | `-- MY_PLUGIN/ --> <Directory> - Your App in HERE! | | | |-- extension.py | |-- middleware.py | |-- permission.py | |-- router.py | `-- users.py | `-- etc... Other Requirements python -m pip install \"python-jose[cryptography]\" \"passlib[bcrypt]\" Jose Passlib Demo Credentials Username : johndoe or janedoe Password : secret Python Code users.py router.py extension.py middleware.py permission.py users.py # -*- coding: utf-8 -*- \"\"\" [Users] \"\"\" from datetime import datetime , timedelta from typing import Optional from fastapi import Depends , HTTPException , status from fastapi.security import OAuth2PasswordBearer from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b\" # Security ALGORITHM = \"HS256\" FAKE_USERS_DB = { \"johndoe\" : { \"id\" : 1 , \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , \"is_staff\" : True , \"super_user\" : False , }, \"janedoe\" : { \"id\" : 2 , \"username\" : \"janedoe\" , \"full_name\" : \"Jane Doe\" , \"email\" : \"janedoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , \"is_staff\" : False , \"super_user\" : False , }, } FAKE_ROLES_DB = { 1 : \"admin\" , 2 : \"public\" } class UserLogin ( BaseModel ): username : str password : str class Token ( BaseModel ): access_token : str token_type : str class User ( BaseModel ): id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) async def get_user ( username : str ): db = FAKE_USERS_DB role_db = FAKE_ROLES_DB if username in db : user_dict = db [ username ] role = role_db . get ( user_dict . get ( \"id\" )) user_dict [ \"role\" ] = role return UserInDB ( ** user_dict ) async def get_request_user ( request ): access_token = request . headers . get ( \"Authorization\" ) user = None if access_token : token = access_token . replace ( \"Bearer \" , \"\" ) auth_dict = await decode_token ( token ) if auth_dict : username = auth_dict . get ( \"username\" ) user = await get_user ( username = username ) return user async def authenticate_user ( username : str , password : str ): user = await get_user ( username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def decode_token ( token : str ): try : return_value = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) except JWTError : return_value = {} return return_value async def get_current_user ( token : Optional [ str ] = Depends ( oauth2_scheme ), ): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) payload = await decode_token ( token ) username : str = payload . get ( \"username\" ) if username is None : raise credentials_exception user = await get_user ( username = username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user router.py # -*- coding: utf-8 -*- \"\"\" [Router] \"\"\" from datetime import timedelta from fastapi import Depends , HTTPException , Response , status from fastapi.responses import JSONResponse from fastapi.security import OAuth2PasswordRequestForm from fastberry import Router from .users import ( Token , User , authenticate_user , create_access_token , get_current_active_user , ) ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 router = Router ( tags = [ \"Users\" ], ) def to_camel_case ( text ): init , * temp = text . split ( \"_\" ) return \"\" . join ([ init . lower (), * map ( str . title , temp )]) @router . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( response : Response , form_data : OAuth2PasswordRequestForm = Depends (), ): user = await authenticate_user ( form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : str ( user . id ), \"username\" : user . username }, expires_delta = access_token_expires , ) response . set_cookie ( key = \"Authorization\" , value = access_token , httponly = True , secure = True ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @router . get ( \"/logout\" ) async def logout_user ( current_user : User = Depends ( get_current_active_user )): response = JSONResponse ({ \"logout\" : True }) response . delete_cookie ( key = \"Authorization\" ) return response @router . get ( \"/user-me\" ) # response_model=User async def read_users_me ( current_user : User = Depends ( get_current_active_user )): user_me = { to_camel_case ( k ): v for k , v in current_user . __dict__ . items ()} del user_me [ \"hashedPassword\" ] return user_me extension.py # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from fastberry import BaseExtension from .users import User , get_request_user def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user middleware.py # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response permission.py # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False","title":"Plugin"},{"location":"middleware/plugin/#plugin-example","text":"Coming full circle with all Four-Elements (Middleware, Extension, Permissions and Router)","title":"Plugin Example"},{"location":"middleware/plugin/#plugin-workflow","text":"graph LR; Z[Client] --> A; A[Request] --> B; B{Middleware} --> C; C{Extension} --> D; D{Permissions} --> E; E[Resolver] --> F; F[Response] --> Z;","title":"Plugin Workflow"},{"location":"middleware/plugin/#command","text":"./manage.py start-app my_awesome_plugin --plugin","title":"Command"},{"location":"middleware/plugin/#files-layout","text":"root/ | |-- apps/ | `-- MY_PLUGIN/ --> <Directory> - Your App in HERE! | | | |-- extension.py | |-- middleware.py | |-- permission.py | |-- router.py | `-- users.py | `-- etc...","title":"Files Layout"},{"location":"middleware/plugin/#other-requirements","text":"python -m pip install \"python-jose[cryptography]\" \"passlib[bcrypt]\" Jose Passlib","title":"Other Requirements"},{"location":"middleware/plugin/#demo-credentials","text":"Username : johndoe or janedoe Password : secret","title":"Demo Credentials"},{"location":"middleware/plugin/#python-code","text":"users.py router.py extension.py middleware.py permission.py users.py # -*- coding: utf-8 -*- \"\"\" [Users] \"\"\" from datetime import datetime , timedelta from typing import Optional from fastapi import Depends , HTTPException , status from fastapi.security import OAuth2PasswordBearer from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel SECRET_KEY = \"fastapi-insecure-09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b\" # Security ALGORITHM = \"HS256\" FAKE_USERS_DB = { \"johndoe\" : { \"id\" : 1 , \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , \"is_staff\" : True , \"super_user\" : False , }, \"janedoe\" : { \"id\" : 2 , \"username\" : \"janedoe\" , \"full_name\" : \"Jane Doe\" , \"email\" : \"janedoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , \"is_staff\" : False , \"super_user\" : False , }, } FAKE_ROLES_DB = { 1 : \"admin\" , 2 : \"public\" } class UserLogin ( BaseModel ): username : str password : str class Token ( BaseModel ): access_token : str token_type : str class User ( BaseModel ): id : str role : str username : str | None = None email : str | None = None full_name : str | None = None disabled : bool = False is_staff : bool = False super_user : bool = False is_authenticated : bool = False is_anonymous : bool = False class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) async def get_user ( username : str ): db = FAKE_USERS_DB role_db = FAKE_ROLES_DB if username in db : user_dict = db [ username ] role = role_db . get ( user_dict . get ( \"id\" )) user_dict [ \"role\" ] = role return UserInDB ( ** user_dict ) async def get_request_user ( request ): access_token = request . headers . get ( \"Authorization\" ) user = None if access_token : token = access_token . replace ( \"Bearer \" , \"\" ) auth_dict = await decode_token ( token ) if auth_dict : username = auth_dict . get ( \"username\" ) user = await get_user ( username = username ) return user async def authenticate_user ( username : str , password : str ): user = await get_user ( username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def decode_token ( token : str ): try : return_value = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) except JWTError : return_value = {} return return_value async def get_current_user ( token : Optional [ str ] = Depends ( oauth2_scheme ), ): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) payload = await decode_token ( token ) username : str = payload . get ( \"username\" ) if username is None : raise credentials_exception user = await get_user ( username = username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user router.py # -*- coding: utf-8 -*- \"\"\" [Router] \"\"\" from datetime import timedelta from fastapi import Depends , HTTPException , Response , status from fastapi.responses import JSONResponse from fastapi.security import OAuth2PasswordRequestForm from fastberry import Router from .users import ( Token , User , authenticate_user , create_access_token , get_current_active_user , ) ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 router = Router ( tags = [ \"Users\" ], ) def to_camel_case ( text ): init , * temp = text . split ( \"_\" ) return \"\" . join ([ init . lower (), * map ( str . title , temp )]) @router . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( response : Response , form_data : OAuth2PasswordRequestForm = Depends (), ): user = await authenticate_user ( form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : str ( user . id ), \"username\" : user . username }, expires_delta = access_token_expires , ) response . set_cookie ( key = \"Authorization\" , value = access_token , httponly = True , secure = True ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @router . get ( \"/logout\" ) async def logout_user ( current_user : User = Depends ( get_current_active_user )): response = JSONResponse ({ \"logout\" : True }) response . delete_cookie ( key = \"Authorization\" ) return response @router . get ( \"/user-me\" ) # response_model=User async def read_users_me ( current_user : User = Depends ( get_current_active_user )): user_me = { to_camel_case ( k ): v for k , v in current_user . __dict__ . items ()} del user_me [ \"hashedPassword\" ] return user_me extension.py # -*- coding: utf-8 -*- \"\"\" [Extension] Inject { User } or { Anonymous-User } to GraphQL Context. \"\"\" import secrets from fastberry import BaseExtension from .users import User , get_request_user def anonymous_user (): \"\"\"Default Anonymous User\"\"\" token = f \"anonymous- { secrets . token_urlsafe ( 38 ) } \" user = User ( id = token , role = \"public\" , is_anonymous = True , ) return user class InjectUser ( BaseExtension ): \"\"\"Inject User Extension\"\"\" async def on_executing_start ( self ): request = self . execution_context . context . get ( \"request\" ) user = await get_request_user ( request ) if not user : # Anonymous-User user = anonymous_user () else : # User-Authenticated user_dict = user . __dict__ user_dict [ \"is_authenticated\" ] = True user = User ( ** user_dict ) # Set-User (Context) self . execution_context . context [ \"user\" ] = user middleware.py # -*- coding: utf-8 -*- \"\"\" [Middleware] Get { Authorization } from the { Cookies } and inject it to the { Headers }. \"\"\" from fastberry import BaseMiddleware class AuthenticatedCookieMiddleware ( BaseMiddleware ): \"\"\"Get Authorization From Cookie\"\"\" async def dispatch ( self , request , call_next ): \"\"\"Process Request and Inject Header\"\"\" if ( \"Authorization\" not in request . headers and \"Authorization\" in request . cookies ): access_token = request . cookies . get ( \"Authorization\" ) request . headers . __dict__ [ \"_list\" ] . append ( ( \"authorization\" . encode (), f \"Bearer { access_token } \" . encode (), ) ) response = await call_next ( request ) return response permission.py # -*- coding: utf-8 -*- \"\"\" [Permission] Check GraphQL Context for a { User } or { Anonymous-User }. \"\"\" import typing from strawberry.types import Info from fastberry import BasePermission ROLES = { \"public\" : [ \"SomeMethod\" ], \"admin\" : [ \"demoDetail\" , \"demoSearch\" , \"demoCreate\" , \"demoUpdate\" , \"demoDelete\" ], } def get_perms ( role : str = None ): \"\"\"Get Role And Check For Permissions\"\"\" found = ROLES . get ( role , []) if found and role : perms = found else : perms = [] return perms class IsAuthorized ( BasePermission ): \"\"\"Check If User Is Authorized\"\"\" message = \"User is not authorized\" # Unauthorized async def has_permission ( self , source : typing . Any , info : Info , ** kwargs ) -> bool : \"\"\"Check GraphQL's Info Context\"\"\" # if not user.is_authenticated and user.is_anonymous: operation = info . field_name # info.python_name user = info . context . get ( \"user\" ) if user : permissions = get_perms ( user . role ) return operation in permissions return False","title":"Python Code"},{"location":"middleware/workflow/","text":"Middleware + Extension + Permissions Building a plugin with all 3 elements (Middleware, Extension and Permissions). You can also combine them with a Router . For example: to create a User / Authentication API. Plugin Workflow graph LR; Z[Client] --> A; A[Request] --> B; B{Middleware} --> C; C{Extension} --> D; D{Permissions} --> E; E[Resolver] --> F; F[Response] --> Z; Middleware (FastAPI / Starlette) User is Authenticated or Anonymous ? Inject the Authorization Token to the Headers if the is in the Cookies . graph LR; A{My Middleware} --> |Request Headers| B[Authorization Token?]; B --> |Yes| D[Authenticated-User]; B --> |No| C[Authorization Cookie?]; C --> |No| E[Anonymous-User]; C --> |Yes| F[Inject-Header]; F --> |Authorization Token| B; D --> Z[Resolver / Next-Method]; E --> Z; Extension (Strawberry) Convert Authorization-Token or None to a User-Object and inject it to GraphQL 's context. graph LR; A{My Extension} --> |Request:Headers| B; B[Authorization Token?] --> |Yes| C[Authenticated-User]; B --> |No| D[Anonymous-User]; C --> E[User-Object]; D --> E; E --> |Inject User| F[info.context]; F --> Z[Resolver / Next-Method];; Permissions (Strawberry) Get the request's User and check the Role for a list of allowed methods . Then, check if info.field_name (which is the name of the current: Query or Mutation ) is in the list of allowed methods . Alternatively, you can use info.python_name if you prefer to use the python's original name of the function. graph LR; A{My Permission} --> |info.context| B[User]; B --> |is| C[Allowed?] C --> |Yes| F[Resolver / Next-Method] C --> |No| G[Response: Error]","title":"Workflow"},{"location":"middleware/workflow/#middleware-extension-permissions","text":"Building a plugin with all 3 elements (Middleware, Extension and Permissions). You can also combine them with a Router . For example: to create a User / Authentication API.","title":"Middleware + Extension + Permissions"},{"location":"middleware/workflow/#plugin-workflow","text":"graph LR; Z[Client] --> A; A[Request] --> B; B{Middleware} --> C; C{Extension} --> D; D{Permissions} --> E; E[Resolver] --> F; F[Response] --> Z;","title":"Plugin Workflow"},{"location":"middleware/workflow/#middleware-fastapi-starlette","text":"User is Authenticated or Anonymous ? Inject the Authorization Token to the Headers if the is in the Cookies . graph LR; A{My Middleware} --> |Request Headers| B[Authorization Token?]; B --> |Yes| D[Authenticated-User]; B --> |No| C[Authorization Cookie?]; C --> |No| E[Anonymous-User]; C --> |Yes| F[Inject-Header]; F --> |Authorization Token| B; D --> Z[Resolver / Next-Method]; E --> Z;","title":"Middleware (FastAPI / Starlette)"},{"location":"middleware/workflow/#extension-strawberry","text":"Convert Authorization-Token or None to a User-Object and inject it to GraphQL 's context. graph LR; A{My Extension} --> |Request:Headers| B; B[Authorization Token?] --> |Yes| C[Authenticated-User]; B --> |No| D[Anonymous-User]; C --> E[User-Object]; D --> E; E --> |Inject User| F[info.context]; F --> Z[Resolver / Next-Method];;","title":"Extension (Strawberry)"},{"location":"middleware/workflow/#permissions-strawberry","text":"Get the request's User and check the Role for a list of allowed methods . Then, check if info.field_name (which is the name of the current: Query or Mutation ) is in the list of allowed methods . Alternatively, you can use info.python_name if you prefer to use the python's original name of the function. graph LR; A{My Permission} --> |info.context| B[User]; B --> |is| C[Allowed?] C --> |Yes| F[Resolver / Next-Method] C --> |No| G[Response: Error]","title":"Permissions (Strawberry)"}]}